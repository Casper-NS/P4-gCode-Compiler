/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;

using  GGCodeParser.analysis;

namespace GGCodeParser.node {

public abstract class PCstProgram : Node
{
}

public abstract class PCstMainFunctionDeclaration : Node
{
}

public abstract class PCstDeclarationList : Node
{
}

public abstract class PCstDeclaration : Node
{
}

public abstract class PCstVariableDeclaration : Node
{
}

public abstract class PCstUninitialisedVariable : Node
{
}

public abstract class PCstTypes : Node
{
}

public abstract class PCstVectorValues : Node
{
}

public abstract class PCstFunctionDeclaration : Node
{
}

public abstract class PCstFormalParamList : Node
{
}

public abstract class PCstBlock : Node
{
}

public abstract class PCstStatementList : Node
{
}

public abstract class PCstStatement : Node
{
}

public abstract class PCstIfStatement : Node
{
}

public abstract class PCstRepeatStatement : Node
{
}

public abstract class PCstWhileStatement : Node
{
}

public abstract class PCstGcodeLiteral : Node
{
}

public abstract class PCstAssignments : Node
{
}

public abstract class PCstFunctionCall : Node
{
}

public abstract class PCstActualParamList : Node
{
}

public abstract class PCstExpression : Node
{
}

public abstract class PCstLogicOrExp : Node
{
}

public abstract class PCstBoolExp : Node
{
}

public abstract class PCstAssociativeExp : Node
{
}

public abstract class PCstNotAssociativeExp : Node
{
}

public abstract class PCstLeafExp : Node
{
}


public sealed class ACstProgram : PCstProgram
{
    private PCstDeclarationList _a_;
    private PCstMainFunctionDeclaration _cst_main_function_declaration_;
    private PCstDeclarationList _b_;

    public ACstProgram ()
    {
    }

    public ACstProgram (
            PCstDeclarationList _a_,
            PCstMainFunctionDeclaration _cst_main_function_declaration_,
            PCstDeclarationList _b_
    )
    {
        SetA (_a_);
        SetCstMainFunctionDeclaration (_cst_main_function_declaration_);
        SetB (_b_);
    }

    public override Object Clone()
    {
        return new ACstProgram (
            (PCstDeclarationList)CloneNode (_a_),
            (PCstMainFunctionDeclaration)CloneNode (_cst_main_function_declaration_),
            (PCstDeclarationList)CloneNode (_b_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACstProgram(this);
    }

    public PCstDeclarationList GetA ()
    {
        return _a_;
    }

    public void SetA (PCstDeclarationList node)
    {
        if(_a_ != null)
        {
            _a_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _a_ = node;
    }
    public PCstMainFunctionDeclaration GetCstMainFunctionDeclaration ()
    {
        return _cst_main_function_declaration_;
    }

    public void SetCstMainFunctionDeclaration (PCstMainFunctionDeclaration node)
    {
        if(_cst_main_function_declaration_ != null)
        {
            _cst_main_function_declaration_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_main_function_declaration_ = node;
    }
    public PCstDeclarationList GetB ()
    {
        return _b_;
    }

    public void SetB (PCstDeclarationList node)
    {
        if(_b_ != null)
        {
            _b_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _b_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_a_)
            + ToString (_cst_main_function_declaration_)
            + ToString (_b_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _a_ == child )
        {
            _a_ = null;
            return;
        }
        if ( _cst_main_function_declaration_ == child )
        {
            _cst_main_function_declaration_ = null;
            return;
        }
        if ( _b_ == child )
        {
            _b_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _a_ == oldChild )
        {
            SetA ((PCstDeclarationList) newChild);
            return;
        }
        if ( _cst_main_function_declaration_ == oldChild )
        {
            SetCstMainFunctionDeclaration ((PCstMainFunctionDeclaration) newChild);
            return;
        }
        if ( _b_ == oldChild )
        {
            SetB ((PCstDeclarationList) newChild);
            return;
        }
    }

}
public sealed class ACstMainFunctionDeclaration : PCstMainFunctionDeclaration
{
    private TMain _main_;
    private TLPar _l_par_;
    private TRPar _r_par_;
    private TEol _eol_;
    private PCstBlock _cst_block_;

    public ACstMainFunctionDeclaration ()
    {
    }

    public ACstMainFunctionDeclaration (
            TMain _main_,
            TLPar _l_par_,
            TRPar _r_par_,
            TEol _eol_,
            PCstBlock _cst_block_
    )
    {
        SetMain (_main_);
        SetLPar (_l_par_);
        SetRPar (_r_par_);
        SetEol (_eol_);
        SetCstBlock (_cst_block_);
    }

    public override Object Clone()
    {
        return new ACstMainFunctionDeclaration (
            (TMain)CloneNode (_main_),
            (TLPar)CloneNode (_l_par_),
            (TRPar)CloneNode (_r_par_),
            (TEol)CloneNode (_eol_),
            (PCstBlock)CloneNode (_cst_block_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACstMainFunctionDeclaration(this);
    }

    public TMain GetMain ()
    {
        return _main_;
    }

    public void SetMain (TMain node)
    {
        if(_main_ != null)
        {
            _main_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _main_ = node;
    }
    public TLPar GetLPar ()
    {
        return _l_par_;
    }

    public void SetLPar (TLPar node)
    {
        if(_l_par_ != null)
        {
            _l_par_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_par_ = node;
    }
    public TRPar GetRPar ()
    {
        return _r_par_;
    }

    public void SetRPar (TRPar node)
    {
        if(_r_par_ != null)
        {
            _r_par_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_par_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }
    public PCstBlock GetCstBlock ()
    {
        return _cst_block_;
    }

    public void SetCstBlock (PCstBlock node)
    {
        if(_cst_block_ != null)
        {
            _cst_block_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_block_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_main_)
            + ToString (_l_par_)
            + ToString (_r_par_)
            + ToString (_eol_)
            + ToString (_cst_block_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _main_ == child )
        {
            _main_ = null;
            return;
        }
        if ( _l_par_ == child )
        {
            _l_par_ = null;
            return;
        }
        if ( _r_par_ == child )
        {
            _r_par_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
        if ( _cst_block_ == child )
        {
            _cst_block_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _main_ == oldChild )
        {
            SetMain ((TMain) newChild);
            return;
        }
        if ( _l_par_ == oldChild )
        {
            SetLPar ((TLPar) newChild);
            return;
        }
        if ( _r_par_ == oldChild )
        {
            SetRPar ((TRPar) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
        if ( _cst_block_ == oldChild )
        {
            SetCstBlock ((PCstBlock) newChild);
            return;
        }
    }

}
public sealed class AListCstDeclarationList : PCstDeclarationList
{
    private PCstDeclaration _cst_declaration_;
    private TypedList _eol_;
    private PCstDeclarationList _cst_declaration_list_;

    public AListCstDeclarationList ()
    {
        this._eol_ = new TypedList(new Eol_Cast(this));
    }

    public AListCstDeclarationList (
            PCstDeclaration _cst_declaration_,
            IList _eol_,
            PCstDeclarationList _cst_declaration_list_
    )
    {
        SetCstDeclaration (_cst_declaration_);
        this._eol_ = new TypedList(new Eol_Cast(this));
        this._eol_.Clear();
        this._eol_.AddAll(_eol_);
        SetCstDeclarationList (_cst_declaration_list_);
    }

    public override Object Clone()
    {
        return new AListCstDeclarationList (
            (PCstDeclaration)CloneNode (_cst_declaration_),
            CloneList (_eol_),
            (PCstDeclarationList)CloneNode (_cst_declaration_list_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAListCstDeclarationList(this);
    }

    public PCstDeclaration GetCstDeclaration ()
    {
        return _cst_declaration_;
    }

    public void SetCstDeclaration (PCstDeclaration node)
    {
        if(_cst_declaration_ != null)
        {
            _cst_declaration_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_declaration_ = node;
    }
    public IList GetEol ()
    {
        return _eol_;
    }

    public void setEol (IList list)
    {
        _eol_.Clear();
        _eol_.AddAll(list);
    }
    public PCstDeclarationList GetCstDeclarationList ()
    {
        return _cst_declaration_list_;
    }

    public void SetCstDeclarationList (PCstDeclarationList node)
    {
        if(_cst_declaration_list_ != null)
        {
            _cst_declaration_list_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_declaration_list_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_cst_declaration_)
            + ToString (_eol_)
            + ToString (_cst_declaration_list_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _cst_declaration_ == child )
        {
            _cst_declaration_ = null;
            return;
        }
        if ( _eol_.Contains(child) )
        {
            _eol_.Remove(child);
            return;
        }
        if ( _cst_declaration_list_ == child )
        {
            _cst_declaration_list_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _cst_declaration_ == oldChild )
        {
            SetCstDeclaration ((PCstDeclaration) newChild);
            return;
        }
        for ( int i = 0; i < _eol_.Count; i++ )
        {
            Node n = (Node)_eol_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _eol_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _eol_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _cst_declaration_list_ == oldChild )
        {
            SetCstDeclarationList ((PCstDeclarationList) newChild);
            return;
        }
    }

    private class Eol_Cast : Cast
    {
        AListCstDeclarationList obj;

        internal Eol_Cast (AListCstDeclarationList obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            TEol node = (TEol) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            TEol node = (TEol) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class ACstDeclarationList : PCstDeclarationList
{
    private PCstDeclaration _cst_declaration_;

    public ACstDeclarationList ()
    {
    }

    public ACstDeclarationList (
            PCstDeclaration _cst_declaration_
    )
    {
        SetCstDeclaration (_cst_declaration_);
    }

    public override Object Clone()
    {
        return new ACstDeclarationList (
            (PCstDeclaration)CloneNode (_cst_declaration_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACstDeclarationList(this);
    }

    public PCstDeclaration GetCstDeclaration ()
    {
        return _cst_declaration_;
    }

    public void SetCstDeclaration (PCstDeclaration node)
    {
        if(_cst_declaration_ != null)
        {
            _cst_declaration_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_declaration_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_cst_declaration_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _cst_declaration_ == child )
        {
            _cst_declaration_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _cst_declaration_ == oldChild )
        {
            SetCstDeclaration ((PCstDeclaration) newChild);
            return;
        }
    }

}
public sealed class AVariableCstDeclaration : PCstDeclaration
{
    private PCstVariableDeclaration _cst_variable_declaration_;

    public AVariableCstDeclaration ()
    {
    }

    public AVariableCstDeclaration (
            PCstVariableDeclaration _cst_variable_declaration_
    )
    {
        SetCstVariableDeclaration (_cst_variable_declaration_);
    }

    public override Object Clone()
    {
        return new AVariableCstDeclaration (
            (PCstVariableDeclaration)CloneNode (_cst_variable_declaration_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVariableCstDeclaration(this);
    }

    public PCstVariableDeclaration GetCstVariableDeclaration ()
    {
        return _cst_variable_declaration_;
    }

    public void SetCstVariableDeclaration (PCstVariableDeclaration node)
    {
        if(_cst_variable_declaration_ != null)
        {
            _cst_variable_declaration_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_variable_declaration_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_cst_variable_declaration_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _cst_variable_declaration_ == child )
        {
            _cst_variable_declaration_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _cst_variable_declaration_ == oldChild )
        {
            SetCstVariableDeclaration ((PCstVariableDeclaration) newChild);
            return;
        }
    }

}
public sealed class AFunctionCstDeclaration : PCstDeclaration
{
    private PCstFunctionDeclaration _cst_function_declaration_;

    public AFunctionCstDeclaration ()
    {
    }

    public AFunctionCstDeclaration (
            PCstFunctionDeclaration _cst_function_declaration_
    )
    {
        SetCstFunctionDeclaration (_cst_function_declaration_);
    }

    public override Object Clone()
    {
        return new AFunctionCstDeclaration (
            (PCstFunctionDeclaration)CloneNode (_cst_function_declaration_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFunctionCstDeclaration(this);
    }

    public PCstFunctionDeclaration GetCstFunctionDeclaration ()
    {
        return _cst_function_declaration_;
    }

    public void SetCstFunctionDeclaration (PCstFunctionDeclaration node)
    {
        if(_cst_function_declaration_ != null)
        {
            _cst_function_declaration_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_function_declaration_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_cst_function_declaration_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _cst_function_declaration_ == child )
        {
            _cst_function_declaration_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _cst_function_declaration_ == oldChild )
        {
            SetCstFunctionDeclaration ((PCstFunctionDeclaration) newChild);
            return;
        }
    }

}
public sealed class AInitialisedCstVariableDeclaration : PCstVariableDeclaration
{
    private TConst _const_;
    private PCstTypes _cst_types_;
    private TIdentifier _identifier_;
    private TAssignmentOp _assignment_op_;
    private PCstExpression _cst_expression_;

    public AInitialisedCstVariableDeclaration ()
    {
    }

    public AInitialisedCstVariableDeclaration (
            TConst _const_,
            PCstTypes _cst_types_,
            TIdentifier _identifier_,
            TAssignmentOp _assignment_op_,
            PCstExpression _cst_expression_
    )
    {
        SetConst (_const_);
        SetCstTypes (_cst_types_);
        SetIdentifier (_identifier_);
        SetAssignmentOp (_assignment_op_);
        SetCstExpression (_cst_expression_);
    }

    public override Object Clone()
    {
        return new AInitialisedCstVariableDeclaration (
            (TConst)CloneNode (_const_),
            (PCstTypes)CloneNode (_cst_types_),
            (TIdentifier)CloneNode (_identifier_),
            (TAssignmentOp)CloneNode (_assignment_op_),
            (PCstExpression)CloneNode (_cst_expression_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAInitialisedCstVariableDeclaration(this);
    }

    public TConst GetConst ()
    {
        return _const_;
    }

    public void SetConst (TConst node)
    {
        if(_const_ != null)
        {
            _const_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _const_ = node;
    }
    public PCstTypes GetCstTypes ()
    {
        return _cst_types_;
    }

    public void SetCstTypes (PCstTypes node)
    {
        if(_cst_types_ != null)
        {
            _cst_types_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_types_ = node;
    }
    public TIdentifier GetIdentifier ()
    {
        return _identifier_;
    }

    public void SetIdentifier (TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _identifier_ = node;
    }
    public TAssignmentOp GetAssignmentOp ()
    {
        return _assignment_op_;
    }

    public void SetAssignmentOp (TAssignmentOp node)
    {
        if(_assignment_op_ != null)
        {
            _assignment_op_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assignment_op_ = node;
    }
    public PCstExpression GetCstExpression ()
    {
        return _cst_expression_;
    }

    public void SetCstExpression (PCstExpression node)
    {
        if(_cst_expression_ != null)
        {
            _cst_expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_expression_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_const_)
            + ToString (_cst_types_)
            + ToString (_identifier_)
            + ToString (_assignment_op_)
            + ToString (_cst_expression_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _const_ == child )
        {
            _const_ = null;
            return;
        }
        if ( _cst_types_ == child )
        {
            _cst_types_ = null;
            return;
        }
        if ( _identifier_ == child )
        {
            _identifier_ = null;
            return;
        }
        if ( _assignment_op_ == child )
        {
            _assignment_op_ = null;
            return;
        }
        if ( _cst_expression_ == child )
        {
            _cst_expression_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _const_ == oldChild )
        {
            SetConst ((TConst) newChild);
            return;
        }
        if ( _cst_types_ == oldChild )
        {
            SetCstTypes ((PCstTypes) newChild);
            return;
        }
        if ( _identifier_ == oldChild )
        {
            SetIdentifier ((TIdentifier) newChild);
            return;
        }
        if ( _assignment_op_ == oldChild )
        {
            SetAssignmentOp ((TAssignmentOp) newChild);
            return;
        }
        if ( _cst_expression_ == oldChild )
        {
            SetCstExpression ((PCstExpression) newChild);
            return;
        }
    }

}
public sealed class ACstVariableDeclaration : PCstVariableDeclaration
{
    private PCstUninitialisedVariable _cst_uninitialised_variable_;

    public ACstVariableDeclaration ()
    {
    }

    public ACstVariableDeclaration (
            PCstUninitialisedVariable _cst_uninitialised_variable_
    )
    {
        SetCstUninitialisedVariable (_cst_uninitialised_variable_);
    }

    public override Object Clone()
    {
        return new ACstVariableDeclaration (
            (PCstUninitialisedVariable)CloneNode (_cst_uninitialised_variable_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACstVariableDeclaration(this);
    }

    public PCstUninitialisedVariable GetCstUninitialisedVariable ()
    {
        return _cst_uninitialised_variable_;
    }

    public void SetCstUninitialisedVariable (PCstUninitialisedVariable node)
    {
        if(_cst_uninitialised_variable_ != null)
        {
            _cst_uninitialised_variable_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_uninitialised_variable_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_cst_uninitialised_variable_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _cst_uninitialised_variable_ == child )
        {
            _cst_uninitialised_variable_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _cst_uninitialised_variable_ == oldChild )
        {
            SetCstUninitialisedVariable ((PCstUninitialisedVariable) newChild);
            return;
        }
    }

}
public sealed class ACstUninitialisedVariable : PCstUninitialisedVariable
{
    private TConst _const_;
    private PCstTypes _cst_types_;
    private TIdentifier _identifier_;

    public ACstUninitialisedVariable ()
    {
    }

    public ACstUninitialisedVariable (
            TConst _const_,
            PCstTypes _cst_types_,
            TIdentifier _identifier_
    )
    {
        SetConst (_const_);
        SetCstTypes (_cst_types_);
        SetIdentifier (_identifier_);
    }

    public override Object Clone()
    {
        return new ACstUninitialisedVariable (
            (TConst)CloneNode (_const_),
            (PCstTypes)CloneNode (_cst_types_),
            (TIdentifier)CloneNode (_identifier_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACstUninitialisedVariable(this);
    }

    public TConst GetConst ()
    {
        return _const_;
    }

    public void SetConst (TConst node)
    {
        if(_const_ != null)
        {
            _const_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _const_ = node;
    }
    public PCstTypes GetCstTypes ()
    {
        return _cst_types_;
    }

    public void SetCstTypes (PCstTypes node)
    {
        if(_cst_types_ != null)
        {
            _cst_types_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_types_ = node;
    }
    public TIdentifier GetIdentifier ()
    {
        return _identifier_;
    }

    public void SetIdentifier (TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _identifier_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_const_)
            + ToString (_cst_types_)
            + ToString (_identifier_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _const_ == child )
        {
            _const_ = null;
            return;
        }
        if ( _cst_types_ == child )
        {
            _cst_types_ = null;
            return;
        }
        if ( _identifier_ == child )
        {
            _identifier_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _const_ == oldChild )
        {
            SetConst ((TConst) newChild);
            return;
        }
        if ( _cst_types_ == oldChild )
        {
            SetCstTypes ((PCstTypes) newChild);
            return;
        }
        if ( _identifier_ == oldChild )
        {
            SetIdentifier ((TIdentifier) newChild);
            return;
        }
    }

}
public sealed class AIntegerCstTypes : PCstTypes
{
    private TInt _int_;

    public AIntegerCstTypes ()
    {
    }

    public AIntegerCstTypes (
            TInt _int_
    )
    {
        SetInt (_int_);
    }

    public override Object Clone()
    {
        return new AIntegerCstTypes (
            (TInt)CloneNode (_int_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIntegerCstTypes(this);
    }

    public TInt GetInt ()
    {
        return _int_;
    }

    public void SetInt (TInt node)
    {
        if(_int_ != null)
        {
            _int_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _int_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_int_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _int_ == child )
        {
            _int_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _int_ == oldChild )
        {
            SetInt ((TInt) newChild);
            return;
        }
    }

}
public sealed class AFloatingpointCstTypes : PCstTypes
{
    private TFloat _float_;

    public AFloatingpointCstTypes ()
    {
    }

    public AFloatingpointCstTypes (
            TFloat _float_
    )
    {
        SetFloat (_float_);
    }

    public override Object Clone()
    {
        return new AFloatingpointCstTypes (
            (TFloat)CloneNode (_float_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFloatingpointCstTypes(this);
    }

    public TFloat GetFloat ()
    {
        return _float_;
    }

    public void SetFloat (TFloat node)
    {
        if(_float_ != null)
        {
            _float_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _float_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_float_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _float_ == child )
        {
            _float_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _float_ == oldChild )
        {
            SetFloat ((TFloat) newChild);
            return;
        }
    }

}
public sealed class ABoolCstTypes : PCstTypes
{
    private TBool _bool_;

    public ABoolCstTypes ()
    {
    }

    public ABoolCstTypes (
            TBool _bool_
    )
    {
        SetBool (_bool_);
    }

    public override Object Clone()
    {
        return new ABoolCstTypes (
            (TBool)CloneNode (_bool_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABoolCstTypes(this);
    }

    public TBool GetBool ()
    {
        return _bool_;
    }

    public void SetBool (TBool node)
    {
        if(_bool_ != null)
        {
            _bool_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _bool_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_bool_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _bool_ == child )
        {
            _bool_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _bool_ == oldChild )
        {
            SetBool ((TBool) newChild);
            return;
        }
    }

}
public sealed class AVectorCstTypes : PCstTypes
{
    private TVector _vector_;

    public AVectorCstTypes ()
    {
    }

    public AVectorCstTypes (
            TVector _vector_
    )
    {
        SetVector (_vector_);
    }

    public override Object Clone()
    {
        return new AVectorCstTypes (
            (TVector)CloneNode (_vector_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVectorCstTypes(this);
    }

    public TVector GetVector ()
    {
        return _vector_;
    }

    public void SetVector (TVector node)
    {
        if(_vector_ != null)
        {
            _vector_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _vector_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_vector_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _vector_ == child )
        {
            _vector_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _vector_ == oldChild )
        {
            SetVector ((TVector) newChild);
            return;
        }
    }

}
public sealed class ACstVectorValues : PCstVectorValues
{
    private TLPar _l_par_;
    private PCstExpression _a_;
    private TComma _q_;
    private PCstExpression _b_;
    private TComma _w_;
    private PCstExpression _c_;
    private TRPar _r_par_;

    public ACstVectorValues ()
    {
    }

    public ACstVectorValues (
            TLPar _l_par_,
            PCstExpression _a_,
            TComma _q_,
            PCstExpression _b_,
            TComma _w_,
            PCstExpression _c_,
            TRPar _r_par_
    )
    {
        SetLPar (_l_par_);
        SetA (_a_);
        SetQ (_q_);
        SetB (_b_);
        SetW (_w_);
        SetC (_c_);
        SetRPar (_r_par_);
    }

    public override Object Clone()
    {
        return new ACstVectorValues (
            (TLPar)CloneNode (_l_par_),
            (PCstExpression)CloneNode (_a_),
            (TComma)CloneNode (_q_),
            (PCstExpression)CloneNode (_b_),
            (TComma)CloneNode (_w_),
            (PCstExpression)CloneNode (_c_),
            (TRPar)CloneNode (_r_par_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACstVectorValues(this);
    }

    public TLPar GetLPar ()
    {
        return _l_par_;
    }

    public void SetLPar (TLPar node)
    {
        if(_l_par_ != null)
        {
            _l_par_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_par_ = node;
    }
    public PCstExpression GetA ()
    {
        return _a_;
    }

    public void SetA (PCstExpression node)
    {
        if(_a_ != null)
        {
            _a_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _a_ = node;
    }
    public TComma GetQ ()
    {
        return _q_;
    }

    public void SetQ (TComma node)
    {
        if(_q_ != null)
        {
            _q_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _q_ = node;
    }
    public PCstExpression GetB ()
    {
        return _b_;
    }

    public void SetB (PCstExpression node)
    {
        if(_b_ != null)
        {
            _b_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _b_ = node;
    }
    public TComma GetW ()
    {
        return _w_;
    }

    public void SetW (TComma node)
    {
        if(_w_ != null)
        {
            _w_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _w_ = node;
    }
    public PCstExpression GetC ()
    {
        return _c_;
    }

    public void SetC (PCstExpression node)
    {
        if(_c_ != null)
        {
            _c_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _c_ = node;
    }
    public TRPar GetRPar ()
    {
        return _r_par_;
    }

    public void SetRPar (TRPar node)
    {
        if(_r_par_ != null)
        {
            _r_par_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_par_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_l_par_)
            + ToString (_a_)
            + ToString (_q_)
            + ToString (_b_)
            + ToString (_w_)
            + ToString (_c_)
            + ToString (_r_par_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _l_par_ == child )
        {
            _l_par_ = null;
            return;
        }
        if ( _a_ == child )
        {
            _a_ = null;
            return;
        }
        if ( _q_ == child )
        {
            _q_ = null;
            return;
        }
        if ( _b_ == child )
        {
            _b_ = null;
            return;
        }
        if ( _w_ == child )
        {
            _w_ = null;
            return;
        }
        if ( _c_ == child )
        {
            _c_ = null;
            return;
        }
        if ( _r_par_ == child )
        {
            _r_par_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _l_par_ == oldChild )
        {
            SetLPar ((TLPar) newChild);
            return;
        }
        if ( _a_ == oldChild )
        {
            SetA ((PCstExpression) newChild);
            return;
        }
        if ( _q_ == oldChild )
        {
            SetQ ((TComma) newChild);
            return;
        }
        if ( _b_ == oldChild )
        {
            SetB ((PCstExpression) newChild);
            return;
        }
        if ( _w_ == oldChild )
        {
            SetW ((TComma) newChild);
            return;
        }
        if ( _c_ == oldChild )
        {
            SetC ((PCstExpression) newChild);
            return;
        }
        if ( _r_par_ == oldChild )
        {
            SetRPar ((TRPar) newChild);
            return;
        }
    }

}
public sealed class ANotvoidCstFunctionDeclaration : PCstFunctionDeclaration
{
    private PCstTypes _cst_types_;
    private TIdentifier _identifier_;
    private TLPar _l_par_;
    private PCstFormalParamList _cst_formal_param_list_;
    private TRPar _r_par_;
    private TEol _eol_;
    private PCstBlock _cst_block_;

    public ANotvoidCstFunctionDeclaration ()
    {
    }

    public ANotvoidCstFunctionDeclaration (
            PCstTypes _cst_types_,
            TIdentifier _identifier_,
            TLPar _l_par_,
            PCstFormalParamList _cst_formal_param_list_,
            TRPar _r_par_,
            TEol _eol_,
            PCstBlock _cst_block_
    )
    {
        SetCstTypes (_cst_types_);
        SetIdentifier (_identifier_);
        SetLPar (_l_par_);
        SetCstFormalParamList (_cst_formal_param_list_);
        SetRPar (_r_par_);
        SetEol (_eol_);
        SetCstBlock (_cst_block_);
    }

    public override Object Clone()
    {
        return new ANotvoidCstFunctionDeclaration (
            (PCstTypes)CloneNode (_cst_types_),
            (TIdentifier)CloneNode (_identifier_),
            (TLPar)CloneNode (_l_par_),
            (PCstFormalParamList)CloneNode (_cst_formal_param_list_),
            (TRPar)CloneNode (_r_par_),
            (TEol)CloneNode (_eol_),
            (PCstBlock)CloneNode (_cst_block_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANotvoidCstFunctionDeclaration(this);
    }

    public PCstTypes GetCstTypes ()
    {
        return _cst_types_;
    }

    public void SetCstTypes (PCstTypes node)
    {
        if(_cst_types_ != null)
        {
            _cst_types_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_types_ = node;
    }
    public TIdentifier GetIdentifier ()
    {
        return _identifier_;
    }

    public void SetIdentifier (TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _identifier_ = node;
    }
    public TLPar GetLPar ()
    {
        return _l_par_;
    }

    public void SetLPar (TLPar node)
    {
        if(_l_par_ != null)
        {
            _l_par_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_par_ = node;
    }
    public PCstFormalParamList GetCstFormalParamList ()
    {
        return _cst_formal_param_list_;
    }

    public void SetCstFormalParamList (PCstFormalParamList node)
    {
        if(_cst_formal_param_list_ != null)
        {
            _cst_formal_param_list_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_formal_param_list_ = node;
    }
    public TRPar GetRPar ()
    {
        return _r_par_;
    }

    public void SetRPar (TRPar node)
    {
        if(_r_par_ != null)
        {
            _r_par_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_par_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }
    public PCstBlock GetCstBlock ()
    {
        return _cst_block_;
    }

    public void SetCstBlock (PCstBlock node)
    {
        if(_cst_block_ != null)
        {
            _cst_block_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_block_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_cst_types_)
            + ToString (_identifier_)
            + ToString (_l_par_)
            + ToString (_cst_formal_param_list_)
            + ToString (_r_par_)
            + ToString (_eol_)
            + ToString (_cst_block_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _cst_types_ == child )
        {
            _cst_types_ = null;
            return;
        }
        if ( _identifier_ == child )
        {
            _identifier_ = null;
            return;
        }
        if ( _l_par_ == child )
        {
            _l_par_ = null;
            return;
        }
        if ( _cst_formal_param_list_ == child )
        {
            _cst_formal_param_list_ = null;
            return;
        }
        if ( _r_par_ == child )
        {
            _r_par_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
        if ( _cst_block_ == child )
        {
            _cst_block_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _cst_types_ == oldChild )
        {
            SetCstTypes ((PCstTypes) newChild);
            return;
        }
        if ( _identifier_ == oldChild )
        {
            SetIdentifier ((TIdentifier) newChild);
            return;
        }
        if ( _l_par_ == oldChild )
        {
            SetLPar ((TLPar) newChild);
            return;
        }
        if ( _cst_formal_param_list_ == oldChild )
        {
            SetCstFormalParamList ((PCstFormalParamList) newChild);
            return;
        }
        if ( _r_par_ == oldChild )
        {
            SetRPar ((TRPar) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
        if ( _cst_block_ == oldChild )
        {
            SetCstBlock ((PCstBlock) newChild);
            return;
        }
    }

}
public sealed class AVoidCstFunctionDeclaration : PCstFunctionDeclaration
{
    private TVoid _void_;
    private TIdentifier _identifier_;
    private TLPar _l_par_;
    private PCstFormalParamList _cst_formal_param_list_;
    private TRPar _r_par_;
    private TEol _eol_;
    private PCstBlock _cst_block_;

    public AVoidCstFunctionDeclaration ()
    {
    }

    public AVoidCstFunctionDeclaration (
            TVoid _void_,
            TIdentifier _identifier_,
            TLPar _l_par_,
            PCstFormalParamList _cst_formal_param_list_,
            TRPar _r_par_,
            TEol _eol_,
            PCstBlock _cst_block_
    )
    {
        SetVoid (_void_);
        SetIdentifier (_identifier_);
        SetLPar (_l_par_);
        SetCstFormalParamList (_cst_formal_param_list_);
        SetRPar (_r_par_);
        SetEol (_eol_);
        SetCstBlock (_cst_block_);
    }

    public override Object Clone()
    {
        return new AVoidCstFunctionDeclaration (
            (TVoid)CloneNode (_void_),
            (TIdentifier)CloneNode (_identifier_),
            (TLPar)CloneNode (_l_par_),
            (PCstFormalParamList)CloneNode (_cst_formal_param_list_),
            (TRPar)CloneNode (_r_par_),
            (TEol)CloneNode (_eol_),
            (PCstBlock)CloneNode (_cst_block_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVoidCstFunctionDeclaration(this);
    }

    public TVoid GetVoid ()
    {
        return _void_;
    }

    public void SetVoid (TVoid node)
    {
        if(_void_ != null)
        {
            _void_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _void_ = node;
    }
    public TIdentifier GetIdentifier ()
    {
        return _identifier_;
    }

    public void SetIdentifier (TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _identifier_ = node;
    }
    public TLPar GetLPar ()
    {
        return _l_par_;
    }

    public void SetLPar (TLPar node)
    {
        if(_l_par_ != null)
        {
            _l_par_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_par_ = node;
    }
    public PCstFormalParamList GetCstFormalParamList ()
    {
        return _cst_formal_param_list_;
    }

    public void SetCstFormalParamList (PCstFormalParamList node)
    {
        if(_cst_formal_param_list_ != null)
        {
            _cst_formal_param_list_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_formal_param_list_ = node;
    }
    public TRPar GetRPar ()
    {
        return _r_par_;
    }

    public void SetRPar (TRPar node)
    {
        if(_r_par_ != null)
        {
            _r_par_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_par_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }
    public PCstBlock GetCstBlock ()
    {
        return _cst_block_;
    }

    public void SetCstBlock (PCstBlock node)
    {
        if(_cst_block_ != null)
        {
            _cst_block_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_block_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_void_)
            + ToString (_identifier_)
            + ToString (_l_par_)
            + ToString (_cst_formal_param_list_)
            + ToString (_r_par_)
            + ToString (_eol_)
            + ToString (_cst_block_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _void_ == child )
        {
            _void_ = null;
            return;
        }
        if ( _identifier_ == child )
        {
            _identifier_ = null;
            return;
        }
        if ( _l_par_ == child )
        {
            _l_par_ = null;
            return;
        }
        if ( _cst_formal_param_list_ == child )
        {
            _cst_formal_param_list_ = null;
            return;
        }
        if ( _r_par_ == child )
        {
            _r_par_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
        if ( _cst_block_ == child )
        {
            _cst_block_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _void_ == oldChild )
        {
            SetVoid ((TVoid) newChild);
            return;
        }
        if ( _identifier_ == oldChild )
        {
            SetIdentifier ((TIdentifier) newChild);
            return;
        }
        if ( _l_par_ == oldChild )
        {
            SetLPar ((TLPar) newChild);
            return;
        }
        if ( _cst_formal_param_list_ == oldChild )
        {
            SetCstFormalParamList ((PCstFormalParamList) newChild);
            return;
        }
        if ( _r_par_ == oldChild )
        {
            SetRPar ((TRPar) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
        if ( _cst_block_ == oldChild )
        {
            SetCstBlock ((PCstBlock) newChild);
            return;
        }
    }

}
public sealed class AListCstFormalParamList : PCstFormalParamList
{
    private PCstUninitialisedVariable _cst_uninitialised_variable_;
    private TComma _comma_;
    private PCstFormalParamList _cst_formal_param_list_;

    public AListCstFormalParamList ()
    {
    }

    public AListCstFormalParamList (
            PCstUninitialisedVariable _cst_uninitialised_variable_,
            TComma _comma_,
            PCstFormalParamList _cst_formal_param_list_
    )
    {
        SetCstUninitialisedVariable (_cst_uninitialised_variable_);
        SetComma (_comma_);
        SetCstFormalParamList (_cst_formal_param_list_);
    }

    public override Object Clone()
    {
        return new AListCstFormalParamList (
            (PCstUninitialisedVariable)CloneNode (_cst_uninitialised_variable_),
            (TComma)CloneNode (_comma_),
            (PCstFormalParamList)CloneNode (_cst_formal_param_list_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAListCstFormalParamList(this);
    }

    public PCstUninitialisedVariable GetCstUninitialisedVariable ()
    {
        return _cst_uninitialised_variable_;
    }

    public void SetCstUninitialisedVariable (PCstUninitialisedVariable node)
    {
        if(_cst_uninitialised_variable_ != null)
        {
            _cst_uninitialised_variable_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_uninitialised_variable_ = node;
    }
    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public PCstFormalParamList GetCstFormalParamList ()
    {
        return _cst_formal_param_list_;
    }

    public void SetCstFormalParamList (PCstFormalParamList node)
    {
        if(_cst_formal_param_list_ != null)
        {
            _cst_formal_param_list_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_formal_param_list_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_cst_uninitialised_variable_)
            + ToString (_comma_)
            + ToString (_cst_formal_param_list_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _cst_uninitialised_variable_ == child )
        {
            _cst_uninitialised_variable_ = null;
            return;
        }
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _cst_formal_param_list_ == child )
        {
            _cst_formal_param_list_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _cst_uninitialised_variable_ == oldChild )
        {
            SetCstUninitialisedVariable ((PCstUninitialisedVariable) newChild);
            return;
        }
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _cst_formal_param_list_ == oldChild )
        {
            SetCstFormalParamList ((PCstFormalParamList) newChild);
            return;
        }
    }

}
public sealed class ACstFormalParamList : PCstFormalParamList
{
    private PCstUninitialisedVariable _cst_uninitialised_variable_;

    public ACstFormalParamList ()
    {
    }

    public ACstFormalParamList (
            PCstUninitialisedVariable _cst_uninitialised_variable_
    )
    {
        SetCstUninitialisedVariable (_cst_uninitialised_variable_);
    }

    public override Object Clone()
    {
        return new ACstFormalParamList (
            (PCstUninitialisedVariable)CloneNode (_cst_uninitialised_variable_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACstFormalParamList(this);
    }

    public PCstUninitialisedVariable GetCstUninitialisedVariable ()
    {
        return _cst_uninitialised_variable_;
    }

    public void SetCstUninitialisedVariable (PCstUninitialisedVariable node)
    {
        if(_cst_uninitialised_variable_ != null)
        {
            _cst_uninitialised_variable_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_uninitialised_variable_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_cst_uninitialised_variable_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _cst_uninitialised_variable_ == child )
        {
            _cst_uninitialised_variable_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _cst_uninitialised_variable_ == oldChild )
        {
            SetCstUninitialisedVariable ((PCstUninitialisedVariable) newChild);
            return;
        }
    }

}
public sealed class ACstBlock : PCstBlock
{
    private TLCur _l_cur_;
    private TEol _eol_;
    private PCstStatementList _cst_statement_list_;
    private TRCur _r_cur_;

    public ACstBlock ()
    {
    }

    public ACstBlock (
            TLCur _l_cur_,
            TEol _eol_,
            PCstStatementList _cst_statement_list_,
            TRCur _r_cur_
    )
    {
        SetLCur (_l_cur_);
        SetEol (_eol_);
        SetCstStatementList (_cst_statement_list_);
        SetRCur (_r_cur_);
    }

    public override Object Clone()
    {
        return new ACstBlock (
            (TLCur)CloneNode (_l_cur_),
            (TEol)CloneNode (_eol_),
            (PCstStatementList)CloneNode (_cst_statement_list_),
            (TRCur)CloneNode (_r_cur_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACstBlock(this);
    }

    public TLCur GetLCur ()
    {
        return _l_cur_;
    }

    public void SetLCur (TLCur node)
    {
        if(_l_cur_ != null)
        {
            _l_cur_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_cur_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }
    public PCstStatementList GetCstStatementList ()
    {
        return _cst_statement_list_;
    }

    public void SetCstStatementList (PCstStatementList node)
    {
        if(_cst_statement_list_ != null)
        {
            _cst_statement_list_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_statement_list_ = node;
    }
    public TRCur GetRCur ()
    {
        return _r_cur_;
    }

    public void SetRCur (TRCur node)
    {
        if(_r_cur_ != null)
        {
            _r_cur_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_cur_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_l_cur_)
            + ToString (_eol_)
            + ToString (_cst_statement_list_)
            + ToString (_r_cur_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _l_cur_ == child )
        {
            _l_cur_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
        if ( _cst_statement_list_ == child )
        {
            _cst_statement_list_ = null;
            return;
        }
        if ( _r_cur_ == child )
        {
            _r_cur_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _l_cur_ == oldChild )
        {
            SetLCur ((TLCur) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
        if ( _cst_statement_list_ == oldChild )
        {
            SetCstStatementList ((PCstStatementList) newChild);
            return;
        }
        if ( _r_cur_ == oldChild )
        {
            SetRCur ((TRCur) newChild);
            return;
        }
    }

}
public sealed class AListCstStatementList : PCstStatementList
{
    private PCstStatement _cst_statement_;
    private TypedList _eol_;
    private PCstStatementList _cst_statement_list_;

    public AListCstStatementList ()
    {
        this._eol_ = new TypedList(new Eol_Cast(this));
    }

    public AListCstStatementList (
            PCstStatement _cst_statement_,
            IList _eol_,
            PCstStatementList _cst_statement_list_
    )
    {
        SetCstStatement (_cst_statement_);
        this._eol_ = new TypedList(new Eol_Cast(this));
        this._eol_.Clear();
        this._eol_.AddAll(_eol_);
        SetCstStatementList (_cst_statement_list_);
    }

    public override Object Clone()
    {
        return new AListCstStatementList (
            (PCstStatement)CloneNode (_cst_statement_),
            CloneList (_eol_),
            (PCstStatementList)CloneNode (_cst_statement_list_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAListCstStatementList(this);
    }

    public PCstStatement GetCstStatement ()
    {
        return _cst_statement_;
    }

    public void SetCstStatement (PCstStatement node)
    {
        if(_cst_statement_ != null)
        {
            _cst_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_statement_ = node;
    }
    public IList GetEol ()
    {
        return _eol_;
    }

    public void setEol (IList list)
    {
        _eol_.Clear();
        _eol_.AddAll(list);
    }
    public PCstStatementList GetCstStatementList ()
    {
        return _cst_statement_list_;
    }

    public void SetCstStatementList (PCstStatementList node)
    {
        if(_cst_statement_list_ != null)
        {
            _cst_statement_list_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_statement_list_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_cst_statement_)
            + ToString (_eol_)
            + ToString (_cst_statement_list_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _cst_statement_ == child )
        {
            _cst_statement_ = null;
            return;
        }
        if ( _eol_.Contains(child) )
        {
            _eol_.Remove(child);
            return;
        }
        if ( _cst_statement_list_ == child )
        {
            _cst_statement_list_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _cst_statement_ == oldChild )
        {
            SetCstStatement ((PCstStatement) newChild);
            return;
        }
        for ( int i = 0; i < _eol_.Count; i++ )
        {
            Node n = (Node)_eol_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _eol_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _eol_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _cst_statement_list_ == oldChild )
        {
            SetCstStatementList ((PCstStatementList) newChild);
            return;
        }
    }

    private class Eol_Cast : Cast
    {
        AListCstStatementList obj;

        internal Eol_Cast (AListCstStatementList obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            TEol node = (TEol) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            TEol node = (TEol) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class ACstStatementList : PCstStatementList
{
    private PCstStatement _cst_statement_;
    private TypedList _eol_;

    public ACstStatementList ()
    {
        this._eol_ = new TypedList(new Eol_Cast(this));
    }

    public ACstStatementList (
            PCstStatement _cst_statement_,
            IList _eol_
    )
    {
        SetCstStatement (_cst_statement_);
        this._eol_ = new TypedList(new Eol_Cast(this));
        this._eol_.Clear();
        this._eol_.AddAll(_eol_);
    }

    public override Object Clone()
    {
        return new ACstStatementList (
            (PCstStatement)CloneNode (_cst_statement_),
            CloneList (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACstStatementList(this);
    }

    public PCstStatement GetCstStatement ()
    {
        return _cst_statement_;
    }

    public void SetCstStatement (PCstStatement node)
    {
        if(_cst_statement_ != null)
        {
            _cst_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_statement_ = node;
    }
    public IList GetEol ()
    {
        return _eol_;
    }

    public void setEol (IList list)
    {
        _eol_.Clear();
        _eol_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_cst_statement_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _cst_statement_ == child )
        {
            _cst_statement_ = null;
            return;
        }
        if ( _eol_.Contains(child) )
        {
            _eol_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _cst_statement_ == oldChild )
        {
            SetCstStatement ((PCstStatement) newChild);
            return;
        }
        for ( int i = 0; i < _eol_.Count; i++ )
        {
            Node n = (Node)_eol_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _eol_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _eol_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class Eol_Cast : Cast
    {
        ACstStatementList obj;

        internal Eol_Cast (ACstStatementList obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            TEol node = (TEol) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            TEol node = (TEol) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class ADeclCstStatement : PCstStatement
{
    private PCstVariableDeclaration _cst_variable_declaration_;

    public ADeclCstStatement ()
    {
    }

    public ADeclCstStatement (
            PCstVariableDeclaration _cst_variable_declaration_
    )
    {
        SetCstVariableDeclaration (_cst_variable_declaration_);
    }

    public override Object Clone()
    {
        return new ADeclCstStatement (
            (PCstVariableDeclaration)CloneNode (_cst_variable_declaration_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeclCstStatement(this);
    }

    public PCstVariableDeclaration GetCstVariableDeclaration ()
    {
        return _cst_variable_declaration_;
    }

    public void SetCstVariableDeclaration (PCstVariableDeclaration node)
    {
        if(_cst_variable_declaration_ != null)
        {
            _cst_variable_declaration_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_variable_declaration_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_cst_variable_declaration_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _cst_variable_declaration_ == child )
        {
            _cst_variable_declaration_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _cst_variable_declaration_ == oldChild )
        {
            SetCstVariableDeclaration ((PCstVariableDeclaration) newChild);
            return;
        }
    }

}
public sealed class AIfCstStatement : PCstStatement
{
    private PCstIfStatement _cst_if_statement_;

    public AIfCstStatement ()
    {
    }

    public AIfCstStatement (
            PCstIfStatement _cst_if_statement_
    )
    {
        SetCstIfStatement (_cst_if_statement_);
    }

    public override Object Clone()
    {
        return new AIfCstStatement (
            (PCstIfStatement)CloneNode (_cst_if_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIfCstStatement(this);
    }

    public PCstIfStatement GetCstIfStatement ()
    {
        return _cst_if_statement_;
    }

    public void SetCstIfStatement (PCstIfStatement node)
    {
        if(_cst_if_statement_ != null)
        {
            _cst_if_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_if_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_cst_if_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _cst_if_statement_ == child )
        {
            _cst_if_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _cst_if_statement_ == oldChild )
        {
            SetCstIfStatement ((PCstIfStatement) newChild);
            return;
        }
    }

}
public sealed class ARepeatCstStatement : PCstStatement
{
    private PCstRepeatStatement _cst_repeat_statement_;

    public ARepeatCstStatement ()
    {
    }

    public ARepeatCstStatement (
            PCstRepeatStatement _cst_repeat_statement_
    )
    {
        SetCstRepeatStatement (_cst_repeat_statement_);
    }

    public override Object Clone()
    {
        return new ARepeatCstStatement (
            (PCstRepeatStatement)CloneNode (_cst_repeat_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseARepeatCstStatement(this);
    }

    public PCstRepeatStatement GetCstRepeatStatement ()
    {
        return _cst_repeat_statement_;
    }

    public void SetCstRepeatStatement (PCstRepeatStatement node)
    {
        if(_cst_repeat_statement_ != null)
        {
            _cst_repeat_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_repeat_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_cst_repeat_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _cst_repeat_statement_ == child )
        {
            _cst_repeat_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _cst_repeat_statement_ == oldChild )
        {
            SetCstRepeatStatement ((PCstRepeatStatement) newChild);
            return;
        }
    }

}
public sealed class AWhileCstStatement : PCstStatement
{
    private PCstWhileStatement _cst_while_statement_;

    public AWhileCstStatement ()
    {
    }

    public AWhileCstStatement (
            PCstWhileStatement _cst_while_statement_
    )
    {
        SetCstWhileStatement (_cst_while_statement_);
    }

    public override Object Clone()
    {
        return new AWhileCstStatement (
            (PCstWhileStatement)CloneNode (_cst_while_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAWhileCstStatement(this);
    }

    public PCstWhileStatement GetCstWhileStatement ()
    {
        return _cst_while_statement_;
    }

    public void SetCstWhileStatement (PCstWhileStatement node)
    {
        if(_cst_while_statement_ != null)
        {
            _cst_while_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_while_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_cst_while_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _cst_while_statement_ == child )
        {
            _cst_while_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _cst_while_statement_ == oldChild )
        {
            SetCstWhileStatement ((PCstWhileStatement) newChild);
            return;
        }
    }

}
public sealed class AGcodeCstStatement : PCstStatement
{
    private PCstGcodeLiteral _cst_gcode_literal_;

    public AGcodeCstStatement ()
    {
    }

    public AGcodeCstStatement (
            PCstGcodeLiteral _cst_gcode_literal_
    )
    {
        SetCstGcodeLiteral (_cst_gcode_literal_);
    }

    public override Object Clone()
    {
        return new AGcodeCstStatement (
            (PCstGcodeLiteral)CloneNode (_cst_gcode_literal_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGcodeCstStatement(this);
    }

    public PCstGcodeLiteral GetCstGcodeLiteral ()
    {
        return _cst_gcode_literal_;
    }

    public void SetCstGcodeLiteral (PCstGcodeLiteral node)
    {
        if(_cst_gcode_literal_ != null)
        {
            _cst_gcode_literal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_gcode_literal_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_cst_gcode_literal_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _cst_gcode_literal_ == child )
        {
            _cst_gcode_literal_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _cst_gcode_literal_ == oldChild )
        {
            SetCstGcodeLiteral ((PCstGcodeLiteral) newChild);
            return;
        }
    }

}
public sealed class AAssignmentCstStatement : PCstStatement
{
    private PCstAssignments _cst_assignments_;

    public AAssignmentCstStatement ()
    {
    }

    public AAssignmentCstStatement (
            PCstAssignments _cst_assignments_
    )
    {
        SetCstAssignments (_cst_assignments_);
    }

    public override Object Clone()
    {
        return new AAssignmentCstStatement (
            (PCstAssignments)CloneNode (_cst_assignments_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignmentCstStatement(this);
    }

    public PCstAssignments GetCstAssignments ()
    {
        return _cst_assignments_;
    }

    public void SetCstAssignments (PCstAssignments node)
    {
        if(_cst_assignments_ != null)
        {
            _cst_assignments_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_assignments_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_cst_assignments_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _cst_assignments_ == child )
        {
            _cst_assignments_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _cst_assignments_ == oldChild )
        {
            SetCstAssignments ((PCstAssignments) newChild);
            return;
        }
    }

}
public sealed class AFunctionCstStatement : PCstStatement
{
    private PCstFunctionCall _cst_function_call_;

    public AFunctionCstStatement ()
    {
    }

    public AFunctionCstStatement (
            PCstFunctionCall _cst_function_call_
    )
    {
        SetCstFunctionCall (_cst_function_call_);
    }

    public override Object Clone()
    {
        return new AFunctionCstStatement (
            (PCstFunctionCall)CloneNode (_cst_function_call_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFunctionCstStatement(this);
    }

    public PCstFunctionCall GetCstFunctionCall ()
    {
        return _cst_function_call_;
    }

    public void SetCstFunctionCall (PCstFunctionCall node)
    {
        if(_cst_function_call_ != null)
        {
            _cst_function_call_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_function_call_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_cst_function_call_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _cst_function_call_ == child )
        {
            _cst_function_call_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _cst_function_call_ == oldChild )
        {
            SetCstFunctionCall ((PCstFunctionCall) newChild);
            return;
        }
    }

}
public sealed class AReturnCstStatement : PCstStatement
{
    private TReturn _return_;
    private PCstExpression _cst_expression_;

    public AReturnCstStatement ()
    {
    }

    public AReturnCstStatement (
            TReturn _return_,
            PCstExpression _cst_expression_
    )
    {
        SetReturn (_return_);
        SetCstExpression (_cst_expression_);
    }

    public override Object Clone()
    {
        return new AReturnCstStatement (
            (TReturn)CloneNode (_return_),
            (PCstExpression)CloneNode (_cst_expression_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAReturnCstStatement(this);
    }

    public TReturn GetReturn ()
    {
        return _return_;
    }

    public void SetReturn (TReturn node)
    {
        if(_return_ != null)
        {
            _return_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _return_ = node;
    }
    public PCstExpression GetCstExpression ()
    {
        return _cst_expression_;
    }

    public void SetCstExpression (PCstExpression node)
    {
        if(_cst_expression_ != null)
        {
            _cst_expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_expression_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_return_)
            + ToString (_cst_expression_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _return_ == child )
        {
            _return_ = null;
            return;
        }
        if ( _cst_expression_ == child )
        {
            _cst_expression_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _return_ == oldChild )
        {
            SetReturn ((TReturn) newChild);
            return;
        }
        if ( _cst_expression_ == oldChild )
        {
            SetCstExpression ((PCstExpression) newChild);
            return;
        }
    }

}
public sealed class ABuildCstStatement : PCstStatement
{
    private TBuild _build_;
    private TEol _eol_;
    private PCstBlock _cst_block_;

    public ABuildCstStatement ()
    {
    }

    public ABuildCstStatement (
            TBuild _build_,
            TEol _eol_,
            PCstBlock _cst_block_
    )
    {
        SetBuild (_build_);
        SetEol (_eol_);
        SetCstBlock (_cst_block_);
    }

    public override Object Clone()
    {
        return new ABuildCstStatement (
            (TBuild)CloneNode (_build_),
            (TEol)CloneNode (_eol_),
            (PCstBlock)CloneNode (_cst_block_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABuildCstStatement(this);
    }

    public TBuild GetBuild ()
    {
        return _build_;
    }

    public void SetBuild (TBuild node)
    {
        if(_build_ != null)
        {
            _build_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _build_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }
    public PCstBlock GetCstBlock ()
    {
        return _cst_block_;
    }

    public void SetCstBlock (PCstBlock node)
    {
        if(_cst_block_ != null)
        {
            _cst_block_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_block_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_build_)
            + ToString (_eol_)
            + ToString (_cst_block_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _build_ == child )
        {
            _build_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
        if ( _cst_block_ == child )
        {
            _cst_block_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _build_ == oldChild )
        {
            SetBuild ((TBuild) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
        if ( _cst_block_ == oldChild )
        {
            SetCstBlock ((PCstBlock) newChild);
            return;
        }
    }

}
public sealed class AWalkCstStatement : PCstStatement
{
    private TWalk _walk_;
    private TEol _eol_;
    private PCstBlock _cst_block_;

    public AWalkCstStatement ()
    {
    }

    public AWalkCstStatement (
            TWalk _walk_,
            TEol _eol_,
            PCstBlock _cst_block_
    )
    {
        SetWalk (_walk_);
        SetEol (_eol_);
        SetCstBlock (_cst_block_);
    }

    public override Object Clone()
    {
        return new AWalkCstStatement (
            (TWalk)CloneNode (_walk_),
            (TEol)CloneNode (_eol_),
            (PCstBlock)CloneNode (_cst_block_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAWalkCstStatement(this);
    }

    public TWalk GetWalk ()
    {
        return _walk_;
    }

    public void SetWalk (TWalk node)
    {
        if(_walk_ != null)
        {
            _walk_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _walk_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }
    public PCstBlock GetCstBlock ()
    {
        return _cst_block_;
    }

    public void SetCstBlock (PCstBlock node)
    {
        if(_cst_block_ != null)
        {
            _cst_block_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_block_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_walk_)
            + ToString (_eol_)
            + ToString (_cst_block_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _walk_ == child )
        {
            _walk_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
        if ( _cst_block_ == child )
        {
            _cst_block_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _walk_ == oldChild )
        {
            SetWalk ((TWalk) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
        if ( _cst_block_ == oldChild )
        {
            SetCstBlock ((PCstBlock) newChild);
            return;
        }
    }

}
public sealed class ANoelseCstIfStatement : PCstIfStatement
{
    private TIf _if_;
    private TLPar _l_par_;
    private PCstExpression _cst_expression_;
    private TRPar _r_par_;
    private TEol _eol_;
    private PCstBlock _cst_block_;

    public ANoelseCstIfStatement ()
    {
    }

    public ANoelseCstIfStatement (
            TIf _if_,
            TLPar _l_par_,
            PCstExpression _cst_expression_,
            TRPar _r_par_,
            TEol _eol_,
            PCstBlock _cst_block_
    )
    {
        SetIf (_if_);
        SetLPar (_l_par_);
        SetCstExpression (_cst_expression_);
        SetRPar (_r_par_);
        SetEol (_eol_);
        SetCstBlock (_cst_block_);
    }

    public override Object Clone()
    {
        return new ANoelseCstIfStatement (
            (TIf)CloneNode (_if_),
            (TLPar)CloneNode (_l_par_),
            (PCstExpression)CloneNode (_cst_expression_),
            (TRPar)CloneNode (_r_par_),
            (TEol)CloneNode (_eol_),
            (PCstBlock)CloneNode (_cst_block_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoelseCstIfStatement(this);
    }

    public TIf GetIf ()
    {
        return _if_;
    }

    public void SetIf (TIf node)
    {
        if(_if_ != null)
        {
            _if_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_ = node;
    }
    public TLPar GetLPar ()
    {
        return _l_par_;
    }

    public void SetLPar (TLPar node)
    {
        if(_l_par_ != null)
        {
            _l_par_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_par_ = node;
    }
    public PCstExpression GetCstExpression ()
    {
        return _cst_expression_;
    }

    public void SetCstExpression (PCstExpression node)
    {
        if(_cst_expression_ != null)
        {
            _cst_expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_expression_ = node;
    }
    public TRPar GetRPar ()
    {
        return _r_par_;
    }

    public void SetRPar (TRPar node)
    {
        if(_r_par_ != null)
        {
            _r_par_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_par_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }
    public PCstBlock GetCstBlock ()
    {
        return _cst_block_;
    }

    public void SetCstBlock (PCstBlock node)
    {
        if(_cst_block_ != null)
        {
            _cst_block_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_block_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_if_)
            + ToString (_l_par_)
            + ToString (_cst_expression_)
            + ToString (_r_par_)
            + ToString (_eol_)
            + ToString (_cst_block_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _if_ == child )
        {
            _if_ = null;
            return;
        }
        if ( _l_par_ == child )
        {
            _l_par_ = null;
            return;
        }
        if ( _cst_expression_ == child )
        {
            _cst_expression_ = null;
            return;
        }
        if ( _r_par_ == child )
        {
            _r_par_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
        if ( _cst_block_ == child )
        {
            _cst_block_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _if_ == oldChild )
        {
            SetIf ((TIf) newChild);
            return;
        }
        if ( _l_par_ == oldChild )
        {
            SetLPar ((TLPar) newChild);
            return;
        }
        if ( _cst_expression_ == oldChild )
        {
            SetCstExpression ((PCstExpression) newChild);
            return;
        }
        if ( _r_par_ == oldChild )
        {
            SetRPar ((TRPar) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
        if ( _cst_block_ == oldChild )
        {
            SetCstBlock ((PCstBlock) newChild);
            return;
        }
    }

}
public sealed class AWithelseCstIfStatement : PCstIfStatement
{
    private TIf _if_;
    private TLPar _l_par_;
    private PCstExpression _cst_expression_;
    private TRPar _r_par_;
    private TEol _eol_;
    private PCstBlock _a_;
    private TElse _else_;
    private PCstBlock _b_;

    public AWithelseCstIfStatement ()
    {
    }

    public AWithelseCstIfStatement (
            TIf _if_,
            TLPar _l_par_,
            PCstExpression _cst_expression_,
            TRPar _r_par_,
            TEol _eol_,
            PCstBlock _a_,
            TElse _else_,
            PCstBlock _b_
    )
    {
        SetIf (_if_);
        SetLPar (_l_par_);
        SetCstExpression (_cst_expression_);
        SetRPar (_r_par_);
        SetEol (_eol_);
        SetA (_a_);
        SetElse (_else_);
        SetB (_b_);
    }

    public override Object Clone()
    {
        return new AWithelseCstIfStatement (
            (TIf)CloneNode (_if_),
            (TLPar)CloneNode (_l_par_),
            (PCstExpression)CloneNode (_cst_expression_),
            (TRPar)CloneNode (_r_par_),
            (TEol)CloneNode (_eol_),
            (PCstBlock)CloneNode (_a_),
            (TElse)CloneNode (_else_),
            (PCstBlock)CloneNode (_b_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAWithelseCstIfStatement(this);
    }

    public TIf GetIf ()
    {
        return _if_;
    }

    public void SetIf (TIf node)
    {
        if(_if_ != null)
        {
            _if_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_ = node;
    }
    public TLPar GetLPar ()
    {
        return _l_par_;
    }

    public void SetLPar (TLPar node)
    {
        if(_l_par_ != null)
        {
            _l_par_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_par_ = node;
    }
    public PCstExpression GetCstExpression ()
    {
        return _cst_expression_;
    }

    public void SetCstExpression (PCstExpression node)
    {
        if(_cst_expression_ != null)
        {
            _cst_expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_expression_ = node;
    }
    public TRPar GetRPar ()
    {
        return _r_par_;
    }

    public void SetRPar (TRPar node)
    {
        if(_r_par_ != null)
        {
            _r_par_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_par_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }
    public PCstBlock GetA ()
    {
        return _a_;
    }

    public void SetA (PCstBlock node)
    {
        if(_a_ != null)
        {
            _a_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _a_ = node;
    }
    public TElse GetElse ()
    {
        return _else_;
    }

    public void SetElse (TElse node)
    {
        if(_else_ != null)
        {
            _else_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _else_ = node;
    }
    public PCstBlock GetB ()
    {
        return _b_;
    }

    public void SetB (PCstBlock node)
    {
        if(_b_ != null)
        {
            _b_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _b_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_if_)
            + ToString (_l_par_)
            + ToString (_cst_expression_)
            + ToString (_r_par_)
            + ToString (_eol_)
            + ToString (_a_)
            + ToString (_else_)
            + ToString (_b_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _if_ == child )
        {
            _if_ = null;
            return;
        }
        if ( _l_par_ == child )
        {
            _l_par_ = null;
            return;
        }
        if ( _cst_expression_ == child )
        {
            _cst_expression_ = null;
            return;
        }
        if ( _r_par_ == child )
        {
            _r_par_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
        if ( _a_ == child )
        {
            _a_ = null;
            return;
        }
        if ( _else_ == child )
        {
            _else_ = null;
            return;
        }
        if ( _b_ == child )
        {
            _b_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _if_ == oldChild )
        {
            SetIf ((TIf) newChild);
            return;
        }
        if ( _l_par_ == oldChild )
        {
            SetLPar ((TLPar) newChild);
            return;
        }
        if ( _cst_expression_ == oldChild )
        {
            SetCstExpression ((PCstExpression) newChild);
            return;
        }
        if ( _r_par_ == oldChild )
        {
            SetRPar ((TRPar) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
        if ( _a_ == oldChild )
        {
            SetA ((PCstBlock) newChild);
            return;
        }
        if ( _else_ == oldChild )
        {
            SetElse ((TElse) newChild);
            return;
        }
        if ( _b_ == oldChild )
        {
            SetB ((PCstBlock) newChild);
            return;
        }
    }

}
public sealed class ACstRepeatStatement : PCstRepeatStatement
{
    private TRepeat _repeat_;
    private TLPar _l_par_;
    private PCstExpression _cst_expression_;
    private TRPar _r_par_;
    private TEol _eol_;
    private PCstBlock _cst_block_;

    public ACstRepeatStatement ()
    {
    }

    public ACstRepeatStatement (
            TRepeat _repeat_,
            TLPar _l_par_,
            PCstExpression _cst_expression_,
            TRPar _r_par_,
            TEol _eol_,
            PCstBlock _cst_block_
    )
    {
        SetRepeat (_repeat_);
        SetLPar (_l_par_);
        SetCstExpression (_cst_expression_);
        SetRPar (_r_par_);
        SetEol (_eol_);
        SetCstBlock (_cst_block_);
    }

    public override Object Clone()
    {
        return new ACstRepeatStatement (
            (TRepeat)CloneNode (_repeat_),
            (TLPar)CloneNode (_l_par_),
            (PCstExpression)CloneNode (_cst_expression_),
            (TRPar)CloneNode (_r_par_),
            (TEol)CloneNode (_eol_),
            (PCstBlock)CloneNode (_cst_block_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACstRepeatStatement(this);
    }

    public TRepeat GetRepeat ()
    {
        return _repeat_;
    }

    public void SetRepeat (TRepeat node)
    {
        if(_repeat_ != null)
        {
            _repeat_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _repeat_ = node;
    }
    public TLPar GetLPar ()
    {
        return _l_par_;
    }

    public void SetLPar (TLPar node)
    {
        if(_l_par_ != null)
        {
            _l_par_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_par_ = node;
    }
    public PCstExpression GetCstExpression ()
    {
        return _cst_expression_;
    }

    public void SetCstExpression (PCstExpression node)
    {
        if(_cst_expression_ != null)
        {
            _cst_expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_expression_ = node;
    }
    public TRPar GetRPar ()
    {
        return _r_par_;
    }

    public void SetRPar (TRPar node)
    {
        if(_r_par_ != null)
        {
            _r_par_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_par_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }
    public PCstBlock GetCstBlock ()
    {
        return _cst_block_;
    }

    public void SetCstBlock (PCstBlock node)
    {
        if(_cst_block_ != null)
        {
            _cst_block_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_block_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_repeat_)
            + ToString (_l_par_)
            + ToString (_cst_expression_)
            + ToString (_r_par_)
            + ToString (_eol_)
            + ToString (_cst_block_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _repeat_ == child )
        {
            _repeat_ = null;
            return;
        }
        if ( _l_par_ == child )
        {
            _l_par_ = null;
            return;
        }
        if ( _cst_expression_ == child )
        {
            _cst_expression_ = null;
            return;
        }
        if ( _r_par_ == child )
        {
            _r_par_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
        if ( _cst_block_ == child )
        {
            _cst_block_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _repeat_ == oldChild )
        {
            SetRepeat ((TRepeat) newChild);
            return;
        }
        if ( _l_par_ == oldChild )
        {
            SetLPar ((TLPar) newChild);
            return;
        }
        if ( _cst_expression_ == oldChild )
        {
            SetCstExpression ((PCstExpression) newChild);
            return;
        }
        if ( _r_par_ == oldChild )
        {
            SetRPar ((TRPar) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
        if ( _cst_block_ == oldChild )
        {
            SetCstBlock ((PCstBlock) newChild);
            return;
        }
    }

}
public sealed class ACstWhileStatement : PCstWhileStatement
{
    private TWhile _while_;
    private TLPar _l_par_;
    private PCstExpression _cst_expression_;
    private TRPar _r_par_;
    private TEol _eol_;
    private PCstBlock _cst_block_;

    public ACstWhileStatement ()
    {
    }

    public ACstWhileStatement (
            TWhile _while_,
            TLPar _l_par_,
            PCstExpression _cst_expression_,
            TRPar _r_par_,
            TEol _eol_,
            PCstBlock _cst_block_
    )
    {
        SetWhile (_while_);
        SetLPar (_l_par_);
        SetCstExpression (_cst_expression_);
        SetRPar (_r_par_);
        SetEol (_eol_);
        SetCstBlock (_cst_block_);
    }

    public override Object Clone()
    {
        return new ACstWhileStatement (
            (TWhile)CloneNode (_while_),
            (TLPar)CloneNode (_l_par_),
            (PCstExpression)CloneNode (_cst_expression_),
            (TRPar)CloneNode (_r_par_),
            (TEol)CloneNode (_eol_),
            (PCstBlock)CloneNode (_cst_block_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACstWhileStatement(this);
    }

    public TWhile GetWhile ()
    {
        return _while_;
    }

    public void SetWhile (TWhile node)
    {
        if(_while_ != null)
        {
            _while_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _while_ = node;
    }
    public TLPar GetLPar ()
    {
        return _l_par_;
    }

    public void SetLPar (TLPar node)
    {
        if(_l_par_ != null)
        {
            _l_par_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_par_ = node;
    }
    public PCstExpression GetCstExpression ()
    {
        return _cst_expression_;
    }

    public void SetCstExpression (PCstExpression node)
    {
        if(_cst_expression_ != null)
        {
            _cst_expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_expression_ = node;
    }
    public TRPar GetRPar ()
    {
        return _r_par_;
    }

    public void SetRPar (TRPar node)
    {
        if(_r_par_ != null)
        {
            _r_par_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_par_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }
    public PCstBlock GetCstBlock ()
    {
        return _cst_block_;
    }

    public void SetCstBlock (PCstBlock node)
    {
        if(_cst_block_ != null)
        {
            _cst_block_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_block_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_while_)
            + ToString (_l_par_)
            + ToString (_cst_expression_)
            + ToString (_r_par_)
            + ToString (_eol_)
            + ToString (_cst_block_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _while_ == child )
        {
            _while_ = null;
            return;
        }
        if ( _l_par_ == child )
        {
            _l_par_ = null;
            return;
        }
        if ( _cst_expression_ == child )
        {
            _cst_expression_ = null;
            return;
        }
        if ( _r_par_ == child )
        {
            _r_par_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
        if ( _cst_block_ == child )
        {
            _cst_block_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _while_ == oldChild )
        {
            SetWhile ((TWhile) newChild);
            return;
        }
        if ( _l_par_ == oldChild )
        {
            SetLPar ((TLPar) newChild);
            return;
        }
        if ( _cst_expression_ == oldChild )
        {
            SetCstExpression ((PCstExpression) newChild);
            return;
        }
        if ( _r_par_ == oldChild )
        {
            SetRPar ((TRPar) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
        if ( _cst_block_ == oldChild )
        {
            SetCstBlock ((PCstBlock) newChild);
            return;
        }
    }

}
public sealed class ACstGcodeLiteral : PCstGcodeLiteral
{
    private TGcode _gcode_;
    private TLCur _l_cur_;
    private TAllCharsExceptCurly _all_chars_except_curly_;
    private TRCur _r_cur_;

    public ACstGcodeLiteral ()
    {
    }

    public ACstGcodeLiteral (
            TGcode _gcode_,
            TLCur _l_cur_,
            TAllCharsExceptCurly _all_chars_except_curly_,
            TRCur _r_cur_
    )
    {
        SetGcode (_gcode_);
        SetLCur (_l_cur_);
        SetAllCharsExceptCurly (_all_chars_except_curly_);
        SetRCur (_r_cur_);
    }

    public override Object Clone()
    {
        return new ACstGcodeLiteral (
            (TGcode)CloneNode (_gcode_),
            (TLCur)CloneNode (_l_cur_),
            (TAllCharsExceptCurly)CloneNode (_all_chars_except_curly_),
            (TRCur)CloneNode (_r_cur_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACstGcodeLiteral(this);
    }

    public TGcode GetGcode ()
    {
        return _gcode_;
    }

    public void SetGcode (TGcode node)
    {
        if(_gcode_ != null)
        {
            _gcode_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _gcode_ = node;
    }
    public TLCur GetLCur ()
    {
        return _l_cur_;
    }

    public void SetLCur (TLCur node)
    {
        if(_l_cur_ != null)
        {
            _l_cur_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_cur_ = node;
    }
    public TAllCharsExceptCurly GetAllCharsExceptCurly ()
    {
        return _all_chars_except_curly_;
    }

    public void SetAllCharsExceptCurly (TAllCharsExceptCurly node)
    {
        if(_all_chars_except_curly_ != null)
        {
            _all_chars_except_curly_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _all_chars_except_curly_ = node;
    }
    public TRCur GetRCur ()
    {
        return _r_cur_;
    }

    public void SetRCur (TRCur node)
    {
        if(_r_cur_ != null)
        {
            _r_cur_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_cur_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_gcode_)
            + ToString (_l_cur_)
            + ToString (_all_chars_except_curly_)
            + ToString (_r_cur_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _gcode_ == child )
        {
            _gcode_ = null;
            return;
        }
        if ( _l_cur_ == child )
        {
            _l_cur_ = null;
            return;
        }
        if ( _all_chars_except_curly_ == child )
        {
            _all_chars_except_curly_ = null;
            return;
        }
        if ( _r_cur_ == child )
        {
            _r_cur_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _gcode_ == oldChild )
        {
            SetGcode ((TGcode) newChild);
            return;
        }
        if ( _l_cur_ == oldChild )
        {
            SetLCur ((TLCur) newChild);
            return;
        }
        if ( _all_chars_except_curly_ == oldChild )
        {
            SetAllCharsExceptCurly ((TAllCharsExceptCurly) newChild);
            return;
        }
        if ( _r_cur_ == oldChild )
        {
            SetRCur ((TRCur) newChild);
            return;
        }
    }

}
public sealed class AAssignCstAssignments : PCstAssignments
{
    private TIdentifier _identifier_;
    private TAssignmentOp _assignment_op_;
    private PCstExpression _cst_expression_;

    public AAssignCstAssignments ()
    {
    }

    public AAssignCstAssignments (
            TIdentifier _identifier_,
            TAssignmentOp _assignment_op_,
            PCstExpression _cst_expression_
    )
    {
        SetIdentifier (_identifier_);
        SetAssignmentOp (_assignment_op_);
        SetCstExpression (_cst_expression_);
    }

    public override Object Clone()
    {
        return new AAssignCstAssignments (
            (TIdentifier)CloneNode (_identifier_),
            (TAssignmentOp)CloneNode (_assignment_op_),
            (PCstExpression)CloneNode (_cst_expression_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignCstAssignments(this);
    }

    public TIdentifier GetIdentifier ()
    {
        return _identifier_;
    }

    public void SetIdentifier (TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _identifier_ = node;
    }
    public TAssignmentOp GetAssignmentOp ()
    {
        return _assignment_op_;
    }

    public void SetAssignmentOp (TAssignmentOp node)
    {
        if(_assignment_op_ != null)
        {
            _assignment_op_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assignment_op_ = node;
    }
    public PCstExpression GetCstExpression ()
    {
        return _cst_expression_;
    }

    public void SetCstExpression (PCstExpression node)
    {
        if(_cst_expression_ != null)
        {
            _cst_expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_expression_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_identifier_)
            + ToString (_assignment_op_)
            + ToString (_cst_expression_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _identifier_ == child )
        {
            _identifier_ = null;
            return;
        }
        if ( _assignment_op_ == child )
        {
            _assignment_op_ = null;
            return;
        }
        if ( _cst_expression_ == child )
        {
            _cst_expression_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _identifier_ == oldChild )
        {
            SetIdentifier ((TIdentifier) newChild);
            return;
        }
        if ( _assignment_op_ == oldChild )
        {
            SetAssignmentOp ((TAssignmentOp) newChild);
            return;
        }
        if ( _cst_expression_ == oldChild )
        {
            SetCstExpression ((PCstExpression) newChild);
            return;
        }
    }

}
public sealed class AAssignPlusCstAssignments : PCstAssignments
{
    private TIdentifier _identifier_;
    private TPlusOp _plus_op_;
    private TAssignmentOp _assignment_op_;
    private PCstExpression _cst_expression_;

    public AAssignPlusCstAssignments ()
    {
    }

    public AAssignPlusCstAssignments (
            TIdentifier _identifier_,
            TPlusOp _plus_op_,
            TAssignmentOp _assignment_op_,
            PCstExpression _cst_expression_
    )
    {
        SetIdentifier (_identifier_);
        SetPlusOp (_plus_op_);
        SetAssignmentOp (_assignment_op_);
        SetCstExpression (_cst_expression_);
    }

    public override Object Clone()
    {
        return new AAssignPlusCstAssignments (
            (TIdentifier)CloneNode (_identifier_),
            (TPlusOp)CloneNode (_plus_op_),
            (TAssignmentOp)CloneNode (_assignment_op_),
            (PCstExpression)CloneNode (_cst_expression_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignPlusCstAssignments(this);
    }

    public TIdentifier GetIdentifier ()
    {
        return _identifier_;
    }

    public void SetIdentifier (TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _identifier_ = node;
    }
    public TPlusOp GetPlusOp ()
    {
        return _plus_op_;
    }

    public void SetPlusOp (TPlusOp node)
    {
        if(_plus_op_ != null)
        {
            _plus_op_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _plus_op_ = node;
    }
    public TAssignmentOp GetAssignmentOp ()
    {
        return _assignment_op_;
    }

    public void SetAssignmentOp (TAssignmentOp node)
    {
        if(_assignment_op_ != null)
        {
            _assignment_op_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assignment_op_ = node;
    }
    public PCstExpression GetCstExpression ()
    {
        return _cst_expression_;
    }

    public void SetCstExpression (PCstExpression node)
    {
        if(_cst_expression_ != null)
        {
            _cst_expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_expression_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_identifier_)
            + ToString (_plus_op_)
            + ToString (_assignment_op_)
            + ToString (_cst_expression_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _identifier_ == child )
        {
            _identifier_ = null;
            return;
        }
        if ( _plus_op_ == child )
        {
            _plus_op_ = null;
            return;
        }
        if ( _assignment_op_ == child )
        {
            _assignment_op_ = null;
            return;
        }
        if ( _cst_expression_ == child )
        {
            _cst_expression_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _identifier_ == oldChild )
        {
            SetIdentifier ((TIdentifier) newChild);
            return;
        }
        if ( _plus_op_ == oldChild )
        {
            SetPlusOp ((TPlusOp) newChild);
            return;
        }
        if ( _assignment_op_ == oldChild )
        {
            SetAssignmentOp ((TAssignmentOp) newChild);
            return;
        }
        if ( _cst_expression_ == oldChild )
        {
            SetCstExpression ((PCstExpression) newChild);
            return;
        }
    }

}
public sealed class AAssignMinusCstAssignments : PCstAssignments
{
    private TIdentifier _identifier_;
    private TMinusOp _minus_op_;
    private TAssignmentOp _assignment_op_;
    private PCstExpression _cst_expression_;

    public AAssignMinusCstAssignments ()
    {
    }

    public AAssignMinusCstAssignments (
            TIdentifier _identifier_,
            TMinusOp _minus_op_,
            TAssignmentOp _assignment_op_,
            PCstExpression _cst_expression_
    )
    {
        SetIdentifier (_identifier_);
        SetMinusOp (_minus_op_);
        SetAssignmentOp (_assignment_op_);
        SetCstExpression (_cst_expression_);
    }

    public override Object Clone()
    {
        return new AAssignMinusCstAssignments (
            (TIdentifier)CloneNode (_identifier_),
            (TMinusOp)CloneNode (_minus_op_),
            (TAssignmentOp)CloneNode (_assignment_op_),
            (PCstExpression)CloneNode (_cst_expression_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignMinusCstAssignments(this);
    }

    public TIdentifier GetIdentifier ()
    {
        return _identifier_;
    }

    public void SetIdentifier (TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _identifier_ = node;
    }
    public TMinusOp GetMinusOp ()
    {
        return _minus_op_;
    }

    public void SetMinusOp (TMinusOp node)
    {
        if(_minus_op_ != null)
        {
            _minus_op_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _minus_op_ = node;
    }
    public TAssignmentOp GetAssignmentOp ()
    {
        return _assignment_op_;
    }

    public void SetAssignmentOp (TAssignmentOp node)
    {
        if(_assignment_op_ != null)
        {
            _assignment_op_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assignment_op_ = node;
    }
    public PCstExpression GetCstExpression ()
    {
        return _cst_expression_;
    }

    public void SetCstExpression (PCstExpression node)
    {
        if(_cst_expression_ != null)
        {
            _cst_expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_expression_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_identifier_)
            + ToString (_minus_op_)
            + ToString (_assignment_op_)
            + ToString (_cst_expression_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _identifier_ == child )
        {
            _identifier_ = null;
            return;
        }
        if ( _minus_op_ == child )
        {
            _minus_op_ = null;
            return;
        }
        if ( _assignment_op_ == child )
        {
            _assignment_op_ = null;
            return;
        }
        if ( _cst_expression_ == child )
        {
            _cst_expression_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _identifier_ == oldChild )
        {
            SetIdentifier ((TIdentifier) newChild);
            return;
        }
        if ( _minus_op_ == oldChild )
        {
            SetMinusOp ((TMinusOp) newChild);
            return;
        }
        if ( _assignment_op_ == oldChild )
        {
            SetAssignmentOp ((TAssignmentOp) newChild);
            return;
        }
        if ( _cst_expression_ == oldChild )
        {
            SetCstExpression ((PCstExpression) newChild);
            return;
        }
    }

}
public sealed class AAssignMultCstAssignments : PCstAssignments
{
    private TIdentifier _identifier_;
    private TMultiplicationOp _multiplication_op_;
    private TAssignmentOp _assignment_op_;
    private PCstExpression _cst_expression_;

    public AAssignMultCstAssignments ()
    {
    }

    public AAssignMultCstAssignments (
            TIdentifier _identifier_,
            TMultiplicationOp _multiplication_op_,
            TAssignmentOp _assignment_op_,
            PCstExpression _cst_expression_
    )
    {
        SetIdentifier (_identifier_);
        SetMultiplicationOp (_multiplication_op_);
        SetAssignmentOp (_assignment_op_);
        SetCstExpression (_cst_expression_);
    }

    public override Object Clone()
    {
        return new AAssignMultCstAssignments (
            (TIdentifier)CloneNode (_identifier_),
            (TMultiplicationOp)CloneNode (_multiplication_op_),
            (TAssignmentOp)CloneNode (_assignment_op_),
            (PCstExpression)CloneNode (_cst_expression_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignMultCstAssignments(this);
    }

    public TIdentifier GetIdentifier ()
    {
        return _identifier_;
    }

    public void SetIdentifier (TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _identifier_ = node;
    }
    public TMultiplicationOp GetMultiplicationOp ()
    {
        return _multiplication_op_;
    }

    public void SetMultiplicationOp (TMultiplicationOp node)
    {
        if(_multiplication_op_ != null)
        {
            _multiplication_op_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _multiplication_op_ = node;
    }
    public TAssignmentOp GetAssignmentOp ()
    {
        return _assignment_op_;
    }

    public void SetAssignmentOp (TAssignmentOp node)
    {
        if(_assignment_op_ != null)
        {
            _assignment_op_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assignment_op_ = node;
    }
    public PCstExpression GetCstExpression ()
    {
        return _cst_expression_;
    }

    public void SetCstExpression (PCstExpression node)
    {
        if(_cst_expression_ != null)
        {
            _cst_expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_expression_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_identifier_)
            + ToString (_multiplication_op_)
            + ToString (_assignment_op_)
            + ToString (_cst_expression_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _identifier_ == child )
        {
            _identifier_ = null;
            return;
        }
        if ( _multiplication_op_ == child )
        {
            _multiplication_op_ = null;
            return;
        }
        if ( _assignment_op_ == child )
        {
            _assignment_op_ = null;
            return;
        }
        if ( _cst_expression_ == child )
        {
            _cst_expression_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _identifier_ == oldChild )
        {
            SetIdentifier ((TIdentifier) newChild);
            return;
        }
        if ( _multiplication_op_ == oldChild )
        {
            SetMultiplicationOp ((TMultiplicationOp) newChild);
            return;
        }
        if ( _assignment_op_ == oldChild )
        {
            SetAssignmentOp ((TAssignmentOp) newChild);
            return;
        }
        if ( _cst_expression_ == oldChild )
        {
            SetCstExpression ((PCstExpression) newChild);
            return;
        }
    }

}
public sealed class AAssignDivisionCstAssignments : PCstAssignments
{
    private TIdentifier _identifier_;
    private TDivisionOp _division_op_;
    private TAssignmentOp _assignment_op_;
    private PCstExpression _cst_expression_;

    public AAssignDivisionCstAssignments ()
    {
    }

    public AAssignDivisionCstAssignments (
            TIdentifier _identifier_,
            TDivisionOp _division_op_,
            TAssignmentOp _assignment_op_,
            PCstExpression _cst_expression_
    )
    {
        SetIdentifier (_identifier_);
        SetDivisionOp (_division_op_);
        SetAssignmentOp (_assignment_op_);
        SetCstExpression (_cst_expression_);
    }

    public override Object Clone()
    {
        return new AAssignDivisionCstAssignments (
            (TIdentifier)CloneNode (_identifier_),
            (TDivisionOp)CloneNode (_division_op_),
            (TAssignmentOp)CloneNode (_assignment_op_),
            (PCstExpression)CloneNode (_cst_expression_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignDivisionCstAssignments(this);
    }

    public TIdentifier GetIdentifier ()
    {
        return _identifier_;
    }

    public void SetIdentifier (TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _identifier_ = node;
    }
    public TDivisionOp GetDivisionOp ()
    {
        return _division_op_;
    }

    public void SetDivisionOp (TDivisionOp node)
    {
        if(_division_op_ != null)
        {
            _division_op_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _division_op_ = node;
    }
    public TAssignmentOp GetAssignmentOp ()
    {
        return _assignment_op_;
    }

    public void SetAssignmentOp (TAssignmentOp node)
    {
        if(_assignment_op_ != null)
        {
            _assignment_op_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assignment_op_ = node;
    }
    public PCstExpression GetCstExpression ()
    {
        return _cst_expression_;
    }

    public void SetCstExpression (PCstExpression node)
    {
        if(_cst_expression_ != null)
        {
            _cst_expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_expression_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_identifier_)
            + ToString (_division_op_)
            + ToString (_assignment_op_)
            + ToString (_cst_expression_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _identifier_ == child )
        {
            _identifier_ = null;
            return;
        }
        if ( _division_op_ == child )
        {
            _division_op_ = null;
            return;
        }
        if ( _assignment_op_ == child )
        {
            _assignment_op_ = null;
            return;
        }
        if ( _cst_expression_ == child )
        {
            _cst_expression_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _identifier_ == oldChild )
        {
            SetIdentifier ((TIdentifier) newChild);
            return;
        }
        if ( _division_op_ == oldChild )
        {
            SetDivisionOp ((TDivisionOp) newChild);
            return;
        }
        if ( _assignment_op_ == oldChild )
        {
            SetAssignmentOp ((TAssignmentOp) newChild);
            return;
        }
        if ( _cst_expression_ == oldChild )
        {
            SetCstExpression ((PCstExpression) newChild);
            return;
        }
    }

}
public sealed class AAssignModCstAssignments : PCstAssignments
{
    private TIdentifier _identifier_;
    private TModuloOp _modulo_op_;
    private TAssignmentOp _assignment_op_;
    private PCstExpression _cst_expression_;

    public AAssignModCstAssignments ()
    {
    }

    public AAssignModCstAssignments (
            TIdentifier _identifier_,
            TModuloOp _modulo_op_,
            TAssignmentOp _assignment_op_,
            PCstExpression _cst_expression_
    )
    {
        SetIdentifier (_identifier_);
        SetModuloOp (_modulo_op_);
        SetAssignmentOp (_assignment_op_);
        SetCstExpression (_cst_expression_);
    }

    public override Object Clone()
    {
        return new AAssignModCstAssignments (
            (TIdentifier)CloneNode (_identifier_),
            (TModuloOp)CloneNode (_modulo_op_),
            (TAssignmentOp)CloneNode (_assignment_op_),
            (PCstExpression)CloneNode (_cst_expression_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignModCstAssignments(this);
    }

    public TIdentifier GetIdentifier ()
    {
        return _identifier_;
    }

    public void SetIdentifier (TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _identifier_ = node;
    }
    public TModuloOp GetModuloOp ()
    {
        return _modulo_op_;
    }

    public void SetModuloOp (TModuloOp node)
    {
        if(_modulo_op_ != null)
        {
            _modulo_op_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _modulo_op_ = node;
    }
    public TAssignmentOp GetAssignmentOp ()
    {
        return _assignment_op_;
    }

    public void SetAssignmentOp (TAssignmentOp node)
    {
        if(_assignment_op_ != null)
        {
            _assignment_op_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assignment_op_ = node;
    }
    public PCstExpression GetCstExpression ()
    {
        return _cst_expression_;
    }

    public void SetCstExpression (PCstExpression node)
    {
        if(_cst_expression_ != null)
        {
            _cst_expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_expression_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_identifier_)
            + ToString (_modulo_op_)
            + ToString (_assignment_op_)
            + ToString (_cst_expression_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _identifier_ == child )
        {
            _identifier_ = null;
            return;
        }
        if ( _modulo_op_ == child )
        {
            _modulo_op_ = null;
            return;
        }
        if ( _assignment_op_ == child )
        {
            _assignment_op_ = null;
            return;
        }
        if ( _cst_expression_ == child )
        {
            _cst_expression_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _identifier_ == oldChild )
        {
            SetIdentifier ((TIdentifier) newChild);
            return;
        }
        if ( _modulo_op_ == oldChild )
        {
            SetModuloOp ((TModuloOp) newChild);
            return;
        }
        if ( _assignment_op_ == oldChild )
        {
            SetAssignmentOp ((TAssignmentOp) newChild);
            return;
        }
        if ( _cst_expression_ == oldChild )
        {
            SetCstExpression ((PCstExpression) newChild);
            return;
        }
    }

}
public sealed class ACstFunctionCall : PCstFunctionCall
{
    private TIdentifier _identifier_;
    private TLPar _l_par_;
    private PCstActualParamList _cst_actual_param_list_;
    private TRPar _r_par_;

    public ACstFunctionCall ()
    {
    }

    public ACstFunctionCall (
            TIdentifier _identifier_,
            TLPar _l_par_,
            PCstActualParamList _cst_actual_param_list_,
            TRPar _r_par_
    )
    {
        SetIdentifier (_identifier_);
        SetLPar (_l_par_);
        SetCstActualParamList (_cst_actual_param_list_);
        SetRPar (_r_par_);
    }

    public override Object Clone()
    {
        return new ACstFunctionCall (
            (TIdentifier)CloneNode (_identifier_),
            (TLPar)CloneNode (_l_par_),
            (PCstActualParamList)CloneNode (_cst_actual_param_list_),
            (TRPar)CloneNode (_r_par_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACstFunctionCall(this);
    }

    public TIdentifier GetIdentifier ()
    {
        return _identifier_;
    }

    public void SetIdentifier (TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _identifier_ = node;
    }
    public TLPar GetLPar ()
    {
        return _l_par_;
    }

    public void SetLPar (TLPar node)
    {
        if(_l_par_ != null)
        {
            _l_par_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_par_ = node;
    }
    public PCstActualParamList GetCstActualParamList ()
    {
        return _cst_actual_param_list_;
    }

    public void SetCstActualParamList (PCstActualParamList node)
    {
        if(_cst_actual_param_list_ != null)
        {
            _cst_actual_param_list_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_actual_param_list_ = node;
    }
    public TRPar GetRPar ()
    {
        return _r_par_;
    }

    public void SetRPar (TRPar node)
    {
        if(_r_par_ != null)
        {
            _r_par_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_par_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_identifier_)
            + ToString (_l_par_)
            + ToString (_cst_actual_param_list_)
            + ToString (_r_par_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _identifier_ == child )
        {
            _identifier_ = null;
            return;
        }
        if ( _l_par_ == child )
        {
            _l_par_ = null;
            return;
        }
        if ( _cst_actual_param_list_ == child )
        {
            _cst_actual_param_list_ = null;
            return;
        }
        if ( _r_par_ == child )
        {
            _r_par_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _identifier_ == oldChild )
        {
            SetIdentifier ((TIdentifier) newChild);
            return;
        }
        if ( _l_par_ == oldChild )
        {
            SetLPar ((TLPar) newChild);
            return;
        }
        if ( _cst_actual_param_list_ == oldChild )
        {
            SetCstActualParamList ((PCstActualParamList) newChild);
            return;
        }
        if ( _r_par_ == oldChild )
        {
            SetRPar ((TRPar) newChild);
            return;
        }
    }

}
public sealed class AListCstActualParamList : PCstActualParamList
{
    private PCstExpression _cst_expression_;
    private TComma _comma_;
    private PCstActualParamList _cst_actual_param_list_;

    public AListCstActualParamList ()
    {
    }

    public AListCstActualParamList (
            PCstExpression _cst_expression_,
            TComma _comma_,
            PCstActualParamList _cst_actual_param_list_
    )
    {
        SetCstExpression (_cst_expression_);
        SetComma (_comma_);
        SetCstActualParamList (_cst_actual_param_list_);
    }

    public override Object Clone()
    {
        return new AListCstActualParamList (
            (PCstExpression)CloneNode (_cst_expression_),
            (TComma)CloneNode (_comma_),
            (PCstActualParamList)CloneNode (_cst_actual_param_list_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAListCstActualParamList(this);
    }

    public PCstExpression GetCstExpression ()
    {
        return _cst_expression_;
    }

    public void SetCstExpression (PCstExpression node)
    {
        if(_cst_expression_ != null)
        {
            _cst_expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_expression_ = node;
    }
    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public PCstActualParamList GetCstActualParamList ()
    {
        return _cst_actual_param_list_;
    }

    public void SetCstActualParamList (PCstActualParamList node)
    {
        if(_cst_actual_param_list_ != null)
        {
            _cst_actual_param_list_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_actual_param_list_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_cst_expression_)
            + ToString (_comma_)
            + ToString (_cst_actual_param_list_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _cst_expression_ == child )
        {
            _cst_expression_ = null;
            return;
        }
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _cst_actual_param_list_ == child )
        {
            _cst_actual_param_list_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _cst_expression_ == oldChild )
        {
            SetCstExpression ((PCstExpression) newChild);
            return;
        }
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _cst_actual_param_list_ == oldChild )
        {
            SetCstActualParamList ((PCstActualParamList) newChild);
            return;
        }
    }

}
public sealed class ACstActualParamList : PCstActualParamList
{
    private PCstExpression _cst_expression_;

    public ACstActualParamList ()
    {
    }

    public ACstActualParamList (
            PCstExpression _cst_expression_
    )
    {
        SetCstExpression (_cst_expression_);
    }

    public override Object Clone()
    {
        return new ACstActualParamList (
            (PCstExpression)CloneNode (_cst_expression_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACstActualParamList(this);
    }

    public PCstExpression GetCstExpression ()
    {
        return _cst_expression_;
    }

    public void SetCstExpression (PCstExpression node)
    {
        if(_cst_expression_ != null)
        {
            _cst_expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_expression_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_cst_expression_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _cst_expression_ == child )
        {
            _cst_expression_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _cst_expression_ == oldChild )
        {
            SetCstExpression ((PCstExpression) newChild);
            return;
        }
    }

}
public sealed class AAndCstExpression : PCstExpression
{
    private PCstLogicOrExp _cst_logic_or_exp_;
    private TAnd _and_;
    private PCstExpression _cst_expression_;

    public AAndCstExpression ()
    {
    }

    public AAndCstExpression (
            PCstLogicOrExp _cst_logic_or_exp_,
            TAnd _and_,
            PCstExpression _cst_expression_
    )
    {
        SetCstLogicOrExp (_cst_logic_or_exp_);
        SetAnd (_and_);
        SetCstExpression (_cst_expression_);
    }

    public override Object Clone()
    {
        return new AAndCstExpression (
            (PCstLogicOrExp)CloneNode (_cst_logic_or_exp_),
            (TAnd)CloneNode (_and_),
            (PCstExpression)CloneNode (_cst_expression_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAndCstExpression(this);
    }

    public PCstLogicOrExp GetCstLogicOrExp ()
    {
        return _cst_logic_or_exp_;
    }

    public void SetCstLogicOrExp (PCstLogicOrExp node)
    {
        if(_cst_logic_or_exp_ != null)
        {
            _cst_logic_or_exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_logic_or_exp_ = node;
    }
    public TAnd GetAnd ()
    {
        return _and_;
    }

    public void SetAnd (TAnd node)
    {
        if(_and_ != null)
        {
            _and_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _and_ = node;
    }
    public PCstExpression GetCstExpression ()
    {
        return _cst_expression_;
    }

    public void SetCstExpression (PCstExpression node)
    {
        if(_cst_expression_ != null)
        {
            _cst_expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_expression_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_cst_logic_or_exp_)
            + ToString (_and_)
            + ToString (_cst_expression_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _cst_logic_or_exp_ == child )
        {
            _cst_logic_or_exp_ = null;
            return;
        }
        if ( _and_ == child )
        {
            _and_ = null;
            return;
        }
        if ( _cst_expression_ == child )
        {
            _cst_expression_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _cst_logic_or_exp_ == oldChild )
        {
            SetCstLogicOrExp ((PCstLogicOrExp) newChild);
            return;
        }
        if ( _and_ == oldChild )
        {
            SetAnd ((TAnd) newChild);
            return;
        }
        if ( _cst_expression_ == oldChild )
        {
            SetCstExpression ((PCstExpression) newChild);
            return;
        }
    }

}
public sealed class ACstExpression : PCstExpression
{
    private PCstLogicOrExp _cst_logic_or_exp_;

    public ACstExpression ()
    {
    }

    public ACstExpression (
            PCstLogicOrExp _cst_logic_or_exp_
    )
    {
        SetCstLogicOrExp (_cst_logic_or_exp_);
    }

    public override Object Clone()
    {
        return new ACstExpression (
            (PCstLogicOrExp)CloneNode (_cst_logic_or_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACstExpression(this);
    }

    public PCstLogicOrExp GetCstLogicOrExp ()
    {
        return _cst_logic_or_exp_;
    }

    public void SetCstLogicOrExp (PCstLogicOrExp node)
    {
        if(_cst_logic_or_exp_ != null)
        {
            _cst_logic_or_exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_logic_or_exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_cst_logic_or_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _cst_logic_or_exp_ == child )
        {
            _cst_logic_or_exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _cst_logic_or_exp_ == oldChild )
        {
            SetCstLogicOrExp ((PCstLogicOrExp) newChild);
            return;
        }
    }

}
public sealed class AOrCstLogicOrExp : PCstLogicOrExp
{
    private PCstBoolExp _cst_bool_exp_;
    private TOr _or_;
    private PCstLogicOrExp _cst_logic_or_exp_;

    public AOrCstLogicOrExp ()
    {
    }

    public AOrCstLogicOrExp (
            PCstBoolExp _cst_bool_exp_,
            TOr _or_,
            PCstLogicOrExp _cst_logic_or_exp_
    )
    {
        SetCstBoolExp (_cst_bool_exp_);
        SetOr (_or_);
        SetCstLogicOrExp (_cst_logic_or_exp_);
    }

    public override Object Clone()
    {
        return new AOrCstLogicOrExp (
            (PCstBoolExp)CloneNode (_cst_bool_exp_),
            (TOr)CloneNode (_or_),
            (PCstLogicOrExp)CloneNode (_cst_logic_or_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOrCstLogicOrExp(this);
    }

    public PCstBoolExp GetCstBoolExp ()
    {
        return _cst_bool_exp_;
    }

    public void SetCstBoolExp (PCstBoolExp node)
    {
        if(_cst_bool_exp_ != null)
        {
            _cst_bool_exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_bool_exp_ = node;
    }
    public TOr GetOr ()
    {
        return _or_;
    }

    public void SetOr (TOr node)
    {
        if(_or_ != null)
        {
            _or_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _or_ = node;
    }
    public PCstLogicOrExp GetCstLogicOrExp ()
    {
        return _cst_logic_or_exp_;
    }

    public void SetCstLogicOrExp (PCstLogicOrExp node)
    {
        if(_cst_logic_or_exp_ != null)
        {
            _cst_logic_or_exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_logic_or_exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_cst_bool_exp_)
            + ToString (_or_)
            + ToString (_cst_logic_or_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _cst_bool_exp_ == child )
        {
            _cst_bool_exp_ = null;
            return;
        }
        if ( _or_ == child )
        {
            _or_ = null;
            return;
        }
        if ( _cst_logic_or_exp_ == child )
        {
            _cst_logic_or_exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _cst_bool_exp_ == oldChild )
        {
            SetCstBoolExp ((PCstBoolExp) newChild);
            return;
        }
        if ( _or_ == oldChild )
        {
            SetOr ((TOr) newChild);
            return;
        }
        if ( _cst_logic_or_exp_ == oldChild )
        {
            SetCstLogicOrExp ((PCstLogicOrExp) newChild);
            return;
        }
    }

}
public sealed class ACstLogicOrExp : PCstLogicOrExp
{
    private PCstBoolExp _cst_bool_exp_;

    public ACstLogicOrExp ()
    {
    }

    public ACstLogicOrExp (
            PCstBoolExp _cst_bool_exp_
    )
    {
        SetCstBoolExp (_cst_bool_exp_);
    }

    public override Object Clone()
    {
        return new ACstLogicOrExp (
            (PCstBoolExp)CloneNode (_cst_bool_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACstLogicOrExp(this);
    }

    public PCstBoolExp GetCstBoolExp ()
    {
        return _cst_bool_exp_;
    }

    public void SetCstBoolExp (PCstBoolExp node)
    {
        if(_cst_bool_exp_ != null)
        {
            _cst_bool_exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_bool_exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_cst_bool_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _cst_bool_exp_ == child )
        {
            _cst_bool_exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _cst_bool_exp_ == oldChild )
        {
            SetCstBoolExp ((PCstBoolExp) newChild);
            return;
        }
    }

}
public sealed class ANotCstBoolExp : PCstBoolExp
{
    private TNot _not_;
    private PCstBoolExp _cst_bool_exp_;

    public ANotCstBoolExp ()
    {
    }

    public ANotCstBoolExp (
            TNot _not_,
            PCstBoolExp _cst_bool_exp_
    )
    {
        SetNot (_not_);
        SetCstBoolExp (_cst_bool_exp_);
    }

    public override Object Clone()
    {
        return new ANotCstBoolExp (
            (TNot)CloneNode (_not_),
            (PCstBoolExp)CloneNode (_cst_bool_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANotCstBoolExp(this);
    }

    public TNot GetNot ()
    {
        return _not_;
    }

    public void SetNot (TNot node)
    {
        if(_not_ != null)
        {
            _not_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _not_ = node;
    }
    public PCstBoolExp GetCstBoolExp ()
    {
        return _cst_bool_exp_;
    }

    public void SetCstBoolExp (PCstBoolExp node)
    {
        if(_cst_bool_exp_ != null)
        {
            _cst_bool_exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_bool_exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_not_)
            + ToString (_cst_bool_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _not_ == child )
        {
            _not_ = null;
            return;
        }
        if ( _cst_bool_exp_ == child )
        {
            _cst_bool_exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _not_ == oldChild )
        {
            SetNot ((TNot) newChild);
            return;
        }
        if ( _cst_bool_exp_ == oldChild )
        {
            SetCstBoolExp ((PCstBoolExp) newChild);
            return;
        }
    }

}
public sealed class AEqualCstBoolExp : PCstBoolExp
{
    private PCstAssociativeExp _a_;
    private TEqual _equal_;
    private PCstAssociativeExp _b_;

    public AEqualCstBoolExp ()
    {
    }

    public AEqualCstBoolExp (
            PCstAssociativeExp _a_,
            TEqual _equal_,
            PCstAssociativeExp _b_
    )
    {
        SetA (_a_);
        SetEqual (_equal_);
        SetB (_b_);
    }

    public override Object Clone()
    {
        return new AEqualCstBoolExp (
            (PCstAssociativeExp)CloneNode (_a_),
            (TEqual)CloneNode (_equal_),
            (PCstAssociativeExp)CloneNode (_b_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAEqualCstBoolExp(this);
    }

    public PCstAssociativeExp GetA ()
    {
        return _a_;
    }

    public void SetA (PCstAssociativeExp node)
    {
        if(_a_ != null)
        {
            _a_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _a_ = node;
    }
    public TEqual GetEqual ()
    {
        return _equal_;
    }

    public void SetEqual (TEqual node)
    {
        if(_equal_ != null)
        {
            _equal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _equal_ = node;
    }
    public PCstAssociativeExp GetB ()
    {
        return _b_;
    }

    public void SetB (PCstAssociativeExp node)
    {
        if(_b_ != null)
        {
            _b_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _b_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_a_)
            + ToString (_equal_)
            + ToString (_b_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _a_ == child )
        {
            _a_ = null;
            return;
        }
        if ( _equal_ == child )
        {
            _equal_ = null;
            return;
        }
        if ( _b_ == child )
        {
            _b_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _a_ == oldChild )
        {
            SetA ((PCstAssociativeExp) newChild);
            return;
        }
        if ( _equal_ == oldChild )
        {
            SetEqual ((TEqual) newChild);
            return;
        }
        if ( _b_ == oldChild )
        {
            SetB ((PCstAssociativeExp) newChild);
            return;
        }
    }

}
public sealed class ALeCstBoolExp : PCstBoolExp
{
    private PCstAssociativeExp _a_;
    private TLessThan _less_than_;
    private PCstAssociativeExp _b_;

    public ALeCstBoolExp ()
    {
    }

    public ALeCstBoolExp (
            PCstAssociativeExp _a_,
            TLessThan _less_than_,
            PCstAssociativeExp _b_
    )
    {
        SetA (_a_);
        SetLessThan (_less_than_);
        SetB (_b_);
    }

    public override Object Clone()
    {
        return new ALeCstBoolExp (
            (PCstAssociativeExp)CloneNode (_a_),
            (TLessThan)CloneNode (_less_than_),
            (PCstAssociativeExp)CloneNode (_b_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALeCstBoolExp(this);
    }

    public PCstAssociativeExp GetA ()
    {
        return _a_;
    }

    public void SetA (PCstAssociativeExp node)
    {
        if(_a_ != null)
        {
            _a_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _a_ = node;
    }
    public TLessThan GetLessThan ()
    {
        return _less_than_;
    }

    public void SetLessThan (TLessThan node)
    {
        if(_less_than_ != null)
        {
            _less_than_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _less_than_ = node;
    }
    public PCstAssociativeExp GetB ()
    {
        return _b_;
    }

    public void SetB (PCstAssociativeExp node)
    {
        if(_b_ != null)
        {
            _b_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _b_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_a_)
            + ToString (_less_than_)
            + ToString (_b_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _a_ == child )
        {
            _a_ = null;
            return;
        }
        if ( _less_than_ == child )
        {
            _less_than_ = null;
            return;
        }
        if ( _b_ == child )
        {
            _b_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _a_ == oldChild )
        {
            SetA ((PCstAssociativeExp) newChild);
            return;
        }
        if ( _less_than_ == oldChild )
        {
            SetLessThan ((TLessThan) newChild);
            return;
        }
        if ( _b_ == oldChild )
        {
            SetB ((PCstAssociativeExp) newChild);
            return;
        }
    }

}
public sealed class ALeqCstBoolExp : PCstBoolExp
{
    private PCstAssociativeExp _a_;
    private TLessThanOrEqual _less_than_or_equal_;
    private PCstAssociativeExp _b_;

    public ALeqCstBoolExp ()
    {
    }

    public ALeqCstBoolExp (
            PCstAssociativeExp _a_,
            TLessThanOrEqual _less_than_or_equal_,
            PCstAssociativeExp _b_
    )
    {
        SetA (_a_);
        SetLessThanOrEqual (_less_than_or_equal_);
        SetB (_b_);
    }

    public override Object Clone()
    {
        return new ALeqCstBoolExp (
            (PCstAssociativeExp)CloneNode (_a_),
            (TLessThanOrEqual)CloneNode (_less_than_or_equal_),
            (PCstAssociativeExp)CloneNode (_b_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALeqCstBoolExp(this);
    }

    public PCstAssociativeExp GetA ()
    {
        return _a_;
    }

    public void SetA (PCstAssociativeExp node)
    {
        if(_a_ != null)
        {
            _a_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _a_ = node;
    }
    public TLessThanOrEqual GetLessThanOrEqual ()
    {
        return _less_than_or_equal_;
    }

    public void SetLessThanOrEqual (TLessThanOrEqual node)
    {
        if(_less_than_or_equal_ != null)
        {
            _less_than_or_equal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _less_than_or_equal_ = node;
    }
    public PCstAssociativeExp GetB ()
    {
        return _b_;
    }

    public void SetB (PCstAssociativeExp node)
    {
        if(_b_ != null)
        {
            _b_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _b_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_a_)
            + ToString (_less_than_or_equal_)
            + ToString (_b_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _a_ == child )
        {
            _a_ = null;
            return;
        }
        if ( _less_than_or_equal_ == child )
        {
            _less_than_or_equal_ = null;
            return;
        }
        if ( _b_ == child )
        {
            _b_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _a_ == oldChild )
        {
            SetA ((PCstAssociativeExp) newChild);
            return;
        }
        if ( _less_than_or_equal_ == oldChild )
        {
            SetLessThanOrEqual ((TLessThanOrEqual) newChild);
            return;
        }
        if ( _b_ == oldChild )
        {
            SetB ((PCstAssociativeExp) newChild);
            return;
        }
    }

}
public sealed class AGeCstBoolExp : PCstBoolExp
{
    private PCstAssociativeExp _a_;
    private TGreaterThan _greater_than_;
    private PCstAssociativeExp _b_;

    public AGeCstBoolExp ()
    {
    }

    public AGeCstBoolExp (
            PCstAssociativeExp _a_,
            TGreaterThan _greater_than_,
            PCstAssociativeExp _b_
    )
    {
        SetA (_a_);
        SetGreaterThan (_greater_than_);
        SetB (_b_);
    }

    public override Object Clone()
    {
        return new AGeCstBoolExp (
            (PCstAssociativeExp)CloneNode (_a_),
            (TGreaterThan)CloneNode (_greater_than_),
            (PCstAssociativeExp)CloneNode (_b_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGeCstBoolExp(this);
    }

    public PCstAssociativeExp GetA ()
    {
        return _a_;
    }

    public void SetA (PCstAssociativeExp node)
    {
        if(_a_ != null)
        {
            _a_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _a_ = node;
    }
    public TGreaterThan GetGreaterThan ()
    {
        return _greater_than_;
    }

    public void SetGreaterThan (TGreaterThan node)
    {
        if(_greater_than_ != null)
        {
            _greater_than_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _greater_than_ = node;
    }
    public PCstAssociativeExp GetB ()
    {
        return _b_;
    }

    public void SetB (PCstAssociativeExp node)
    {
        if(_b_ != null)
        {
            _b_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _b_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_a_)
            + ToString (_greater_than_)
            + ToString (_b_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _a_ == child )
        {
            _a_ = null;
            return;
        }
        if ( _greater_than_ == child )
        {
            _greater_than_ = null;
            return;
        }
        if ( _b_ == child )
        {
            _b_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _a_ == oldChild )
        {
            SetA ((PCstAssociativeExp) newChild);
            return;
        }
        if ( _greater_than_ == oldChild )
        {
            SetGreaterThan ((TGreaterThan) newChild);
            return;
        }
        if ( _b_ == oldChild )
        {
            SetB ((PCstAssociativeExp) newChild);
            return;
        }
    }

}
public sealed class AGeqCstBoolExp : PCstBoolExp
{
    private PCstAssociativeExp _a_;
    private TGreaterThanOrEqual _greater_than_or_equal_;
    private PCstAssociativeExp _b_;

    public AGeqCstBoolExp ()
    {
    }

    public AGeqCstBoolExp (
            PCstAssociativeExp _a_,
            TGreaterThanOrEqual _greater_than_or_equal_,
            PCstAssociativeExp _b_
    )
    {
        SetA (_a_);
        SetGreaterThanOrEqual (_greater_than_or_equal_);
        SetB (_b_);
    }

    public override Object Clone()
    {
        return new AGeqCstBoolExp (
            (PCstAssociativeExp)CloneNode (_a_),
            (TGreaterThanOrEqual)CloneNode (_greater_than_or_equal_),
            (PCstAssociativeExp)CloneNode (_b_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGeqCstBoolExp(this);
    }

    public PCstAssociativeExp GetA ()
    {
        return _a_;
    }

    public void SetA (PCstAssociativeExp node)
    {
        if(_a_ != null)
        {
            _a_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _a_ = node;
    }
    public TGreaterThanOrEqual GetGreaterThanOrEqual ()
    {
        return _greater_than_or_equal_;
    }

    public void SetGreaterThanOrEqual (TGreaterThanOrEqual node)
    {
        if(_greater_than_or_equal_ != null)
        {
            _greater_than_or_equal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _greater_than_or_equal_ = node;
    }
    public PCstAssociativeExp GetB ()
    {
        return _b_;
    }

    public void SetB (PCstAssociativeExp node)
    {
        if(_b_ != null)
        {
            _b_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _b_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_a_)
            + ToString (_greater_than_or_equal_)
            + ToString (_b_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _a_ == child )
        {
            _a_ = null;
            return;
        }
        if ( _greater_than_or_equal_ == child )
        {
            _greater_than_or_equal_ = null;
            return;
        }
        if ( _b_ == child )
        {
            _b_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _a_ == oldChild )
        {
            SetA ((PCstAssociativeExp) newChild);
            return;
        }
        if ( _greater_than_or_equal_ == oldChild )
        {
            SetGreaterThanOrEqual ((TGreaterThanOrEqual) newChild);
            return;
        }
        if ( _b_ == oldChild )
        {
            SetB ((PCstAssociativeExp) newChild);
            return;
        }
    }

}
public sealed class ANeqCstBoolExp : PCstBoolExp
{
    private PCstAssociativeExp _a_;
    private TNotEqual _not_equal_;
    private PCstAssociativeExp _b_;

    public ANeqCstBoolExp ()
    {
    }

    public ANeqCstBoolExp (
            PCstAssociativeExp _a_,
            TNotEqual _not_equal_,
            PCstAssociativeExp _b_
    )
    {
        SetA (_a_);
        SetNotEqual (_not_equal_);
        SetB (_b_);
    }

    public override Object Clone()
    {
        return new ANeqCstBoolExp (
            (PCstAssociativeExp)CloneNode (_a_),
            (TNotEqual)CloneNode (_not_equal_),
            (PCstAssociativeExp)CloneNode (_b_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANeqCstBoolExp(this);
    }

    public PCstAssociativeExp GetA ()
    {
        return _a_;
    }

    public void SetA (PCstAssociativeExp node)
    {
        if(_a_ != null)
        {
            _a_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _a_ = node;
    }
    public TNotEqual GetNotEqual ()
    {
        return _not_equal_;
    }

    public void SetNotEqual (TNotEqual node)
    {
        if(_not_equal_ != null)
        {
            _not_equal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _not_equal_ = node;
    }
    public PCstAssociativeExp GetB ()
    {
        return _b_;
    }

    public void SetB (PCstAssociativeExp node)
    {
        if(_b_ != null)
        {
            _b_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _b_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_a_)
            + ToString (_not_equal_)
            + ToString (_b_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _a_ == child )
        {
            _a_ = null;
            return;
        }
        if ( _not_equal_ == child )
        {
            _not_equal_ = null;
            return;
        }
        if ( _b_ == child )
        {
            _b_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _a_ == oldChild )
        {
            SetA ((PCstAssociativeExp) newChild);
            return;
        }
        if ( _not_equal_ == oldChild )
        {
            SetNotEqual ((TNotEqual) newChild);
            return;
        }
        if ( _b_ == oldChild )
        {
            SetB ((PCstAssociativeExp) newChild);
            return;
        }
    }

}
public sealed class ACstBoolExp : PCstBoolExp
{
    private PCstAssociativeExp _cst_associative_exp_;

    public ACstBoolExp ()
    {
    }

    public ACstBoolExp (
            PCstAssociativeExp _cst_associative_exp_
    )
    {
        SetCstAssociativeExp (_cst_associative_exp_);
    }

    public override Object Clone()
    {
        return new ACstBoolExp (
            (PCstAssociativeExp)CloneNode (_cst_associative_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACstBoolExp(this);
    }

    public PCstAssociativeExp GetCstAssociativeExp ()
    {
        return _cst_associative_exp_;
    }

    public void SetCstAssociativeExp (PCstAssociativeExp node)
    {
        if(_cst_associative_exp_ != null)
        {
            _cst_associative_exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_associative_exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_cst_associative_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _cst_associative_exp_ == child )
        {
            _cst_associative_exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _cst_associative_exp_ == oldChild )
        {
            SetCstAssociativeExp ((PCstAssociativeExp) newChild);
            return;
        }
    }

}
public sealed class APlusCstAssociativeExp : PCstAssociativeExp
{
    private PCstNotAssociativeExp _cst_not_associative_exp_;
    private TPlusOp _plus_op_;
    private PCstAssociativeExp _cst_associative_exp_;

    public APlusCstAssociativeExp ()
    {
    }

    public APlusCstAssociativeExp (
            PCstNotAssociativeExp _cst_not_associative_exp_,
            TPlusOp _plus_op_,
            PCstAssociativeExp _cst_associative_exp_
    )
    {
        SetCstNotAssociativeExp (_cst_not_associative_exp_);
        SetPlusOp (_plus_op_);
        SetCstAssociativeExp (_cst_associative_exp_);
    }

    public override Object Clone()
    {
        return new APlusCstAssociativeExp (
            (PCstNotAssociativeExp)CloneNode (_cst_not_associative_exp_),
            (TPlusOp)CloneNode (_plus_op_),
            (PCstAssociativeExp)CloneNode (_cst_associative_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPlusCstAssociativeExp(this);
    }

    public PCstNotAssociativeExp GetCstNotAssociativeExp ()
    {
        return _cst_not_associative_exp_;
    }

    public void SetCstNotAssociativeExp (PCstNotAssociativeExp node)
    {
        if(_cst_not_associative_exp_ != null)
        {
            _cst_not_associative_exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_not_associative_exp_ = node;
    }
    public TPlusOp GetPlusOp ()
    {
        return _plus_op_;
    }

    public void SetPlusOp (TPlusOp node)
    {
        if(_plus_op_ != null)
        {
            _plus_op_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _plus_op_ = node;
    }
    public PCstAssociativeExp GetCstAssociativeExp ()
    {
        return _cst_associative_exp_;
    }

    public void SetCstAssociativeExp (PCstAssociativeExp node)
    {
        if(_cst_associative_exp_ != null)
        {
            _cst_associative_exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_associative_exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_cst_not_associative_exp_)
            + ToString (_plus_op_)
            + ToString (_cst_associative_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _cst_not_associative_exp_ == child )
        {
            _cst_not_associative_exp_ = null;
            return;
        }
        if ( _plus_op_ == child )
        {
            _plus_op_ = null;
            return;
        }
        if ( _cst_associative_exp_ == child )
        {
            _cst_associative_exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _cst_not_associative_exp_ == oldChild )
        {
            SetCstNotAssociativeExp ((PCstNotAssociativeExp) newChild);
            return;
        }
        if ( _plus_op_ == oldChild )
        {
            SetPlusOp ((TPlusOp) newChild);
            return;
        }
        if ( _cst_associative_exp_ == oldChild )
        {
            SetCstAssociativeExp ((PCstAssociativeExp) newChild);
            return;
        }
    }

}
public sealed class AMinusCstAssociativeExp : PCstAssociativeExp
{
    private PCstNotAssociativeExp _cst_not_associative_exp_;
    private TMinusOp _minus_op_;
    private PCstAssociativeExp _cst_associative_exp_;

    public AMinusCstAssociativeExp ()
    {
    }

    public AMinusCstAssociativeExp (
            PCstNotAssociativeExp _cst_not_associative_exp_,
            TMinusOp _minus_op_,
            PCstAssociativeExp _cst_associative_exp_
    )
    {
        SetCstNotAssociativeExp (_cst_not_associative_exp_);
        SetMinusOp (_minus_op_);
        SetCstAssociativeExp (_cst_associative_exp_);
    }

    public override Object Clone()
    {
        return new AMinusCstAssociativeExp (
            (PCstNotAssociativeExp)CloneNode (_cst_not_associative_exp_),
            (TMinusOp)CloneNode (_minus_op_),
            (PCstAssociativeExp)CloneNode (_cst_associative_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMinusCstAssociativeExp(this);
    }

    public PCstNotAssociativeExp GetCstNotAssociativeExp ()
    {
        return _cst_not_associative_exp_;
    }

    public void SetCstNotAssociativeExp (PCstNotAssociativeExp node)
    {
        if(_cst_not_associative_exp_ != null)
        {
            _cst_not_associative_exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_not_associative_exp_ = node;
    }
    public TMinusOp GetMinusOp ()
    {
        return _minus_op_;
    }

    public void SetMinusOp (TMinusOp node)
    {
        if(_minus_op_ != null)
        {
            _minus_op_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _minus_op_ = node;
    }
    public PCstAssociativeExp GetCstAssociativeExp ()
    {
        return _cst_associative_exp_;
    }

    public void SetCstAssociativeExp (PCstAssociativeExp node)
    {
        if(_cst_associative_exp_ != null)
        {
            _cst_associative_exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_associative_exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_cst_not_associative_exp_)
            + ToString (_minus_op_)
            + ToString (_cst_associative_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _cst_not_associative_exp_ == child )
        {
            _cst_not_associative_exp_ = null;
            return;
        }
        if ( _minus_op_ == child )
        {
            _minus_op_ = null;
            return;
        }
        if ( _cst_associative_exp_ == child )
        {
            _cst_associative_exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _cst_not_associative_exp_ == oldChild )
        {
            SetCstNotAssociativeExp ((PCstNotAssociativeExp) newChild);
            return;
        }
        if ( _minus_op_ == oldChild )
        {
            SetMinusOp ((TMinusOp) newChild);
            return;
        }
        if ( _cst_associative_exp_ == oldChild )
        {
            SetCstAssociativeExp ((PCstAssociativeExp) newChild);
            return;
        }
    }

}
public sealed class ACstAssociativeExp : PCstAssociativeExp
{
    private PCstNotAssociativeExp _cst_not_associative_exp_;

    public ACstAssociativeExp ()
    {
    }

    public ACstAssociativeExp (
            PCstNotAssociativeExp _cst_not_associative_exp_
    )
    {
        SetCstNotAssociativeExp (_cst_not_associative_exp_);
    }

    public override Object Clone()
    {
        return new ACstAssociativeExp (
            (PCstNotAssociativeExp)CloneNode (_cst_not_associative_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACstAssociativeExp(this);
    }

    public PCstNotAssociativeExp GetCstNotAssociativeExp ()
    {
        return _cst_not_associative_exp_;
    }

    public void SetCstNotAssociativeExp (PCstNotAssociativeExp node)
    {
        if(_cst_not_associative_exp_ != null)
        {
            _cst_not_associative_exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_not_associative_exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_cst_not_associative_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _cst_not_associative_exp_ == child )
        {
            _cst_not_associative_exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _cst_not_associative_exp_ == oldChild )
        {
            SetCstNotAssociativeExp ((PCstNotAssociativeExp) newChild);
            return;
        }
    }

}
public sealed class AMultCstNotAssociativeExp : PCstNotAssociativeExp
{
    private PCstNotAssociativeExp _cst_not_associative_exp_;
    private TMultiplicationOp _multiplication_op_;
    private PCstLeafExp _cst_leaf_exp_;

    public AMultCstNotAssociativeExp ()
    {
    }

    public AMultCstNotAssociativeExp (
            PCstNotAssociativeExp _cst_not_associative_exp_,
            TMultiplicationOp _multiplication_op_,
            PCstLeafExp _cst_leaf_exp_
    )
    {
        SetCstNotAssociativeExp (_cst_not_associative_exp_);
        SetMultiplicationOp (_multiplication_op_);
        SetCstLeafExp (_cst_leaf_exp_);
    }

    public override Object Clone()
    {
        return new AMultCstNotAssociativeExp (
            (PCstNotAssociativeExp)CloneNode (_cst_not_associative_exp_),
            (TMultiplicationOp)CloneNode (_multiplication_op_),
            (PCstLeafExp)CloneNode (_cst_leaf_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultCstNotAssociativeExp(this);
    }

    public PCstNotAssociativeExp GetCstNotAssociativeExp ()
    {
        return _cst_not_associative_exp_;
    }

    public void SetCstNotAssociativeExp (PCstNotAssociativeExp node)
    {
        if(_cst_not_associative_exp_ != null)
        {
            _cst_not_associative_exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_not_associative_exp_ = node;
    }
    public TMultiplicationOp GetMultiplicationOp ()
    {
        return _multiplication_op_;
    }

    public void SetMultiplicationOp (TMultiplicationOp node)
    {
        if(_multiplication_op_ != null)
        {
            _multiplication_op_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _multiplication_op_ = node;
    }
    public PCstLeafExp GetCstLeafExp ()
    {
        return _cst_leaf_exp_;
    }

    public void SetCstLeafExp (PCstLeafExp node)
    {
        if(_cst_leaf_exp_ != null)
        {
            _cst_leaf_exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_leaf_exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_cst_not_associative_exp_)
            + ToString (_multiplication_op_)
            + ToString (_cst_leaf_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _cst_not_associative_exp_ == child )
        {
            _cst_not_associative_exp_ = null;
            return;
        }
        if ( _multiplication_op_ == child )
        {
            _multiplication_op_ = null;
            return;
        }
        if ( _cst_leaf_exp_ == child )
        {
            _cst_leaf_exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _cst_not_associative_exp_ == oldChild )
        {
            SetCstNotAssociativeExp ((PCstNotAssociativeExp) newChild);
            return;
        }
        if ( _multiplication_op_ == oldChild )
        {
            SetMultiplicationOp ((TMultiplicationOp) newChild);
            return;
        }
        if ( _cst_leaf_exp_ == oldChild )
        {
            SetCstLeafExp ((PCstLeafExp) newChild);
            return;
        }
    }

}
public sealed class ADivisionCstNotAssociativeExp : PCstNotAssociativeExp
{
    private PCstNotAssociativeExp _cst_not_associative_exp_;
    private TDivisionOp _division_op_;
    private PCstLeafExp _cst_leaf_exp_;

    public ADivisionCstNotAssociativeExp ()
    {
    }

    public ADivisionCstNotAssociativeExp (
            PCstNotAssociativeExp _cst_not_associative_exp_,
            TDivisionOp _division_op_,
            PCstLeafExp _cst_leaf_exp_
    )
    {
        SetCstNotAssociativeExp (_cst_not_associative_exp_);
        SetDivisionOp (_division_op_);
        SetCstLeafExp (_cst_leaf_exp_);
    }

    public override Object Clone()
    {
        return new ADivisionCstNotAssociativeExp (
            (PCstNotAssociativeExp)CloneNode (_cst_not_associative_exp_),
            (TDivisionOp)CloneNode (_division_op_),
            (PCstLeafExp)CloneNode (_cst_leaf_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADivisionCstNotAssociativeExp(this);
    }

    public PCstNotAssociativeExp GetCstNotAssociativeExp ()
    {
        return _cst_not_associative_exp_;
    }

    public void SetCstNotAssociativeExp (PCstNotAssociativeExp node)
    {
        if(_cst_not_associative_exp_ != null)
        {
            _cst_not_associative_exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_not_associative_exp_ = node;
    }
    public TDivisionOp GetDivisionOp ()
    {
        return _division_op_;
    }

    public void SetDivisionOp (TDivisionOp node)
    {
        if(_division_op_ != null)
        {
            _division_op_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _division_op_ = node;
    }
    public PCstLeafExp GetCstLeafExp ()
    {
        return _cst_leaf_exp_;
    }

    public void SetCstLeafExp (PCstLeafExp node)
    {
        if(_cst_leaf_exp_ != null)
        {
            _cst_leaf_exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_leaf_exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_cst_not_associative_exp_)
            + ToString (_division_op_)
            + ToString (_cst_leaf_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _cst_not_associative_exp_ == child )
        {
            _cst_not_associative_exp_ = null;
            return;
        }
        if ( _division_op_ == child )
        {
            _division_op_ = null;
            return;
        }
        if ( _cst_leaf_exp_ == child )
        {
            _cst_leaf_exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _cst_not_associative_exp_ == oldChild )
        {
            SetCstNotAssociativeExp ((PCstNotAssociativeExp) newChild);
            return;
        }
        if ( _division_op_ == oldChild )
        {
            SetDivisionOp ((TDivisionOp) newChild);
            return;
        }
        if ( _cst_leaf_exp_ == oldChild )
        {
            SetCstLeafExp ((PCstLeafExp) newChild);
            return;
        }
    }

}
public sealed class AModuloCstNotAssociativeExp : PCstNotAssociativeExp
{
    private PCstNotAssociativeExp _cst_not_associative_exp_;
    private TModuloOp _modulo_op_;
    private PCstLeafExp _cst_leaf_exp_;

    public AModuloCstNotAssociativeExp ()
    {
    }

    public AModuloCstNotAssociativeExp (
            PCstNotAssociativeExp _cst_not_associative_exp_,
            TModuloOp _modulo_op_,
            PCstLeafExp _cst_leaf_exp_
    )
    {
        SetCstNotAssociativeExp (_cst_not_associative_exp_);
        SetModuloOp (_modulo_op_);
        SetCstLeafExp (_cst_leaf_exp_);
    }

    public override Object Clone()
    {
        return new AModuloCstNotAssociativeExp (
            (PCstNotAssociativeExp)CloneNode (_cst_not_associative_exp_),
            (TModuloOp)CloneNode (_modulo_op_),
            (PCstLeafExp)CloneNode (_cst_leaf_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAModuloCstNotAssociativeExp(this);
    }

    public PCstNotAssociativeExp GetCstNotAssociativeExp ()
    {
        return _cst_not_associative_exp_;
    }

    public void SetCstNotAssociativeExp (PCstNotAssociativeExp node)
    {
        if(_cst_not_associative_exp_ != null)
        {
            _cst_not_associative_exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_not_associative_exp_ = node;
    }
    public TModuloOp GetModuloOp ()
    {
        return _modulo_op_;
    }

    public void SetModuloOp (TModuloOp node)
    {
        if(_modulo_op_ != null)
        {
            _modulo_op_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _modulo_op_ = node;
    }
    public PCstLeafExp GetCstLeafExp ()
    {
        return _cst_leaf_exp_;
    }

    public void SetCstLeafExp (PCstLeafExp node)
    {
        if(_cst_leaf_exp_ != null)
        {
            _cst_leaf_exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_leaf_exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_cst_not_associative_exp_)
            + ToString (_modulo_op_)
            + ToString (_cst_leaf_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _cst_not_associative_exp_ == child )
        {
            _cst_not_associative_exp_ = null;
            return;
        }
        if ( _modulo_op_ == child )
        {
            _modulo_op_ = null;
            return;
        }
        if ( _cst_leaf_exp_ == child )
        {
            _cst_leaf_exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _cst_not_associative_exp_ == oldChild )
        {
            SetCstNotAssociativeExp ((PCstNotAssociativeExp) newChild);
            return;
        }
        if ( _modulo_op_ == oldChild )
        {
            SetModuloOp ((TModuloOp) newChild);
            return;
        }
        if ( _cst_leaf_exp_ == oldChild )
        {
            SetCstLeafExp ((PCstLeafExp) newChild);
            return;
        }
    }

}
public sealed class ACstNotAssociativeExp : PCstNotAssociativeExp
{
    private PCstLeafExp _cst_leaf_exp_;

    public ACstNotAssociativeExp ()
    {
    }

    public ACstNotAssociativeExp (
            PCstLeafExp _cst_leaf_exp_
    )
    {
        SetCstLeafExp (_cst_leaf_exp_);
    }

    public override Object Clone()
    {
        return new ACstNotAssociativeExp (
            (PCstLeafExp)CloneNode (_cst_leaf_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACstNotAssociativeExp(this);
    }

    public PCstLeafExp GetCstLeafExp ()
    {
        return _cst_leaf_exp_;
    }

    public void SetCstLeafExp (PCstLeafExp node)
    {
        if(_cst_leaf_exp_ != null)
        {
            _cst_leaf_exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_leaf_exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_cst_leaf_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _cst_leaf_exp_ == child )
        {
            _cst_leaf_exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _cst_leaf_exp_ == oldChild )
        {
            SetCstLeafExp ((PCstLeafExp) newChild);
            return;
        }
    }

}
public sealed class AParenCstLeafExp : PCstLeafExp
{
    private TLPar _l_par_;
    private PCstExpression _cst_expression_;
    private TRPar _r_par_;

    public AParenCstLeafExp ()
    {
    }

    public AParenCstLeafExp (
            TLPar _l_par_,
            PCstExpression _cst_expression_,
            TRPar _r_par_
    )
    {
        SetLPar (_l_par_);
        SetCstExpression (_cst_expression_);
        SetRPar (_r_par_);
    }

    public override Object Clone()
    {
        return new AParenCstLeafExp (
            (TLPar)CloneNode (_l_par_),
            (PCstExpression)CloneNode (_cst_expression_),
            (TRPar)CloneNode (_r_par_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAParenCstLeafExp(this);
    }

    public TLPar GetLPar ()
    {
        return _l_par_;
    }

    public void SetLPar (TLPar node)
    {
        if(_l_par_ != null)
        {
            _l_par_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_par_ = node;
    }
    public PCstExpression GetCstExpression ()
    {
        return _cst_expression_;
    }

    public void SetCstExpression (PCstExpression node)
    {
        if(_cst_expression_ != null)
        {
            _cst_expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_expression_ = node;
    }
    public TRPar GetRPar ()
    {
        return _r_par_;
    }

    public void SetRPar (TRPar node)
    {
        if(_r_par_ != null)
        {
            _r_par_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_par_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_l_par_)
            + ToString (_cst_expression_)
            + ToString (_r_par_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _l_par_ == child )
        {
            _l_par_ = null;
            return;
        }
        if ( _cst_expression_ == child )
        {
            _cst_expression_ = null;
            return;
        }
        if ( _r_par_ == child )
        {
            _r_par_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _l_par_ == oldChild )
        {
            SetLPar ((TLPar) newChild);
            return;
        }
        if ( _cst_expression_ == oldChild )
        {
            SetCstExpression ((PCstExpression) newChild);
            return;
        }
        if ( _r_par_ == oldChild )
        {
            SetRPar ((TRPar) newChild);
            return;
        }
    }

}
public sealed class ANumberCstLeafExp : PCstLeafExp
{
    private TNumber _number_;

    public ANumberCstLeafExp ()
    {
    }

    public ANumberCstLeafExp (
            TNumber _number_
    )
    {
        SetNumber (_number_);
    }

    public override Object Clone()
    {
        return new ANumberCstLeafExp (
            (TNumber)CloneNode (_number_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANumberCstLeafExp(this);
    }

    public TNumber GetNumber ()
    {
        return _number_;
    }

    public void SetNumber (TNumber node)
    {
        if(_number_ != null)
        {
            _number_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _number_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_number_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _number_ == child )
        {
            _number_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _number_ == oldChild )
        {
            SetNumber ((TNumber) newChild);
            return;
        }
    }

}
public sealed class ABoolCstLeafExp : PCstLeafExp
{
    private TBoolValue _bool_value_;

    public ABoolCstLeafExp ()
    {
    }

    public ABoolCstLeafExp (
            TBoolValue _bool_value_
    )
    {
        SetBoolValue (_bool_value_);
    }

    public override Object Clone()
    {
        return new ABoolCstLeafExp (
            (TBoolValue)CloneNode (_bool_value_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABoolCstLeafExp(this);
    }

    public TBoolValue GetBoolValue ()
    {
        return _bool_value_;
    }

    public void SetBoolValue (TBoolValue node)
    {
        if(_bool_value_ != null)
        {
            _bool_value_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _bool_value_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_bool_value_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _bool_value_ == child )
        {
            _bool_value_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _bool_value_ == oldChild )
        {
            SetBoolValue ((TBoolValue) newChild);
            return;
        }
    }

}
public sealed class AIdCstLeafExp : PCstLeafExp
{
    private TIdentifier _identifier_;

    public AIdCstLeafExp ()
    {
    }

    public AIdCstLeafExp (
            TIdentifier _identifier_
    )
    {
        SetIdentifier (_identifier_);
    }

    public override Object Clone()
    {
        return new AIdCstLeafExp (
            (TIdentifier)CloneNode (_identifier_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIdCstLeafExp(this);
    }

    public TIdentifier GetIdentifier ()
    {
        return _identifier_;
    }

    public void SetIdentifier (TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _identifier_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_identifier_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _identifier_ == child )
        {
            _identifier_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _identifier_ == oldChild )
        {
            SetIdentifier ((TIdentifier) newChild);
            return;
        }
    }

}
public sealed class AFuncCallCstLeafExp : PCstLeafExp
{
    private PCstFunctionCall _cst_function_call_;

    public AFuncCallCstLeafExp ()
    {
    }

    public AFuncCallCstLeafExp (
            PCstFunctionCall _cst_function_call_
    )
    {
        SetCstFunctionCall (_cst_function_call_);
    }

    public override Object Clone()
    {
        return new AFuncCallCstLeafExp (
            (PCstFunctionCall)CloneNode (_cst_function_call_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFuncCallCstLeafExp(this);
    }

    public PCstFunctionCall GetCstFunctionCall ()
    {
        return _cst_function_call_;
    }

    public void SetCstFunctionCall (PCstFunctionCall node)
    {
        if(_cst_function_call_ != null)
        {
            _cst_function_call_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_function_call_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_cst_function_call_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _cst_function_call_ == child )
        {
            _cst_function_call_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _cst_function_call_ == oldChild )
        {
            SetCstFunctionCall ((PCstFunctionCall) newChild);
            return;
        }
    }

}
public sealed class AVectorCstLeafExp : PCstLeafExp
{
    private PCstVectorValues _cst_vector_values_;

    public AVectorCstLeafExp ()
    {
    }

    public AVectorCstLeafExp (
            PCstVectorValues _cst_vector_values_
    )
    {
        SetCstVectorValues (_cst_vector_values_);
    }

    public override Object Clone()
    {
        return new AVectorCstLeafExp (
            (PCstVectorValues)CloneNode (_cst_vector_values_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVectorCstLeafExp(this);
    }

    public PCstVectorValues GetCstVectorValues ()
    {
        return _cst_vector_values_;
    }

    public void SetCstVectorValues (PCstVectorValues node)
    {
        if(_cst_vector_values_ != null)
        {
            _cst_vector_values_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _cst_vector_values_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_cst_vector_values_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _cst_vector_values_ == child )
        {
            _cst_vector_values_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _cst_vector_values_ == oldChild )
        {
            SetCstVectorValues ((PCstVectorValues) newChild);
            return;
        }
    }

}

public sealed class Start : Node
{
    private PCstProgram _base_;
    private EOF _eof_;

    public Start()
    {
    }

    public Start(
        PCstProgram _base_,
        EOF _eof_)
    {
        SetPCstProgram(_base_);
        SetEOF(_eof_);
    }

    public override Object Clone()
    {
        return new Start(
            (PCstProgram) CloneNode(_base_),
            (EOF) CloneNode(_eof_));
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseStart(this);
    }

    public PCstProgram GetPCstProgram()
    {
        return _base_;
    }
    public void SetPCstProgram(PCstProgram node)
    {
        if(_base_ != null)
        {
            _base_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _base_ = node;
    }

    public EOF GetEOF()
    {
        return _eof_;
    }
    public void SetEOF(EOF node)
    {
        if(_eof_ != null)
        {
            _eof_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eof_ = node;
    }

    internal override void RemoveChild(Node child)
    {
        if(_base_ == child)
        {
            _base_ = null;
            return;
        }

        if(_eof_ == child)
        {
            _eof_ = null;
            return;
        }
    }
    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if(_base_ == oldChild)
        {
            SetPCstProgram((PCstProgram) newChild);
            return;
        }

        if(_eof_ == oldChild)
        {
            SetEOF((EOF) newChild);
            return;
        }
    }

    public override string ToString()
    {
        return "" +
            ToString(_base_) +
            ToString(_eof_);
    }
}
}
