/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;

using  GGCodeParser.analysis;

namespace GGCodeParser.node {

public abstract class PExp : Node
{
}


public sealed class APlusExp : PExp
{
    private PExp _l_;
    private PExp _r_;

    public APlusExp ()
    {
    }

    public APlusExp (
            PExp _l_,
            PExp _r_
    )
    {
        SetL (_l_);
        SetR (_r_);
    }

    public override Object Clone()
    {
        return new APlusExp (
            (PExp)CloneNode (_l_),
            (PExp)CloneNode (_r_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPlusExp(this);
    }

    public PExp GetL ()
    {
        return _l_;
    }

    public void SetL (PExp node)
    {
        if(_l_ != null)
        {
            _l_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_ = node;
    }
    public PExp GetR ()
    {
        return _r_;
    }

    public void SetR (PExp node)
    {
        if(_r_ != null)
        {
            _r_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_l_)
            + ToString (_r_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _l_ == child )
        {
            _l_ = null;
            return;
        }
        if ( _r_ == child )
        {
            _r_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _l_ == oldChild )
        {
            SetL ((PExp) newChild);
            return;
        }
        if ( _r_ == oldChild )
        {
            SetR ((PExp) newChild);
            return;
        }
    }

}
public sealed class AMinusExp : PExp
{
    private PExp _l_;
    private PExp _r_;

    public AMinusExp ()
    {
    }

    public AMinusExp (
            PExp _l_,
            PExp _r_
    )
    {
        SetL (_l_);
        SetR (_r_);
    }

    public override Object Clone()
    {
        return new AMinusExp (
            (PExp)CloneNode (_l_),
            (PExp)CloneNode (_r_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMinusExp(this);
    }

    public PExp GetL ()
    {
        return _l_;
    }

    public void SetL (PExp node)
    {
        if(_l_ != null)
        {
            _l_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_ = node;
    }
    public PExp GetR ()
    {
        return _r_;
    }

    public void SetR (PExp node)
    {
        if(_r_ != null)
        {
            _r_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_l_)
            + ToString (_r_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _l_ == child )
        {
            _l_ = null;
            return;
        }
        if ( _r_ == child )
        {
            _r_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _l_ == oldChild )
        {
            SetL ((PExp) newChild);
            return;
        }
        if ( _r_ == oldChild )
        {
            SetR ((PExp) newChild);
            return;
        }
    }

}
public sealed class AMultExp : PExp
{
    private PExp _l_;
    private PExp _r_;

    public AMultExp ()
    {
    }

    public AMultExp (
            PExp _l_,
            PExp _r_
    )
    {
        SetL (_l_);
        SetR (_r_);
    }

    public override Object Clone()
    {
        return new AMultExp (
            (PExp)CloneNode (_l_),
            (PExp)CloneNode (_r_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultExp(this);
    }

    public PExp GetL ()
    {
        return _l_;
    }

    public void SetL (PExp node)
    {
        if(_l_ != null)
        {
            _l_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_ = node;
    }
    public PExp GetR ()
    {
        return _r_;
    }

    public void SetR (PExp node)
    {
        if(_r_ != null)
        {
            _r_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_l_)
            + ToString (_r_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _l_ == child )
        {
            _l_ = null;
            return;
        }
        if ( _r_ == child )
        {
            _r_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _l_ == oldChild )
        {
            SetL ((PExp) newChild);
            return;
        }
        if ( _r_ == oldChild )
        {
            SetR ((PExp) newChild);
            return;
        }
    }

}
public sealed class ADivdExp : PExp
{
    private PExp _l_;
    private PExp _r_;

    public ADivdExp ()
    {
    }

    public ADivdExp (
            PExp _l_,
            PExp _r_
    )
    {
        SetL (_l_);
        SetR (_r_);
    }

    public override Object Clone()
    {
        return new ADivdExp (
            (PExp)CloneNode (_l_),
            (PExp)CloneNode (_r_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADivdExp(this);
    }

    public PExp GetL ()
    {
        return _l_;
    }

    public void SetL (PExp node)
    {
        if(_l_ != null)
        {
            _l_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_ = node;
    }
    public PExp GetR ()
    {
        return _r_;
    }

    public void SetR (PExp node)
    {
        if(_r_ != null)
        {
            _r_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_l_)
            + ToString (_r_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _l_ == child )
        {
            _l_ = null;
            return;
        }
        if ( _r_ == child )
        {
            _r_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _l_ == oldChild )
        {
            SetL ((PExp) newChild);
            return;
        }
        if ( _r_ == oldChild )
        {
            SetR ((PExp) newChild);
            return;
        }
    }

}
public sealed class AIdExp : PExp
{
    private TId _id_;

    public AIdExp ()
    {
    }

    public AIdExp (
            TId _id_
    )
    {
        SetId (_id_);
    }

    public override Object Clone()
    {
        return new AIdExp (
            (TId)CloneNode (_id_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIdExp(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
    }

}
public sealed class ANumberExp : PExp
{
    private TNumber _number_;

    public ANumberExp ()
    {
    }

    public ANumberExp (
            TNumber _number_
    )
    {
        SetNumber (_number_);
    }

    public override Object Clone()
    {
        return new ANumberExp (
            (TNumber)CloneNode (_number_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANumberExp(this);
    }

    public TNumber GetNumber ()
    {
        return _number_;
    }

    public void SetNumber (TNumber node)
    {
        if(_number_ != null)
        {
            _number_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _number_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_number_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _number_ == child )
        {
            _number_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _number_ == oldChild )
        {
            SetNumber ((TNumber) newChild);
            return;
        }
    }

}

public sealed class Start : Node
{
    private PExp _base_;
    private EOF _eof_;

    public Start()
    {
    }

    public Start(
        PExp _base_,
        EOF _eof_)
    {
        SetPExp(_base_);
        SetEOF(_eof_);
    }

    public override Object Clone()
    {
        return new Start(
            (PExp) CloneNode(_base_),
            (EOF) CloneNode(_eof_));
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseStart(this);
    }

    public PExp GetPExp()
    {
        return _base_;
    }
    public void SetPExp(PExp node)
    {
        if(_base_ != null)
        {
            _base_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _base_ = node;
    }

    public EOF GetEOF()
    {
        return _eof_;
    }
    public void SetEOF(EOF node)
    {
        if(_eof_ != null)
        {
            _eof_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eof_ = node;
    }

    internal override void RemoveChild(Node child)
    {
        if(_base_ == child)
        {
            _base_ = null;
            return;
        }

        if(_eof_ == child)
        {
            _eof_ = null;
            return;
        }
    }
    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if(_base_ == oldChild)
        {
            SetPExp((PExp) newChild);
            return;
        }

        if(_eof_ == oldChild)
        {
            SetEOF((EOF) newChild);
            return;
        }
    }

    public override string ToString()
    {
        return "" +
            ToString(_base_) +
            ToString(_eof_);
    }
}
}
