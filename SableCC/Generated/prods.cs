/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;

using  GOATCode.analysis;

namespace GOATCode.node {

public abstract class PProgram : Node
{
}

public abstract class PDecl : Node
{
}

public abstract class PTypes : Node
{
}

public abstract class PBlock : Node
{
}

public abstract class PStmt : Node
{
}

public abstract class PExp : Node
{
}


public sealed class ADeclProgram : PProgram
{
    private TypedList _decl_;

    public ADeclProgram ()
    {
        this._decl_ = new TypedList(new Decl_Cast(this));
    }

    public ADeclProgram (
            IList _decl_
    )
    {
        this._decl_ = new TypedList(new Decl_Cast(this));
        this._decl_.Clear();
        this._decl_.AddAll(_decl_);
    }

    public override Object Clone()
    {
        return new ADeclProgram (
            CloneList (_decl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeclProgram(this);
    }

    public IList GetDecl ()
    {
        return _decl_;
    }

    public void setDecl (IList list)
    {
        _decl_.Clear();
        _decl_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_decl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _decl_.Contains(child) )
        {
            _decl_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        for ( int i = 0; i < _decl_.Count; i++ )
        {
            Node n = (Node)_decl_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _decl_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _decl_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class Decl_Cast : Cast
    {
        ADeclProgram obj;

        internal Decl_Cast (ADeclProgram obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PDecl node = (PDecl) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PDecl node = (PDecl) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AVardeclDecl : PDecl
{
    private TConst _const_;
    private PTypes _types_;
    private TId _id_;
    private PExp _exp_;

    public AVardeclDecl ()
    {
    }

    public AVardeclDecl (
            TConst _const_,
            PTypes _types_,
            TId _id_,
            PExp _exp_
    )
    {
        SetConst (_const_);
        SetTypes (_types_);
        SetId (_id_);
        SetExp (_exp_);
    }

    public override Object Clone()
    {
        return new AVardeclDecl (
            (TConst)CloneNode (_const_),
            (PTypes)CloneNode (_types_),
            (TId)CloneNode (_id_),
            (PExp)CloneNode (_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVardeclDecl(this);
    }

    public TConst GetConst ()
    {
        return _const_;
    }

    public void SetConst (TConst node)
    {
        if(_const_ != null)
        {
            _const_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _const_ = node;
    }
    public PTypes GetTypes ()
    {
        return _types_;
    }

    public void SetTypes (PTypes node)
    {
        if(_types_ != null)
        {
            _types_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _types_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_const_)
            + ToString (_types_)
            + ToString (_id_)
            + ToString (_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _const_ == child )
        {
            _const_ = null;
            return;
        }
        if ( _types_ == child )
        {
            _types_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _const_ == oldChild )
        {
            SetConst ((TConst) newChild);
            return;
        }
        if ( _types_ == oldChild )
        {
            SetTypes ((PTypes) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
    }

}
public sealed class AFuncdeclDecl : PDecl
{
    private PTypes _types_;
    private TId _id_;
    private TypedList _decl_;
    private PBlock _block_;

    public AFuncdeclDecl ()
    {
        this._decl_ = new TypedList(new Decl_Cast(this));
    }

    public AFuncdeclDecl (
            PTypes _types_,
            TId _id_,
            IList _decl_,
            PBlock _block_
    )
    {
        SetTypes (_types_);
        SetId (_id_);
        this._decl_ = new TypedList(new Decl_Cast(this));
        this._decl_.Clear();
        this._decl_.AddAll(_decl_);
        SetBlock (_block_);
    }

    public override Object Clone()
    {
        return new AFuncdeclDecl (
            (PTypes)CloneNode (_types_),
            (TId)CloneNode (_id_),
            CloneList (_decl_),
            (PBlock)CloneNode (_block_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFuncdeclDecl(this);
    }

    public PTypes GetTypes ()
    {
        return _types_;
    }

    public void SetTypes (PTypes node)
    {
        if(_types_ != null)
        {
            _types_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _types_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public IList GetDecl ()
    {
        return _decl_;
    }

    public void setDecl (IList list)
    {
        _decl_.Clear();
        _decl_.AddAll(list);
    }
    public PBlock GetBlock ()
    {
        return _block_;
    }

    public void SetBlock (PBlock node)
    {
        if(_block_ != null)
        {
            _block_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _block_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_types_)
            + ToString (_id_)
            + ToString (_decl_)
            + ToString (_block_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _types_ == child )
        {
            _types_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _decl_.Contains(child) )
        {
            _decl_.Remove(child);
            return;
        }
        if ( _block_ == child )
        {
            _block_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _types_ == oldChild )
        {
            SetTypes ((PTypes) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        for ( int i = 0; i < _decl_.Count; i++ )
        {
            Node n = (Node)_decl_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _decl_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _decl_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _block_ == oldChild )
        {
            SetBlock ((PBlock) newChild);
            return;
        }
    }

    private class Decl_Cast : Cast
    {
        AFuncdeclDecl obj;

        internal Decl_Cast (AFuncdeclDecl obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PDecl node = (PDecl) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PDecl node = (PDecl) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AProcdeclDecl : PDecl
{
    private TId _id_;
    private TypedList _decl_;
    private PBlock _block_;

    public AProcdeclDecl ()
    {
        this._decl_ = new TypedList(new Decl_Cast(this));
    }

    public AProcdeclDecl (
            TId _id_,
            IList _decl_,
            PBlock _block_
    )
    {
        SetId (_id_);
        this._decl_ = new TypedList(new Decl_Cast(this));
        this._decl_.Clear();
        this._decl_.AddAll(_decl_);
        SetBlock (_block_);
    }

    public override Object Clone()
    {
        return new AProcdeclDecl (
            (TId)CloneNode (_id_),
            CloneList (_decl_),
            (PBlock)CloneNode (_block_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAProcdeclDecl(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public IList GetDecl ()
    {
        return _decl_;
    }

    public void setDecl (IList list)
    {
        _decl_.Clear();
        _decl_.AddAll(list);
    }
    public PBlock GetBlock ()
    {
        return _block_;
    }

    public void SetBlock (PBlock node)
    {
        if(_block_ != null)
        {
            _block_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _block_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_decl_)
            + ToString (_block_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _decl_.Contains(child) )
        {
            _decl_.Remove(child);
            return;
        }
        if ( _block_ == child )
        {
            _block_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        for ( int i = 0; i < _decl_.Count; i++ )
        {
            Node n = (Node)_decl_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _decl_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _decl_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
        if ( _block_ == oldChild )
        {
            SetBlock ((PBlock) newChild);
            return;
        }
    }

    private class Decl_Cast : Cast
    {
        AProcdeclDecl obj;

        internal Decl_Cast (AProcdeclDecl obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PDecl node = (PDecl) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PDecl node = (PDecl) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AIntTypes : PTypes
{


    public AIntTypes (
    )
    {
    }

    public override Object Clone()
    {
        return new AIntTypes (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIntTypes(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AFloatTypes : PTypes
{


    public AFloatTypes (
    )
    {
    }

    public override Object Clone()
    {
        return new AFloatTypes (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFloatTypes(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class ABoolTypes : PTypes
{


    public ABoolTypes (
    )
    {
    }

    public override Object Clone()
    {
        return new ABoolTypes (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABoolTypes(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AVectorTypes : PTypes
{


    public AVectorTypes (
    )
    {
    }

    public override Object Clone()
    {
        return new AVectorTypes (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVectorTypes(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AStmtlistBlock : PBlock
{
    private TypedList _stmt_;

    public AStmtlistBlock ()
    {
        this._stmt_ = new TypedList(new Stmt_Cast(this));
    }

    public AStmtlistBlock (
            IList _stmt_
    )
    {
        this._stmt_ = new TypedList(new Stmt_Cast(this));
        this._stmt_.Clear();
        this._stmt_.AddAll(_stmt_);
    }

    public override Object Clone()
    {
        return new AStmtlistBlock (
            CloneList (_stmt_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStmtlistBlock(this);
    }

    public IList GetStmt ()
    {
        return _stmt_;
    }

    public void setStmt (IList list)
    {
        _stmt_.Clear();
        _stmt_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_stmt_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _stmt_.Contains(child) )
        {
            _stmt_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        for ( int i = 0; i < _stmt_.Count; i++ )
        {
            Node n = (Node)_stmt_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _stmt_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _stmt_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class Stmt_Cast : Cast
    {
        AStmtlistBlock obj;

        internal Stmt_Cast (AStmtlistBlock obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PStmt node = (PStmt) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PStmt node = (PStmt) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class ADeclStmt : PStmt
{
    private PDecl _decl_;

    public ADeclStmt ()
    {
    }

    public ADeclStmt (
            PDecl _decl_
    )
    {
        SetDecl (_decl_);
    }

    public override Object Clone()
    {
        return new ADeclStmt (
            (PDecl)CloneNode (_decl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeclStmt(this);
    }

    public PDecl GetDecl ()
    {
        return _decl_;
    }

    public void SetDecl (PDecl node)
    {
        if(_decl_ != null)
        {
            _decl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _decl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_decl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _decl_ == child )
        {
            _decl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _decl_ == oldChild )
        {
            SetDecl ((PDecl) newChild);
            return;
        }
    }

}
public sealed class AIfStmt : PStmt
{
    private PExp _exp_;
    private PBlock _then_;
    private PBlock _else_;

    public AIfStmt ()
    {
    }

    public AIfStmt (
            PExp _exp_,
            PBlock _then_,
            PBlock _else_
    )
    {
        SetExp (_exp_);
        SetThen (_then_);
        SetElse (_else_);
    }

    public override Object Clone()
    {
        return new AIfStmt (
            (PExp)CloneNode (_exp_),
            (PBlock)CloneNode (_then_),
            (PBlock)CloneNode (_else_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIfStmt(this);
    }

    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }
    public PBlock GetThen ()
    {
        return _then_;
    }

    public void SetThen (PBlock node)
    {
        if(_then_ != null)
        {
            _then_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _then_ = node;
    }
    public PBlock GetElse ()
    {
        return _else_;
    }

    public void SetElse (PBlock node)
    {
        if(_else_ != null)
        {
            _else_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _else_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_exp_)
            + ToString (_then_)
            + ToString (_else_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
        if ( _then_ == child )
        {
            _then_ = null;
            return;
        }
        if ( _else_ == child )
        {
            _else_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
        if ( _then_ == oldChild )
        {
            SetThen ((PBlock) newChild);
            return;
        }
        if ( _else_ == oldChild )
        {
            SetElse ((PBlock) newChild);
            return;
        }
    }

}
public sealed class ARepeatStmt : PStmt
{
    private PExp _exp_;
    private PBlock _block_;

    public ARepeatStmt ()
    {
    }

    public ARepeatStmt (
            PExp _exp_,
            PBlock _block_
    )
    {
        SetExp (_exp_);
        SetBlock (_block_);
    }

    public override Object Clone()
    {
        return new ARepeatStmt (
            (PExp)CloneNode (_exp_),
            (PBlock)CloneNode (_block_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseARepeatStmt(this);
    }

    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }
    public PBlock GetBlock ()
    {
        return _block_;
    }

    public void SetBlock (PBlock node)
    {
        if(_block_ != null)
        {
            _block_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _block_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_exp_)
            + ToString (_block_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
        if ( _block_ == child )
        {
            _block_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
        if ( _block_ == oldChild )
        {
            SetBlock ((PBlock) newChild);
            return;
        }
    }

}
public sealed class AWhileStmt : PStmt
{
    private PExp _exp_;
    private PBlock _block_;

    public AWhileStmt ()
    {
    }

    public AWhileStmt (
            PExp _exp_,
            PBlock _block_
    )
    {
        SetExp (_exp_);
        SetBlock (_block_);
    }

    public override Object Clone()
    {
        return new AWhileStmt (
            (PExp)CloneNode (_exp_),
            (PBlock)CloneNode (_block_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAWhileStmt(this);
    }

    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }
    public PBlock GetBlock ()
    {
        return _block_;
    }

    public void SetBlock (PBlock node)
    {
        if(_block_ != null)
        {
            _block_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _block_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_exp_)
            + ToString (_block_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
        if ( _block_ == child )
        {
            _block_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
        if ( _block_ == oldChild )
        {
            SetBlock ((PBlock) newChild);
            return;
        }
    }

}
public sealed class AGcodeStmt : PStmt
{
    private TAllCharsExceptCurly _all_chars_except_curly_;

    public AGcodeStmt ()
    {
    }

    public AGcodeStmt (
            TAllCharsExceptCurly _all_chars_except_curly_
    )
    {
        SetAllCharsExceptCurly (_all_chars_except_curly_);
    }

    public override Object Clone()
    {
        return new AGcodeStmt (
            (TAllCharsExceptCurly)CloneNode (_all_chars_except_curly_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGcodeStmt(this);
    }

    public TAllCharsExceptCurly GetAllCharsExceptCurly ()
    {
        return _all_chars_except_curly_;
    }

    public void SetAllCharsExceptCurly (TAllCharsExceptCurly node)
    {
        if(_all_chars_except_curly_ != null)
        {
            _all_chars_except_curly_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _all_chars_except_curly_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_all_chars_except_curly_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _all_chars_except_curly_ == child )
        {
            _all_chars_except_curly_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _all_chars_except_curly_ == oldChild )
        {
            SetAllCharsExceptCurly ((TAllCharsExceptCurly) newChild);
            return;
        }
    }

}
public sealed class AAssignStmt : PStmt
{
    private TId _id_;
    private PExp _exp_;

    public AAssignStmt ()
    {
    }

    public AAssignStmt (
            TId _id_,
            PExp _exp_
    )
    {
        SetId (_id_);
        SetExp (_exp_);
    }

    public override Object Clone()
    {
        return new AAssignStmt (
            (TId)CloneNode (_id_),
            (PExp)CloneNode (_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignStmt(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
    }

}
public sealed class AAssignPlusStmt : PStmt
{
    private TId _id_;
    private PExp _exp_;

    public AAssignPlusStmt ()
    {
    }

    public AAssignPlusStmt (
            TId _id_,
            PExp _exp_
    )
    {
        SetId (_id_);
        SetExp (_exp_);
    }

    public override Object Clone()
    {
        return new AAssignPlusStmt (
            (TId)CloneNode (_id_),
            (PExp)CloneNode (_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignPlusStmt(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
    }

}
public sealed class AAssignMinusStmt : PStmt
{
    private TId _id_;
    private PExp _exp_;

    public AAssignMinusStmt ()
    {
    }

    public AAssignMinusStmt (
            TId _id_,
            PExp _exp_
    )
    {
        SetId (_id_);
        SetExp (_exp_);
    }

    public override Object Clone()
    {
        return new AAssignMinusStmt (
            (TId)CloneNode (_id_),
            (PExp)CloneNode (_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignMinusStmt(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
    }

}
public sealed class AAssignMultStmt : PStmt
{
    private TId _id_;
    private PExp _exp_;

    public AAssignMultStmt ()
    {
    }

    public AAssignMultStmt (
            TId _id_,
            PExp _exp_
    )
    {
        SetId (_id_);
        SetExp (_exp_);
    }

    public override Object Clone()
    {
        return new AAssignMultStmt (
            (TId)CloneNode (_id_),
            (PExp)CloneNode (_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignMultStmt(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
    }

}
public sealed class AAssignDivisionStmt : PStmt
{
    private TId _id_;
    private PExp _exp_;

    public AAssignDivisionStmt ()
    {
    }

    public AAssignDivisionStmt (
            TId _id_,
            PExp _exp_
    )
    {
        SetId (_id_);
        SetExp (_exp_);
    }

    public override Object Clone()
    {
        return new AAssignDivisionStmt (
            (TId)CloneNode (_id_),
            (PExp)CloneNode (_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignDivisionStmt(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
    }

}
public sealed class AAssignModStmt : PStmt
{
    private TId _id_;
    private PExp _exp_;

    public AAssignModStmt ()
    {
    }

    public AAssignModStmt (
            TId _id_,
            PExp _exp_
    )
    {
        SetId (_id_);
        SetExp (_exp_);
    }

    public override Object Clone()
    {
        return new AAssignModStmt (
            (TId)CloneNode (_id_),
            (PExp)CloneNode (_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignModStmt(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
    }

}
public sealed class AFunctionStmt : PStmt
{
    private PExp _exp_;

    public AFunctionStmt ()
    {
    }

    public AFunctionStmt (
            PExp _exp_
    )
    {
        SetExp (_exp_);
    }

    public override Object Clone()
    {
        return new AFunctionStmt (
            (PExp)CloneNode (_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFunctionStmt(this);
    }

    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
    }

}
public sealed class AReturnStmt : PStmt
{
    private PExp _exp_;

    public AReturnStmt ()
    {
    }

    public AReturnStmt (
            PExp _exp_
    )
    {
        SetExp (_exp_);
    }

    public override Object Clone()
    {
        return new AReturnStmt (
            (PExp)CloneNode (_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAReturnStmt(this);
    }

    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
    }

}
public sealed class ABuildStmt : PStmt
{
    private PBlock _block_;

    public ABuildStmt ()
    {
    }

    public ABuildStmt (
            PBlock _block_
    )
    {
        SetBlock (_block_);
    }

    public override Object Clone()
    {
        return new ABuildStmt (
            (PBlock)CloneNode (_block_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABuildStmt(this);
    }

    public PBlock GetBlock ()
    {
        return _block_;
    }

    public void SetBlock (PBlock node)
    {
        if(_block_ != null)
        {
            _block_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _block_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_block_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _block_ == child )
        {
            _block_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _block_ == oldChild )
        {
            SetBlock ((PBlock) newChild);
            return;
        }
    }

}
public sealed class AWalkStmt : PStmt
{
    private PBlock _block_;

    public AWalkStmt ()
    {
    }

    public AWalkStmt (
            PBlock _block_
    )
    {
        SetBlock (_block_);
    }

    public override Object Clone()
    {
        return new AWalkStmt (
            (PBlock)CloneNode (_block_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAWalkStmt(this);
    }

    public PBlock GetBlock ()
    {
        return _block_;
    }

    public void SetBlock (PBlock node)
    {
        if(_block_ != null)
        {
            _block_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _block_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_block_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _block_ == child )
        {
            _block_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _block_ == oldChild )
        {
            SetBlock ((PBlock) newChild);
            return;
        }
    }

}
public sealed class AVectorExp : PExp
{
    private PExp _x_;
    private PExp _y_;
    private PExp _z_;

    public AVectorExp ()
    {
    }

    public AVectorExp (
            PExp _x_,
            PExp _y_,
            PExp _z_
    )
    {
        SetX (_x_);
        SetY (_y_);
        SetZ (_z_);
    }

    public override Object Clone()
    {
        return new AVectorExp (
            (PExp)CloneNode (_x_),
            (PExp)CloneNode (_y_),
            (PExp)CloneNode (_z_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVectorExp(this);
    }

    public PExp GetX ()
    {
        return _x_;
    }

    public void SetX (PExp node)
    {
        if(_x_ != null)
        {
            _x_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _x_ = node;
    }
    public PExp GetY ()
    {
        return _y_;
    }

    public void SetY (PExp node)
    {
        if(_y_ != null)
        {
            _y_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _y_ = node;
    }
    public PExp GetZ ()
    {
        return _z_;
    }

    public void SetZ (PExp node)
    {
        if(_z_ != null)
        {
            _z_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _z_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_x_)
            + ToString (_y_)
            + ToString (_z_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _x_ == child )
        {
            _x_ = null;
            return;
        }
        if ( _y_ == child )
        {
            _y_ = null;
            return;
        }
        if ( _z_ == child )
        {
            _z_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _x_ == oldChild )
        {
            SetX ((PExp) newChild);
            return;
        }
        if ( _y_ == oldChild )
        {
            SetY ((PExp) newChild);
            return;
        }
        if ( _z_ == oldChild )
        {
            SetZ ((PExp) newChild);
            return;
        }
    }

}
public sealed class APlusExp : PExp
{
    private PExp _l_;
    private PExp _r_;

    public APlusExp ()
    {
    }

    public APlusExp (
            PExp _l_,
            PExp _r_
    )
    {
        SetL (_l_);
        SetR (_r_);
    }

    public override Object Clone()
    {
        return new APlusExp (
            (PExp)CloneNode (_l_),
            (PExp)CloneNode (_r_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPlusExp(this);
    }

    public PExp GetL ()
    {
        return _l_;
    }

    public void SetL (PExp node)
    {
        if(_l_ != null)
        {
            _l_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_ = node;
    }
    public PExp GetR ()
    {
        return _r_;
    }

    public void SetR (PExp node)
    {
        if(_r_ != null)
        {
            _r_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_l_)
            + ToString (_r_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _l_ == child )
        {
            _l_ = null;
            return;
        }
        if ( _r_ == child )
        {
            _r_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _l_ == oldChild )
        {
            SetL ((PExp) newChild);
            return;
        }
        if ( _r_ == oldChild )
        {
            SetR ((PExp) newChild);
            return;
        }
    }

}
public sealed class AMinusExp : PExp
{
    private PExp _l_;
    private PExp _r_;

    public AMinusExp ()
    {
    }

    public AMinusExp (
            PExp _l_,
            PExp _r_
    )
    {
        SetL (_l_);
        SetR (_r_);
    }

    public override Object Clone()
    {
        return new AMinusExp (
            (PExp)CloneNode (_l_),
            (PExp)CloneNode (_r_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMinusExp(this);
    }

    public PExp GetL ()
    {
        return _l_;
    }

    public void SetL (PExp node)
    {
        if(_l_ != null)
        {
            _l_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_ = node;
    }
    public PExp GetR ()
    {
        return _r_;
    }

    public void SetR (PExp node)
    {
        if(_r_ != null)
        {
            _r_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_l_)
            + ToString (_r_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _l_ == child )
        {
            _l_ = null;
            return;
        }
        if ( _r_ == child )
        {
            _r_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _l_ == oldChild )
        {
            SetL ((PExp) newChild);
            return;
        }
        if ( _r_ == oldChild )
        {
            SetR ((PExp) newChild);
            return;
        }
    }

}
public sealed class AMultExp : PExp
{
    private PExp _l_;
    private PExp _r_;

    public AMultExp ()
    {
    }

    public AMultExp (
            PExp _l_,
            PExp _r_
    )
    {
        SetL (_l_);
        SetR (_r_);
    }

    public override Object Clone()
    {
        return new AMultExp (
            (PExp)CloneNode (_l_),
            (PExp)CloneNode (_r_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultExp(this);
    }

    public PExp GetL ()
    {
        return _l_;
    }

    public void SetL (PExp node)
    {
        if(_l_ != null)
        {
            _l_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_ = node;
    }
    public PExp GetR ()
    {
        return _r_;
    }

    public void SetR (PExp node)
    {
        if(_r_ != null)
        {
            _r_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_l_)
            + ToString (_r_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _l_ == child )
        {
            _l_ = null;
            return;
        }
        if ( _r_ == child )
        {
            _r_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _l_ == oldChild )
        {
            SetL ((PExp) newChild);
            return;
        }
        if ( _r_ == oldChild )
        {
            SetR ((PExp) newChild);
            return;
        }
    }

}
public sealed class ADivdExp : PExp
{
    private PExp _l_;
    private PExp _r_;

    public ADivdExp ()
    {
    }

    public ADivdExp (
            PExp _l_,
            PExp _r_
    )
    {
        SetL (_l_);
        SetR (_r_);
    }

    public override Object Clone()
    {
        return new ADivdExp (
            (PExp)CloneNode (_l_),
            (PExp)CloneNode (_r_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADivdExp(this);
    }

    public PExp GetL ()
    {
        return _l_;
    }

    public void SetL (PExp node)
    {
        if(_l_ != null)
        {
            _l_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_ = node;
    }
    public PExp GetR ()
    {
        return _r_;
    }

    public void SetR (PExp node)
    {
        if(_r_ != null)
        {
            _r_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_l_)
            + ToString (_r_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _l_ == child )
        {
            _l_ = null;
            return;
        }
        if ( _r_ == child )
        {
            _r_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _l_ == oldChild )
        {
            SetL ((PExp) newChild);
            return;
        }
        if ( _r_ == oldChild )
        {
            SetR ((PExp) newChild);
            return;
        }
    }

}
public sealed class AModuloExp : PExp
{
    private PExp _l_;
    private PExp _r_;

    public AModuloExp ()
    {
    }

    public AModuloExp (
            PExp _l_,
            PExp _r_
    )
    {
        SetL (_l_);
        SetR (_r_);
    }

    public override Object Clone()
    {
        return new AModuloExp (
            (PExp)CloneNode (_l_),
            (PExp)CloneNode (_r_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAModuloExp(this);
    }

    public PExp GetL ()
    {
        return _l_;
    }

    public void SetL (PExp node)
    {
        if(_l_ != null)
        {
            _l_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_ = node;
    }
    public PExp GetR ()
    {
        return _r_;
    }

    public void SetR (PExp node)
    {
        if(_r_ != null)
        {
            _r_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_l_)
            + ToString (_r_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _l_ == child )
        {
            _l_ = null;
            return;
        }
        if ( _r_ == child )
        {
            _r_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _l_ == oldChild )
        {
            SetL ((PExp) newChild);
            return;
        }
        if ( _r_ == oldChild )
        {
            SetR ((PExp) newChild);
            return;
        }
    }

}
public sealed class AAndExp : PExp
{
    private PExp _l_;
    private PExp _r_;

    public AAndExp ()
    {
    }

    public AAndExp (
            PExp _l_,
            PExp _r_
    )
    {
        SetL (_l_);
        SetR (_r_);
    }

    public override Object Clone()
    {
        return new AAndExp (
            (PExp)CloneNode (_l_),
            (PExp)CloneNode (_r_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAndExp(this);
    }

    public PExp GetL ()
    {
        return _l_;
    }

    public void SetL (PExp node)
    {
        if(_l_ != null)
        {
            _l_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_ = node;
    }
    public PExp GetR ()
    {
        return _r_;
    }

    public void SetR (PExp node)
    {
        if(_r_ != null)
        {
            _r_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_l_)
            + ToString (_r_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _l_ == child )
        {
            _l_ = null;
            return;
        }
        if ( _r_ == child )
        {
            _r_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _l_ == oldChild )
        {
            SetL ((PExp) newChild);
            return;
        }
        if ( _r_ == oldChild )
        {
            SetR ((PExp) newChild);
            return;
        }
    }

}
public sealed class AOrExp : PExp
{
    private PExp _l_;
    private PExp _r_;

    public AOrExp ()
    {
    }

    public AOrExp (
            PExp _l_,
            PExp _r_
    )
    {
        SetL (_l_);
        SetR (_r_);
    }

    public override Object Clone()
    {
        return new AOrExp (
            (PExp)CloneNode (_l_),
            (PExp)CloneNode (_r_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOrExp(this);
    }

    public PExp GetL ()
    {
        return _l_;
    }

    public void SetL (PExp node)
    {
        if(_l_ != null)
        {
            _l_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_ = node;
    }
    public PExp GetR ()
    {
        return _r_;
    }

    public void SetR (PExp node)
    {
        if(_r_ != null)
        {
            _r_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_l_)
            + ToString (_r_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _l_ == child )
        {
            _l_ = null;
            return;
        }
        if ( _r_ == child )
        {
            _r_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _l_ == oldChild )
        {
            SetL ((PExp) newChild);
            return;
        }
        if ( _r_ == oldChild )
        {
            SetR ((PExp) newChild);
            return;
        }
    }

}
public sealed class AEqExp : PExp
{
    private PExp _l_;
    private PExp _r_;

    public AEqExp ()
    {
    }

    public AEqExp (
            PExp _l_,
            PExp _r_
    )
    {
        SetL (_l_);
        SetR (_r_);
    }

    public override Object Clone()
    {
        return new AEqExp (
            (PExp)CloneNode (_l_),
            (PExp)CloneNode (_r_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAEqExp(this);
    }

    public PExp GetL ()
    {
        return _l_;
    }

    public void SetL (PExp node)
    {
        if(_l_ != null)
        {
            _l_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_ = node;
    }
    public PExp GetR ()
    {
        return _r_;
    }

    public void SetR (PExp node)
    {
        if(_r_ != null)
        {
            _r_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_l_)
            + ToString (_r_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _l_ == child )
        {
            _l_ = null;
            return;
        }
        if ( _r_ == child )
        {
            _r_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _l_ == oldChild )
        {
            SetL ((PExp) newChild);
            return;
        }
        if ( _r_ == oldChild )
        {
            SetR ((PExp) newChild);
            return;
        }
    }

}
public sealed class ALtExp : PExp
{
    private PExp _l_;
    private PExp _r_;

    public ALtExp ()
    {
    }

    public ALtExp (
            PExp _l_,
            PExp _r_
    )
    {
        SetL (_l_);
        SetR (_r_);
    }

    public override Object Clone()
    {
        return new ALtExp (
            (PExp)CloneNode (_l_),
            (PExp)CloneNode (_r_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALtExp(this);
    }

    public PExp GetL ()
    {
        return _l_;
    }

    public void SetL (PExp node)
    {
        if(_l_ != null)
        {
            _l_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_ = node;
    }
    public PExp GetR ()
    {
        return _r_;
    }

    public void SetR (PExp node)
    {
        if(_r_ != null)
        {
            _r_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_l_)
            + ToString (_r_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _l_ == child )
        {
            _l_ = null;
            return;
        }
        if ( _r_ == child )
        {
            _r_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _l_ == oldChild )
        {
            SetL ((PExp) newChild);
            return;
        }
        if ( _r_ == oldChild )
        {
            SetR ((PExp) newChild);
            return;
        }
    }

}
public sealed class ALeqExp : PExp
{
    private PExp _l_;
    private PExp _r_;

    public ALeqExp ()
    {
    }

    public ALeqExp (
            PExp _l_,
            PExp _r_
    )
    {
        SetL (_l_);
        SetR (_r_);
    }

    public override Object Clone()
    {
        return new ALeqExp (
            (PExp)CloneNode (_l_),
            (PExp)CloneNode (_r_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALeqExp(this);
    }

    public PExp GetL ()
    {
        return _l_;
    }

    public void SetL (PExp node)
    {
        if(_l_ != null)
        {
            _l_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_ = node;
    }
    public PExp GetR ()
    {
        return _r_;
    }

    public void SetR (PExp node)
    {
        if(_r_ != null)
        {
            _r_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_l_)
            + ToString (_r_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _l_ == child )
        {
            _l_ = null;
            return;
        }
        if ( _r_ == child )
        {
            _r_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _l_ == oldChild )
        {
            SetL ((PExp) newChild);
            return;
        }
        if ( _r_ == oldChild )
        {
            SetR ((PExp) newChild);
            return;
        }
    }

}
public sealed class AGtExp : PExp
{
    private PExp _l_;
    private PExp _r_;

    public AGtExp ()
    {
    }

    public AGtExp (
            PExp _l_,
            PExp _r_
    )
    {
        SetL (_l_);
        SetR (_r_);
    }

    public override Object Clone()
    {
        return new AGtExp (
            (PExp)CloneNode (_l_),
            (PExp)CloneNode (_r_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGtExp(this);
    }

    public PExp GetL ()
    {
        return _l_;
    }

    public void SetL (PExp node)
    {
        if(_l_ != null)
        {
            _l_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_ = node;
    }
    public PExp GetR ()
    {
        return _r_;
    }

    public void SetR (PExp node)
    {
        if(_r_ != null)
        {
            _r_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_l_)
            + ToString (_r_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _l_ == child )
        {
            _l_ = null;
            return;
        }
        if ( _r_ == child )
        {
            _r_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _l_ == oldChild )
        {
            SetL ((PExp) newChild);
            return;
        }
        if ( _r_ == oldChild )
        {
            SetR ((PExp) newChild);
            return;
        }
    }

}
public sealed class AGeqExp : PExp
{
    private PExp _l_;
    private PExp _r_;

    public AGeqExp ()
    {
    }

    public AGeqExp (
            PExp _l_,
            PExp _r_
    )
    {
        SetL (_l_);
        SetR (_r_);
    }

    public override Object Clone()
    {
        return new AGeqExp (
            (PExp)CloneNode (_l_),
            (PExp)CloneNode (_r_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGeqExp(this);
    }

    public PExp GetL ()
    {
        return _l_;
    }

    public void SetL (PExp node)
    {
        if(_l_ != null)
        {
            _l_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_ = node;
    }
    public PExp GetR ()
    {
        return _r_;
    }

    public void SetR (PExp node)
    {
        if(_r_ != null)
        {
            _r_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_l_)
            + ToString (_r_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _l_ == child )
        {
            _l_ = null;
            return;
        }
        if ( _r_ == child )
        {
            _r_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _l_ == oldChild )
        {
            SetL ((PExp) newChild);
            return;
        }
        if ( _r_ == oldChild )
        {
            SetR ((PExp) newChild);
            return;
        }
    }

}
public sealed class ANeqExp : PExp
{
    private PExp _l_;
    private PExp _r_;

    public ANeqExp ()
    {
    }

    public ANeqExp (
            PExp _l_,
            PExp _r_
    )
    {
        SetL (_l_);
        SetR (_r_);
    }

    public override Object Clone()
    {
        return new ANeqExp (
            (PExp)CloneNode (_l_),
            (PExp)CloneNode (_r_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANeqExp(this);
    }

    public PExp GetL ()
    {
        return _l_;
    }

    public void SetL (PExp node)
    {
        if(_l_ != null)
        {
            _l_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _l_ = node;
    }
    public PExp GetR ()
    {
        return _r_;
    }

    public void SetR (PExp node)
    {
        if(_r_ != null)
        {
            _r_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _r_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_l_)
            + ToString (_r_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _l_ == child )
        {
            _l_ = null;
            return;
        }
        if ( _r_ == child )
        {
            _r_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _l_ == oldChild )
        {
            SetL ((PExp) newChild);
            return;
        }
        if ( _r_ == oldChild )
        {
            SetR ((PExp) newChild);
            return;
        }
    }

}
public sealed class ANotExp : PExp
{
    private PExp _exp_;

    public ANotExp ()
    {
    }

    public ANotExp (
            PExp _exp_
    )
    {
        SetExp (_exp_);
    }

    public override Object Clone()
    {
        return new ANotExp (
            (PExp)CloneNode (_exp_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANotExp(this);
    }

    public PExp GetExp ()
    {
        return _exp_;
    }

    public void SetExp (PExp node)
    {
        if(_exp_ != null)
        {
            _exp_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _exp_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_exp_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _exp_ == child )
        {
            _exp_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _exp_ == oldChild )
        {
            SetExp ((PExp) newChild);
            return;
        }
    }

}
public sealed class ABoolvalExp : PExp
{
    private TBoolValue _bool_value_;

    public ABoolvalExp ()
    {
    }

    public ABoolvalExp (
            TBoolValue _bool_value_
    )
    {
        SetBoolValue (_bool_value_);
    }

    public override Object Clone()
    {
        return new ABoolvalExp (
            (TBoolValue)CloneNode (_bool_value_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABoolvalExp(this);
    }

    public TBoolValue GetBoolValue ()
    {
        return _bool_value_;
    }

    public void SetBoolValue (TBoolValue node)
    {
        if(_bool_value_ != null)
        {
            _bool_value_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _bool_value_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_bool_value_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _bool_value_ == child )
        {
            _bool_value_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _bool_value_ == oldChild )
        {
            SetBoolValue ((TBoolValue) newChild);
            return;
        }
    }

}
public sealed class ANumberExp : PExp
{
    private TNumber _number_;

    public ANumberExp ()
    {
    }

    public ANumberExp (
            TNumber _number_
    )
    {
        SetNumber (_number_);
    }

    public override Object Clone()
    {
        return new ANumberExp (
            (TNumber)CloneNode (_number_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANumberExp(this);
    }

    public TNumber GetNumber ()
    {
        return _number_;
    }

    public void SetNumber (TNumber node)
    {
        if(_number_ != null)
        {
            _number_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _number_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_number_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _number_ == child )
        {
            _number_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _number_ == oldChild )
        {
            SetNumber ((TNumber) newChild);
            return;
        }
    }

}
public sealed class AFunctionExp : PExp
{
    private TId _name_;
    private TypedList _args_;

    public AFunctionExp ()
    {
        this._args_ = new TypedList(new Args_Cast(this));
    }

    public AFunctionExp (
            TId _name_,
            IList _args_
    )
    {
        SetName (_name_);
        this._args_ = new TypedList(new Args_Cast(this));
        this._args_.Clear();
        this._args_.AddAll(_args_);
    }

    public override Object Clone()
    {
        return new AFunctionExp (
            (TId)CloneNode (_name_),
            CloneList (_args_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFunctionExp(this);
    }

    public TId GetName ()
    {
        return _name_;
    }

    public void SetName (TId node)
    {
        if(_name_ != null)
        {
            _name_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _name_ = node;
    }
    public IList GetArgs ()
    {
        return _args_;
    }

    public void setArgs (IList list)
    {
        _args_.Clear();
        _args_.AddAll(list);
    }

    public override string ToString()
    {
        return ""
            + ToString (_name_)
            + ToString (_args_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _name_ == child )
        {
            _name_ = null;
            return;
        }
        if ( _args_.Contains(child) )
        {
            _args_.Remove(child);
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _name_ == oldChild )
        {
            SetName ((TId) newChild);
            return;
        }
        for ( int i = 0; i < _args_.Count; i++ )
        {
            Node n = (Node)_args_[i];
            if(n == oldChild)
            {
                if(newChild != null)
                {
                    _args_[i] = newChild;
                    oldChild.Parent(null);
                    return;
                }

                _args_.RemoveAt(i);
                oldChild.Parent(null);
                return;
            }
        }
    }

    private class Args_Cast : Cast
    {
        AFunctionExp obj;

        internal Args_Cast (AFunctionExp obj)
        {
          this.obj = obj;
        }

        public Object Cast(Object o)
        {
            PExp node = (PExp) o;

            if((node.Parent() != null) &&
                (node.Parent() != obj))
            {
                node.Parent().RemoveChild(node);
            }

            if((node.Parent() == null) ||
                (node.Parent() != obj))
            {
                node.Parent(obj);
            }

            return node;
        }

        public Object UnCast(Object o)
        {
            PExp node = (PExp) o;
            node.Parent(null);
            return node;
        }
    }
}
public sealed class AIdExp : PExp
{
    private TId _id_;

    public AIdExp ()
    {
    }

    public AIdExp (
            TId _id_
    )
    {
        SetId (_id_);
    }

    public override Object Clone()
    {
        return new AIdExp (
            (TId)CloneNode (_id_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIdExp(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
    }

}

public sealed class Start : Node
{
    private PProgram _base_;
    private EOF _eof_;

    public Start()
    {
    }

    public Start(
        PProgram _base_,
        EOF _eof_)
    {
        SetPProgram(_base_);
        SetEOF(_eof_);
    }

    public override Object Clone()
    {
        return new Start(
            (PProgram) CloneNode(_base_),
            (EOF) CloneNode(_eof_));
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseStart(this);
    }

    public PProgram GetPProgram()
    {
        return _base_;
    }
    public void SetPProgram(PProgram node)
    {
        if(_base_ != null)
        {
            _base_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _base_ = node;
    }

    public EOF GetEOF()
    {
        return _eof_;
    }
    public void SetEOF(EOF node)
    {
        if(_eof_ != null)
        {
            _eof_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eof_ = node;
    }

    internal override void RemoveChild(Node child)
    {
        if(_base_ == child)
        {
            _base_ = null;
            return;
        }

        if(_eof_ == child)
        {
            _eof_ = null;
            return;
        }
    }
    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if(_base_ == oldChild)
        {
            SetPProgram((PProgram) newChild);
            return;
        }

        if(_eof_ == oldChild)
        {
            SetEOF((EOF) newChild);
            return;
        }
    }

    public override string ToString()
    {
        return "" +
            ToString(_base_) +
            ToString(_eof_);
    }
}
}
