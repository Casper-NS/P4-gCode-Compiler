Package GGCodeParser;

Helpers
  all = [0 .. 127];
  l_curley = '{';
  r_curley = '}';
  not_curleys = [all - [l_curley + r_curley]];
  tab   = 9;
  cr    = 13;
  lf    = 10;
  digit = ['0'..'9'];
  lowercase = ['a'..'z'];
  uppercase = ['A'..'Z'];
  letter  = lowercase | uppercase;
  idletter = letter | '_';
  idchar  = letter | '_' | digit;

Tokens
  all_chars_except_curly = not_curleys;
  eol   = cr | lf | cr lf;
  blank = ' ' | tab;
  assignment_op = '=';
  multiplication_op  = '*';
  modulo_op  = '%';
  division_op = '/';
  plus_op  = '+';
  minus_op = '-';
  l_par = '(';
  r_par = ')';
  equal = '==';
  not_equal = '!=';
  less_than = '<';
  less_than_or_equal = '<=';
  greater_than = '>';
  greater_than_or_equal = '>=';
  not = '!';
  number  = '0'| [digit-'0'] digit*;
  identifier    = idletter idchar*;
  const = 'const';
  comma = ',';
  l_cur = '{';
  r_cur = '}';

Ignored Tokens
  blank;

Productions
cst_program = cst_main;

cst_main = cst_block;

cst_declarationlist =
        {recursive}cst_declaration eol cst_declarationlist | 
        cst_declaration eol;

cst_declaration = 
        {variable}cst_variabledeclaration eol | 
        {function}cst_functiondeclaration eol;

cst_variable_declaration =
        {simple}const? simple_types identifier assignment_op expression| 
        {vector}cst_vector_declaration;

cst_vector_declaration = const? vector identifier assignment_op l_par cst_expression r_par;

cst_all_types = 
        {simple}cst_simple_types | 
        vector;

cst_simple_types =
        {integer}int | 
        {floatingpoint}float | 
        {bool}boolean;

cst_vector_values = l_par cst_expression comma;

cst_function_declaration =
        {notvoid}cst_all_type identifier l_par cst_formal_param_list? r_par eol cst_function_body |
        void identifier l_par cst_formal_param_list? r_par eol cst_function_body;

cst_formal_param_list = 
        {recursive}cst_formal_param cst_formal_param_list | 
        cst_formal_param;

cst_formal_param = cst_all_type identifier;

cst_function_body = cst_block eol;

cst_block = {cst_statement_list};

cst_statement_list = 
        {recursive}cst_statement eol cst_statement_list | 
        cst_statement eol;

cst_statement = 
        {decl}cst_declaration | 
        {if}cst_if_statement | 
        {repeat}cst_repeat_statement | 
        {while}cst_while_statement | 
        {gcode}cst_gcode_literal | 
        {assignment}cst_assignment | 
        {function}cst_function_call;

cst_if_statement = 
        {noelse}if l_par cst_expression r_par cst_block | 
        {withelse}if l_par cst_expression r_par cst_block;

cst_repeat_statement = repeat l_par cst_expression r_par cst_block;

cst_while_statement = while l_par cst_expression r_par cst_block;

cst_gcode_literal = cst_gcode l_cur all_chars_except_curly r_cur;

cst_assignment = identifier assignment_op cst_expression eol;

cst_function_call = identifierl_par actualparamlist? r_par eol;

cst_actual_param_list =
        {recursive}cst_actual_param comma cst_actual_param_list | 
        cst_actual_param;

cst_actual_param = 
        {id}identifier | 
        cst_expression;

cst_expression = 
        {plus}cst_expression plus_op cst_expression | 
        {minus}cst_expression minus_op cst_expression | 
        {mult}cst_expression multiplication_op cst_expression | 
        {division}cst_expression division_op cst_expression | 
        {modulo}cst_expression modulo_operator cst_expression | 
        {eq}cst_expression equal cst_expression | 
        {neq}cst_expression notequal cst_expression | 
        {not}not cst_expression | 
        {lessthan}cst_expression less_than cst_expression | 
        {leq}cst_expression less_than_or_equal cst_expression | 
        {greaterthan}cst_expression greater_than cst_expression | 
        {geq}cst_expression greater_than_or_equal cst_expression | 
        {id}identifier | 
        {vecvalue}cst_vector_values | 
        {num}number;