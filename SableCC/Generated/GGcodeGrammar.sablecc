Package GGCodeParser;

Helpers
  all = [0 .. 127];
  l_curley = '{';
  r_curley = '}';
  not_curleys = [all - [l_curley + r_curley]];
  tab   = 9;
  cr    = 13;
  lf    = 10;
  digit = ['0'..'9'];
  lowercase = ['a'..'z'];
  uppercase = ['A'..'Z'];
  letter  = lowercase | uppercase;
  idletter = letter | '_';
  idchar  = letter | '_' | digit;

Tokens
  eol   = cr | lf | cr lf;
  blank = ' ' | tab;
  assignment_op = '=';
  multiplication_op  = '*';
  modulo_op  = '%';
  division_op = '/';
  plus_op  = '+';
  minus_op = '-';
  equal = '==';
  not_equal = '!=';
  less_than = '<';
  less_than_or_equal = '<=';
  greater_than = '>';
  greater_than_or_equal = '>=';
  not = '!';
  comma = ',';
  l_par = '(';
  r_par = ')';
  l_cur = '{';
  r_cur = '}';
  int = 'int';
  const = 'const';
  float = 'float';
  bool = 'bool';
  void = 'void';
  if = 'if';
  else = 'else';
  repeat = 'repeat';
  while = 'while';
  gcode = 'GCODE';
  number  = '0'| [digit-'0'] digit*;
  identifier    = idletter idchar*;
  all_chars_except_curly = not_curleys;

Ignored Tokens
  blank;

Productions
cst_program = cst_declaration_list cst_main;

cst_main = cst_block;

cst_declaration_list =
        {recursive}cst_declaration eol cst_declaration_list | 
        cst_declaration eol;

cst_declaration = 
        {variable}cst_variable_declaration | 
        {function}cst_function_declaration;

cst_variable_declaration =
        {simple}const? cst_simple_types identifier assignment_op cst_expression| 
        {vector}cst_vector_declaration;

cst_vector_declaration = const? cst_vector_values identifier assignment_op l_par cst_expression r_par;

cst_all_types = 
        {simple}cst_simple_types | 
        cst_vector_values;

cst_simple_types =
        {integer}int | 
        {floatingpoint}float | 
        {bool}bool;

cst_vector_values = l_par [a]:cst_expression [q]:comma [b]:cst_expression [w]:comma [c]:cst_expression r_par;

cst_function_declaration =
        {notvoid}cst_all_types identifier l_par cst_formal_param_list? r_par eol cst_function_body |
        void identifier l_par cst_formal_param_list? r_par eol cst_function_body;

cst_formal_param_list = 
        {recursive}cst_formal_param cst_formal_param_list | 
        cst_formal_param;

cst_formal_param = cst_all_types identifier;

cst_function_body = cst_block eol;

cst_block = l_cur cst_statement_list r_cur;

cst_statement_list = 
        {recursive}cst_statement eol cst_statement_list | 
        cst_statement eol;

cst_statement = 
        {decl}cst_declaration | 
        {if}cst_if_statement | 
        {repeat}cst_repeat_statement | 
        {while}cst_while_statement | 
        {gcode}cst_gcode_literal | 
        {assignment}cst_assignment | 
        {function}cst_function_call;

cst_if_statement = 
        {noelse}if l_par cst_expression r_par cst_block | 
        {withelse}if l_par cst_expression r_par [a]:cst_block else [b]:cst_block;

cst_repeat_statement = repeat l_par cst_expression r_par cst_block;

cst_while_statement = while l_par cst_expression r_par cst_block;

cst_gcode_literal = gcode l_cur all_chars_except_curly r_cur;

cst_assignment = identifier assignment_op cst_expression eol;

cst_function_call = identifier l_par cst_actual_param_list? r_par eol;

cst_actual_param_list =
        {recursive}cst_actual_param comma cst_actual_param_list | 
        cst_actual_param;

cst_actual_param = 
        {id}identifier | 
        cst_expression;

cst_expression = 
        number;