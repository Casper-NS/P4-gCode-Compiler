/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using GGCodeParser.node;

namespace GGCodeParser.analysis {


public interface Analysis : Switch
{
    Object GetIn(Node node);
    void SetIn(Node node, Object inobj);
    Object GetOut(Node node);
    void SetOut(Node node, Object outobj);

    void CaseStart(Start node);
    void CaseACstProgram(ACstProgram node);
    void CaseACstMainFunctionDeclaration(ACstMainFunctionDeclaration node);
    void CaseARecursiveCstDeclarationList(ARecursiveCstDeclarationList node);
    void CaseACstDeclarationList(ACstDeclarationList node);
    void CaseAVariableCstDeclaration(AVariableCstDeclaration node);
    void CaseAFunctionCstDeclaration(AFunctionCstDeclaration node);
    void CaseAMainCstDeclaration(AMainCstDeclaration node);
    void CaseASimpleInitialCstVariableDeclaration(ASimpleInitialCstVariableDeclaration node);
    void CaseASimpleUninitialCstVariableDeclaration(ASimpleUninitialCstVariableDeclaration node);
    void CaseAVectorCstVariableDeclaration(AVectorCstVariableDeclaration node);
    void CaseAInitialCstVectorDeclaration(AInitialCstVectorDeclaration node);
    void CaseACstVectorDeclaration(ACstVectorDeclaration node);
    void CaseASimpleCstAllTypes(ASimpleCstAllTypes node);
    void CaseACstAllTypes(ACstAllTypes node);
    void CaseAIntegerCstSimpleTypes(AIntegerCstSimpleTypes node);
    void CaseAFloatingpointCstSimpleTypes(AFloatingpointCstSimpleTypes node);
    void CaseABoolCstSimpleTypes(ABoolCstSimpleTypes node);
    void CaseACstVectorValues(ACstVectorValues node);
    void CaseANotvoidCstFunctionDeclaration(ANotvoidCstFunctionDeclaration node);
    void CaseACstFunctionDeclaration(ACstFunctionDeclaration node);
    void CaseARecursiveCstFormalParamList(ARecursiveCstFormalParamList node);
    void CaseACstFormalParamList(ACstFormalParamList node);
    void CaseACstFormalParam(ACstFormalParam node);
    void CaseACstFunctionBody(ACstFunctionBody node);
    void CaseACstBlock(ACstBlock node);
    void CaseARecursiveCstStatementList(ARecursiveCstStatementList node);
    void CaseACstStatementList(ACstStatementList node);
    void CaseADeclCstStatement(ADeclCstStatement node);
    void CaseAIfCstStatement(AIfCstStatement node);
    void CaseARepeatCstStatement(ARepeatCstStatement node);
    void CaseAWhileCstStatement(AWhileCstStatement node);
    void CaseAGcodeCstStatement(AGcodeCstStatement node);
    void CaseAAssignmentCstStatement(AAssignmentCstStatement node);
    void CaseAFunctionCstStatement(AFunctionCstStatement node);
    void CaseAReturnCstStatement(AReturnCstStatement node);
    void CaseANoelseCstIfStatement(ANoelseCstIfStatement node);
    void CaseAWithelseCstIfStatement(AWithelseCstIfStatement node);
    void CaseACstRepeatStatement(ACstRepeatStatement node);
    void CaseACstWhileStatement(ACstWhileStatement node);
    void CaseACstGcodeLiteral(ACstGcodeLiteral node);
    void CaseACstAssignment(ACstAssignment node);
    void CaseACstFunctionCall(ACstFunctionCall node);
    void CaseACstReturn(ACstReturn node);
    void CaseARecursiveCstActualParamList(ARecursiveCstActualParamList node);
    void CaseACstActualParamList(ACstActualParamList node);
    void CaseANotCstExpression(ANotCstExpression node);
    void CaseAEqualCstExpression(AEqualCstExpression node);
    void CaseALeCstExpression(ALeCstExpression node);
    void CaseALeqCstExpression(ALeqCstExpression node);
    void CaseAGeCstExpression(AGeCstExpression node);
    void CaseAGeqCstExpression(AGeqCstExpression node);
    void CaseANeqCstExpression(ANeqCstExpression node);
    void CaseACstExpression(ACstExpression node);
    void CaseAPlusCstLowExp(APlusCstLowExp node);
    void CaseAMinusCstLowExp(AMinusCstLowExp node);
    void CaseACstLowExp(ACstLowExp node);
    void CaseAMultCstMediumExp(AMultCstMediumExp node);
    void CaseADivisionCstMediumExp(ADivisionCstMediumExp node);
    void CaseAModuloCstMediumExp(AModuloCstMediumExp node);
    void CaseACstMediumExp(ACstMediumExp node);
    void CaseANumberCstHighExp(ANumberCstHighExp node);
    void CaseABoolCstHighExp(ABoolCstHighExp node);
    void CaseAIdCstHighExp(AIdCstHighExp node);
    void CaseAFuncCallCstHighExp(AFuncCallCstHighExp node);
    void CaseAVectorCstHighExp(AVectorCstHighExp node);
    void CaseAParenCstHighExp(AParenCstHighExp node);

    void CaseTMain(TMain node);
    void CaseTEol(TEol node);
    void CaseTBlank(TBlank node);
    void CaseTAssignmentOp(TAssignmentOp node);
    void CaseTMultiplicationOp(TMultiplicationOp node);
    void CaseTModuloOp(TModuloOp node);
    void CaseTDivisionOp(TDivisionOp node);
    void CaseTPlusOp(TPlusOp node);
    void CaseTMinusOp(TMinusOp node);
    void CaseTEqual(TEqual node);
    void CaseTLessThan(TLessThan node);
    void CaseTLessThanOrEqual(TLessThanOrEqual node);
    void CaseTGreaterThan(TGreaterThan node);
    void CaseTGreaterThanOrEqual(TGreaterThanOrEqual node);
    void CaseTNot(TNot node);
    void CaseTLPar(TLPar node);
    void CaseTRPar(TRPar node);
    void CaseTLCur(TLCur node);
    void CaseTRCur(TRCur node);
    void CaseTComma(TComma node);
    void CaseTVector(TVector node);
    void CaseTInt(TInt node);
    void CaseTConst(TConst node);
    void CaseTFloat(TFloat node);
    void CaseTBool(TBool node);
    void CaseTVoid(TVoid node);
    void CaseTBoolValue(TBoolValue node);
    void CaseTIf(TIf node);
    void CaseTElse(TElse node);
    void CaseTRepeat(TRepeat node);
    void CaseTWhile(TWhile node);
    void CaseTReturn(TReturn node);
    void CaseTGcode(TGcode node);
    void CaseTNumber(TNumber node);
    void CaseTIdentifier(TIdentifier node);
    void CaseTAllCharsExceptCurly(TAllCharsExceptCurly node);
    void CaseEOF(EOF node);
}


public class AnalysisAdapter : Analysis
{
    private Hashtable inhash;
    private Hashtable outhash;

    public virtual Object GetIn(Node node)
    {
        if(inhash == null)
        {
            return null;
        }

        return inhash[node];
    }

    public virtual void SetIn(Node node, Object inobj)
    {
        if(this.inhash == null)
        {
            this.inhash = new Hashtable(1);
        }

        if(inobj != null)
        {
            this.inhash[node] = inobj;
        }
        else
        {
            this.inhash.Remove(node);
        }
    }
    public virtual Object GetOut(Node node)
    {
        if(outhash == null)
        {
            return null;
        }

        return outhash[node];
    }

    public virtual void SetOut(Node node, Object outobj)
    {
        if(this.outhash == null)
        {
            this.outhash = new Hashtable(1);
        }

        if(outobj != null)
        {
            this.outhash[node] = outobj;
        }
        else
        {
            this.outhash.Remove(node);
        }
    }
    public virtual void CaseStart(Start node)
    {
        DefaultCase(node);
    }

    public virtual void CaseACstProgram(ACstProgram node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACstMainFunctionDeclaration(ACstMainFunctionDeclaration node)
    {
        DefaultCase(node);
    }
    public virtual void CaseARecursiveCstDeclarationList(ARecursiveCstDeclarationList node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACstDeclarationList(ACstDeclarationList node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAVariableCstDeclaration(AVariableCstDeclaration node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFunctionCstDeclaration(AFunctionCstDeclaration node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMainCstDeclaration(AMainCstDeclaration node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASimpleInitialCstVariableDeclaration(ASimpleInitialCstVariableDeclaration node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASimpleUninitialCstVariableDeclaration(ASimpleUninitialCstVariableDeclaration node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAVectorCstVariableDeclaration(AVectorCstVariableDeclaration node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAInitialCstVectorDeclaration(AInitialCstVectorDeclaration node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACstVectorDeclaration(ACstVectorDeclaration node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASimpleCstAllTypes(ASimpleCstAllTypes node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACstAllTypes(ACstAllTypes node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntegerCstSimpleTypes(AIntegerCstSimpleTypes node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFloatingpointCstSimpleTypes(AFloatingpointCstSimpleTypes node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABoolCstSimpleTypes(ABoolCstSimpleTypes node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACstVectorValues(ACstVectorValues node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANotvoidCstFunctionDeclaration(ANotvoidCstFunctionDeclaration node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACstFunctionDeclaration(ACstFunctionDeclaration node)
    {
        DefaultCase(node);
    }
    public virtual void CaseARecursiveCstFormalParamList(ARecursiveCstFormalParamList node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACstFormalParamList(ACstFormalParamList node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACstFormalParam(ACstFormalParam node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACstFunctionBody(ACstFunctionBody node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACstBlock(ACstBlock node)
    {
        DefaultCase(node);
    }
    public virtual void CaseARecursiveCstStatementList(ARecursiveCstStatementList node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACstStatementList(ACstStatementList node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeclCstStatement(ADeclCstStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIfCstStatement(AIfCstStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseARepeatCstStatement(ARepeatCstStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAWhileCstStatement(AWhileCstStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGcodeCstStatement(AGcodeCstStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssignmentCstStatement(AAssignmentCstStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFunctionCstStatement(AFunctionCstStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAReturnCstStatement(AReturnCstStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoelseCstIfStatement(ANoelseCstIfStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAWithelseCstIfStatement(AWithelseCstIfStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACstRepeatStatement(ACstRepeatStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACstWhileStatement(ACstWhileStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACstGcodeLiteral(ACstGcodeLiteral node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACstAssignment(ACstAssignment node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACstFunctionCall(ACstFunctionCall node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACstReturn(ACstReturn node)
    {
        DefaultCase(node);
    }
    public virtual void CaseARecursiveCstActualParamList(ARecursiveCstActualParamList node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACstActualParamList(ACstActualParamList node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANotCstExpression(ANotCstExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAEqualCstExpression(AEqualCstExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALeCstExpression(ALeCstExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALeqCstExpression(ALeqCstExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGeCstExpression(AGeCstExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGeqCstExpression(AGeqCstExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANeqCstExpression(ANeqCstExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACstExpression(ACstExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPlusCstLowExp(APlusCstLowExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMinusCstLowExp(AMinusCstLowExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACstLowExp(ACstLowExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultCstMediumExp(AMultCstMediumExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADivisionCstMediumExp(ADivisionCstMediumExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAModuloCstMediumExp(AModuloCstMediumExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACstMediumExp(ACstMediumExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANumberCstHighExp(ANumberCstHighExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABoolCstHighExp(ABoolCstHighExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIdCstHighExp(AIdCstHighExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFuncCallCstHighExp(AFuncCallCstHighExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAVectorCstHighExp(AVectorCstHighExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAParenCstHighExp(AParenCstHighExp node)
    {
        DefaultCase(node);
    }

    public virtual void CaseTMain(TMain node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEol(TEol node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTBlank(TBlank node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAssignmentOp(TAssignmentOp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMultiplicationOp(TMultiplicationOp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTModuloOp(TModuloOp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDivisionOp(TDivisionOp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPlusOp(TPlusOp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMinusOp(TMinusOp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEqual(TEqual node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLessThan(TLessThan node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLessThanOrEqual(TLessThanOrEqual node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGreaterThan(TGreaterThan node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGreaterThanOrEqual(TGreaterThanOrEqual node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNot(TNot node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLPar(TLPar node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRPar(TRPar node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLCur(TLCur node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRCur(TRCur node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComma(TComma node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTVector(TVector node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTInt(TInt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTConst(TConst node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTFloat(TFloat node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTBool(TBool node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTVoid(TVoid node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTBoolValue(TBoolValue node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTIf(TIf node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTElse(TElse node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRepeat(TRepeat node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTWhile(TWhile node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTReturn(TReturn node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGcode(TGcode node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNumber(TNumber node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTIdentifier(TIdentifier node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAllCharsExceptCurly(TAllCharsExceptCurly node)
    {
        DefaultCase(node);
    }

    public virtual void CaseEOF(EOF node)
    {
        DefaultCase(node);
    }

    public virtual void DefaultCase(Node node)
    {
    }
}


public class DepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetPCstProgram().Apply(this);
        node.GetEOF().Apply(this);
        OutStart(node);
    }

    public virtual void InACstProgram(ACstProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutACstProgram(ACstProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseACstProgram(ACstProgram node)
    {
        InACstProgram(node);
        if(node.GetA() != null)
        {
            node.GetA().Apply(this);
        }
        OutACstProgram(node);
    }
    public virtual void InACstMainFunctionDeclaration(ACstMainFunctionDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutACstMainFunctionDeclaration(ACstMainFunctionDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseACstMainFunctionDeclaration(ACstMainFunctionDeclaration node)
    {
        InACstMainFunctionDeclaration(node);
        if(node.GetMain() != null)
        {
            node.GetMain().Apply(this);
        }
        if(node.GetLPar() != null)
        {
            node.GetLPar().Apply(this);
        }
        if(node.GetRPar() != null)
        {
            node.GetRPar().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetCstFunctionBody() != null)
        {
            node.GetCstFunctionBody().Apply(this);
        }
        OutACstMainFunctionDeclaration(node);
    }
    public virtual void InARecursiveCstDeclarationList(ARecursiveCstDeclarationList node)
    {
        DefaultIn(node);
    }

    public virtual void OutARecursiveCstDeclarationList(ARecursiveCstDeclarationList node)
    {
        DefaultOut(node);
    }

    public override void CaseARecursiveCstDeclarationList(ARecursiveCstDeclarationList node)
    {
        InARecursiveCstDeclarationList(node);
        if(node.GetCstDeclaration() != null)
        {
            node.GetCstDeclaration().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetEol().Count];
            node.GetEol().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((TEol) temp[i]).Apply(this);
            }
        }
        if(node.GetCstDeclarationList() != null)
        {
            node.GetCstDeclarationList().Apply(this);
        }
        OutARecursiveCstDeclarationList(node);
    }
    public virtual void InACstDeclarationList(ACstDeclarationList node)
    {
        DefaultIn(node);
    }

    public virtual void OutACstDeclarationList(ACstDeclarationList node)
    {
        DefaultOut(node);
    }

    public override void CaseACstDeclarationList(ACstDeclarationList node)
    {
        InACstDeclarationList(node);
        if(node.GetCstDeclaration() != null)
        {
            node.GetCstDeclaration().Apply(this);
        }
        OutACstDeclarationList(node);
    }
    public virtual void InAVariableCstDeclaration(AVariableCstDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableCstDeclaration(AVariableCstDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableCstDeclaration(AVariableCstDeclaration node)
    {
        InAVariableCstDeclaration(node);
        if(node.GetCstVariableDeclaration() != null)
        {
            node.GetCstVariableDeclaration().Apply(this);
        }
        OutAVariableCstDeclaration(node);
    }
    public virtual void InAFunctionCstDeclaration(AFunctionCstDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionCstDeclaration(AFunctionCstDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionCstDeclaration(AFunctionCstDeclaration node)
    {
        InAFunctionCstDeclaration(node);
        if(node.GetCstFunctionDeclaration() != null)
        {
            node.GetCstFunctionDeclaration().Apply(this);
        }
        OutAFunctionCstDeclaration(node);
    }
    public virtual void InAMainCstDeclaration(AMainCstDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainCstDeclaration(AMainCstDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainCstDeclaration(AMainCstDeclaration node)
    {
        InAMainCstDeclaration(node);
        if(node.GetCstMainFunctionDeclaration() != null)
        {
            node.GetCstMainFunctionDeclaration().Apply(this);
        }
        OutAMainCstDeclaration(node);
    }
    public virtual void InASimpleInitialCstVariableDeclaration(ASimpleInitialCstVariableDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutASimpleInitialCstVariableDeclaration(ASimpleInitialCstVariableDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseASimpleInitialCstVariableDeclaration(ASimpleInitialCstVariableDeclaration node)
    {
        InASimpleInitialCstVariableDeclaration(node);
        if(node.GetConst() != null)
        {
            node.GetConst().Apply(this);
        }
        if(node.GetCstSimpleTypes() != null)
        {
            node.GetCstSimpleTypes().Apply(this);
        }
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        if(node.GetAssignmentOp() != null)
        {
            node.GetAssignmentOp().Apply(this);
        }
        if(node.GetCstExpression() != null)
        {
            node.GetCstExpression().Apply(this);
        }
        OutASimpleInitialCstVariableDeclaration(node);
    }
    public virtual void InASimpleUninitialCstVariableDeclaration(ASimpleUninitialCstVariableDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutASimpleUninitialCstVariableDeclaration(ASimpleUninitialCstVariableDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseASimpleUninitialCstVariableDeclaration(ASimpleUninitialCstVariableDeclaration node)
    {
        InASimpleUninitialCstVariableDeclaration(node);
        if(node.GetConst() != null)
        {
            node.GetConst().Apply(this);
        }
        if(node.GetCstSimpleTypes() != null)
        {
            node.GetCstSimpleTypes().Apply(this);
        }
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        OutASimpleUninitialCstVariableDeclaration(node);
    }
    public virtual void InAVectorCstVariableDeclaration(AVectorCstVariableDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVectorCstVariableDeclaration(AVectorCstVariableDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseAVectorCstVariableDeclaration(AVectorCstVariableDeclaration node)
    {
        InAVectorCstVariableDeclaration(node);
        if(node.GetCstVectorDeclaration() != null)
        {
            node.GetCstVectorDeclaration().Apply(this);
        }
        OutAVectorCstVariableDeclaration(node);
    }
    public virtual void InAInitialCstVectorDeclaration(AInitialCstVectorDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutAInitialCstVectorDeclaration(AInitialCstVectorDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseAInitialCstVectorDeclaration(AInitialCstVectorDeclaration node)
    {
        InAInitialCstVectorDeclaration(node);
        if(node.GetConst() != null)
        {
            node.GetConst().Apply(this);
        }
        if(node.GetVector() != null)
        {
            node.GetVector().Apply(this);
        }
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        if(node.GetAssignmentOp() != null)
        {
            node.GetAssignmentOp().Apply(this);
        }
        if(node.GetCstVectorValues() != null)
        {
            node.GetCstVectorValues().Apply(this);
        }
        OutAInitialCstVectorDeclaration(node);
    }
    public virtual void InACstVectorDeclaration(ACstVectorDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutACstVectorDeclaration(ACstVectorDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseACstVectorDeclaration(ACstVectorDeclaration node)
    {
        InACstVectorDeclaration(node);
        if(node.GetConst() != null)
        {
            node.GetConst().Apply(this);
        }
        if(node.GetCstVectorValues() != null)
        {
            node.GetCstVectorValues().Apply(this);
        }
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        OutACstVectorDeclaration(node);
    }
    public virtual void InASimpleCstAllTypes(ASimpleCstAllTypes node)
    {
        DefaultIn(node);
    }

    public virtual void OutASimpleCstAllTypes(ASimpleCstAllTypes node)
    {
        DefaultOut(node);
    }

    public override void CaseASimpleCstAllTypes(ASimpleCstAllTypes node)
    {
        InASimpleCstAllTypes(node);
        if(node.GetCstSimpleTypes() != null)
        {
            node.GetCstSimpleTypes().Apply(this);
        }
        OutASimpleCstAllTypes(node);
    }
    public virtual void InACstAllTypes(ACstAllTypes node)
    {
        DefaultIn(node);
    }

    public virtual void OutACstAllTypes(ACstAllTypes node)
    {
        DefaultOut(node);
    }

    public override void CaseACstAllTypes(ACstAllTypes node)
    {
        InACstAllTypes(node);
        if(node.GetVector() != null)
        {
            node.GetVector().Apply(this);
        }
        OutACstAllTypes(node);
    }
    public virtual void InAIntegerCstSimpleTypes(AIntegerCstSimpleTypes node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntegerCstSimpleTypes(AIntegerCstSimpleTypes node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntegerCstSimpleTypes(AIntegerCstSimpleTypes node)
    {
        InAIntegerCstSimpleTypes(node);
        if(node.GetInt() != null)
        {
            node.GetInt().Apply(this);
        }
        OutAIntegerCstSimpleTypes(node);
    }
    public virtual void InAFloatingpointCstSimpleTypes(AFloatingpointCstSimpleTypes node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatingpointCstSimpleTypes(AFloatingpointCstSimpleTypes node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatingpointCstSimpleTypes(AFloatingpointCstSimpleTypes node)
    {
        InAFloatingpointCstSimpleTypes(node);
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        OutAFloatingpointCstSimpleTypes(node);
    }
    public virtual void InABoolCstSimpleTypes(ABoolCstSimpleTypes node)
    {
        DefaultIn(node);
    }

    public virtual void OutABoolCstSimpleTypes(ABoolCstSimpleTypes node)
    {
        DefaultOut(node);
    }

    public override void CaseABoolCstSimpleTypes(ABoolCstSimpleTypes node)
    {
        InABoolCstSimpleTypes(node);
        if(node.GetBool() != null)
        {
            node.GetBool().Apply(this);
        }
        OutABoolCstSimpleTypes(node);
    }
    public virtual void InACstVectorValues(ACstVectorValues node)
    {
        DefaultIn(node);
    }

    public virtual void OutACstVectorValues(ACstVectorValues node)
    {
        DefaultOut(node);
    }

    public override void CaseACstVectorValues(ACstVectorValues node)
    {
        InACstVectorValues(node);
        if(node.GetLPar() != null)
        {
            node.GetLPar().Apply(this);
        }
        if(node.GetA() != null)
        {
            node.GetA().Apply(this);
        }
        if(node.GetQ() != null)
        {
            node.GetQ().Apply(this);
        }
        if(node.GetB() != null)
        {
            node.GetB().Apply(this);
        }
        if(node.GetW() != null)
        {
            node.GetW().Apply(this);
        }
        if(node.GetC() != null)
        {
            node.GetC().Apply(this);
        }
        if(node.GetRPar() != null)
        {
            node.GetRPar().Apply(this);
        }
        OutACstVectorValues(node);
    }
    public virtual void InANotvoidCstFunctionDeclaration(ANotvoidCstFunctionDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotvoidCstFunctionDeclaration(ANotvoidCstFunctionDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseANotvoidCstFunctionDeclaration(ANotvoidCstFunctionDeclaration node)
    {
        InANotvoidCstFunctionDeclaration(node);
        if(node.GetCstAllTypes() != null)
        {
            node.GetCstAllTypes().Apply(this);
        }
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        if(node.GetLPar() != null)
        {
            node.GetLPar().Apply(this);
        }
        if(node.GetCstFormalParamList() != null)
        {
            node.GetCstFormalParamList().Apply(this);
        }
        if(node.GetRPar() != null)
        {
            node.GetRPar().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetCstFunctionBody() != null)
        {
            node.GetCstFunctionBody().Apply(this);
        }
        OutANotvoidCstFunctionDeclaration(node);
    }
    public virtual void InACstFunctionDeclaration(ACstFunctionDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutACstFunctionDeclaration(ACstFunctionDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseACstFunctionDeclaration(ACstFunctionDeclaration node)
    {
        InACstFunctionDeclaration(node);
        if(node.GetVoid() != null)
        {
            node.GetVoid().Apply(this);
        }
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        if(node.GetLPar() != null)
        {
            node.GetLPar().Apply(this);
        }
        if(node.GetCstFormalParamList() != null)
        {
            node.GetCstFormalParamList().Apply(this);
        }
        if(node.GetRPar() != null)
        {
            node.GetRPar().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetCstFunctionBody() != null)
        {
            node.GetCstFunctionBody().Apply(this);
        }
        OutACstFunctionDeclaration(node);
    }
    public virtual void InARecursiveCstFormalParamList(ARecursiveCstFormalParamList node)
    {
        DefaultIn(node);
    }

    public virtual void OutARecursiveCstFormalParamList(ARecursiveCstFormalParamList node)
    {
        DefaultOut(node);
    }

    public override void CaseARecursiveCstFormalParamList(ARecursiveCstFormalParamList node)
    {
        InARecursiveCstFormalParamList(node);
        if(node.GetCstFormalParam() != null)
        {
            node.GetCstFormalParam().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetCstFormalParamList() != null)
        {
            node.GetCstFormalParamList().Apply(this);
        }
        OutARecursiveCstFormalParamList(node);
    }
    public virtual void InACstFormalParamList(ACstFormalParamList node)
    {
        DefaultIn(node);
    }

    public virtual void OutACstFormalParamList(ACstFormalParamList node)
    {
        DefaultOut(node);
    }

    public override void CaseACstFormalParamList(ACstFormalParamList node)
    {
        InACstFormalParamList(node);
        if(node.GetCstFormalParam() != null)
        {
            node.GetCstFormalParam().Apply(this);
        }
        OutACstFormalParamList(node);
    }
    public virtual void InACstFormalParam(ACstFormalParam node)
    {
        DefaultIn(node);
    }

    public virtual void OutACstFormalParam(ACstFormalParam node)
    {
        DefaultOut(node);
    }

    public override void CaseACstFormalParam(ACstFormalParam node)
    {
        InACstFormalParam(node);
        if(node.GetCstAllTypes() != null)
        {
            node.GetCstAllTypes().Apply(this);
        }
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        OutACstFormalParam(node);
    }
    public virtual void InACstFunctionBody(ACstFunctionBody node)
    {
        DefaultIn(node);
    }

    public virtual void OutACstFunctionBody(ACstFunctionBody node)
    {
        DefaultOut(node);
    }

    public override void CaseACstFunctionBody(ACstFunctionBody node)
    {
        InACstFunctionBody(node);
        if(node.GetCstBlock() != null)
        {
            node.GetCstBlock().Apply(this);
        }
        OutACstFunctionBody(node);
    }
    public virtual void InACstBlock(ACstBlock node)
    {
        DefaultIn(node);
    }

    public virtual void OutACstBlock(ACstBlock node)
    {
        DefaultOut(node);
    }

    public override void CaseACstBlock(ACstBlock node)
    {
        InACstBlock(node);
        if(node.GetLCur() != null)
        {
            node.GetLCur().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetCstStatementList() != null)
        {
            node.GetCstStatementList().Apply(this);
        }
        if(node.GetRCur() != null)
        {
            node.GetRCur().Apply(this);
        }
        OutACstBlock(node);
    }
    public virtual void InARecursiveCstStatementList(ARecursiveCstStatementList node)
    {
        DefaultIn(node);
    }

    public virtual void OutARecursiveCstStatementList(ARecursiveCstStatementList node)
    {
        DefaultOut(node);
    }

    public override void CaseARecursiveCstStatementList(ARecursiveCstStatementList node)
    {
        InARecursiveCstStatementList(node);
        if(node.GetCstStatement() != null)
        {
            node.GetCstStatement().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetCstStatementList() != null)
        {
            node.GetCstStatementList().Apply(this);
        }
        OutARecursiveCstStatementList(node);
    }
    public virtual void InACstStatementList(ACstStatementList node)
    {
        DefaultIn(node);
    }

    public virtual void OutACstStatementList(ACstStatementList node)
    {
        DefaultOut(node);
    }

    public override void CaseACstStatementList(ACstStatementList node)
    {
        InACstStatementList(node);
        if(node.GetCstStatement() != null)
        {
            node.GetCstStatement().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutACstStatementList(node);
    }
    public virtual void InADeclCstStatement(ADeclCstStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclCstStatement(ADeclCstStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclCstStatement(ADeclCstStatement node)
    {
        InADeclCstStatement(node);
        if(node.GetCstVariableDeclaration() != null)
        {
            node.GetCstVariableDeclaration().Apply(this);
        }
        OutADeclCstStatement(node);
    }
    public virtual void InAIfCstStatement(AIfCstStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfCstStatement(AIfCstStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfCstStatement(AIfCstStatement node)
    {
        InAIfCstStatement(node);
        if(node.GetCstIfStatement() != null)
        {
            node.GetCstIfStatement().Apply(this);
        }
        OutAIfCstStatement(node);
    }
    public virtual void InARepeatCstStatement(ARepeatCstStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutARepeatCstStatement(ARepeatCstStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseARepeatCstStatement(ARepeatCstStatement node)
    {
        InARepeatCstStatement(node);
        if(node.GetCstRepeatStatement() != null)
        {
            node.GetCstRepeatStatement().Apply(this);
        }
        OutARepeatCstStatement(node);
    }
    public virtual void InAWhileCstStatement(AWhileCstStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileCstStatement(AWhileCstStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileCstStatement(AWhileCstStatement node)
    {
        InAWhileCstStatement(node);
        if(node.GetCstWhileStatement() != null)
        {
            node.GetCstWhileStatement().Apply(this);
        }
        OutAWhileCstStatement(node);
    }
    public virtual void InAGcodeCstStatement(AGcodeCstStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGcodeCstStatement(AGcodeCstStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAGcodeCstStatement(AGcodeCstStatement node)
    {
        InAGcodeCstStatement(node);
        if(node.GetCstGcodeLiteral() != null)
        {
            node.GetCstGcodeLiteral().Apply(this);
        }
        OutAGcodeCstStatement(node);
    }
    public virtual void InAAssignmentCstStatement(AAssignmentCstStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignmentCstStatement(AAssignmentCstStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignmentCstStatement(AAssignmentCstStatement node)
    {
        InAAssignmentCstStatement(node);
        if(node.GetCstAssignment() != null)
        {
            node.GetCstAssignment().Apply(this);
        }
        OutAAssignmentCstStatement(node);
    }
    public virtual void InAFunctionCstStatement(AFunctionCstStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionCstStatement(AFunctionCstStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionCstStatement(AFunctionCstStatement node)
    {
        InAFunctionCstStatement(node);
        if(node.GetCstFunctionCall() != null)
        {
            node.GetCstFunctionCall().Apply(this);
        }
        OutAFunctionCstStatement(node);
    }
    public virtual void InAReturnCstStatement(AReturnCstStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAReturnCstStatement(AReturnCstStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAReturnCstStatement(AReturnCstStatement node)
    {
        InAReturnCstStatement(node);
        if(node.GetCstReturn() != null)
        {
            node.GetCstReturn().Apply(this);
        }
        OutAReturnCstStatement(node);
    }
    public virtual void InANoelseCstIfStatement(ANoelseCstIfStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoelseCstIfStatement(ANoelseCstIfStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseANoelseCstIfStatement(ANoelseCstIfStatement node)
    {
        InANoelseCstIfStatement(node);
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        if(node.GetLPar() != null)
        {
            node.GetLPar().Apply(this);
        }
        if(node.GetCstExpression() != null)
        {
            node.GetCstExpression().Apply(this);
        }
        if(node.GetRPar() != null)
        {
            node.GetRPar().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetCstBlock() != null)
        {
            node.GetCstBlock().Apply(this);
        }
        OutANoelseCstIfStatement(node);
    }
    public virtual void InAWithelseCstIfStatement(AWithelseCstIfStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWithelseCstIfStatement(AWithelseCstIfStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAWithelseCstIfStatement(AWithelseCstIfStatement node)
    {
        InAWithelseCstIfStatement(node);
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        if(node.GetLPar() != null)
        {
            node.GetLPar().Apply(this);
        }
        if(node.GetCstExpression() != null)
        {
            node.GetCstExpression().Apply(this);
        }
        if(node.GetRPar() != null)
        {
            node.GetRPar().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetA() != null)
        {
            node.GetA().Apply(this);
        }
        if(node.GetElse() != null)
        {
            node.GetElse().Apply(this);
        }
        if(node.GetB() != null)
        {
            node.GetB().Apply(this);
        }
        OutAWithelseCstIfStatement(node);
    }
    public virtual void InACstRepeatStatement(ACstRepeatStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutACstRepeatStatement(ACstRepeatStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseACstRepeatStatement(ACstRepeatStatement node)
    {
        InACstRepeatStatement(node);
        if(node.GetRepeat() != null)
        {
            node.GetRepeat().Apply(this);
        }
        if(node.GetLPar() != null)
        {
            node.GetLPar().Apply(this);
        }
        if(node.GetCstExpression() != null)
        {
            node.GetCstExpression().Apply(this);
        }
        if(node.GetRPar() != null)
        {
            node.GetRPar().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetCstBlock() != null)
        {
            node.GetCstBlock().Apply(this);
        }
        OutACstRepeatStatement(node);
    }
    public virtual void InACstWhileStatement(ACstWhileStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutACstWhileStatement(ACstWhileStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseACstWhileStatement(ACstWhileStatement node)
    {
        InACstWhileStatement(node);
        if(node.GetWhile() != null)
        {
            node.GetWhile().Apply(this);
        }
        if(node.GetLPar() != null)
        {
            node.GetLPar().Apply(this);
        }
        if(node.GetCstExpression() != null)
        {
            node.GetCstExpression().Apply(this);
        }
        if(node.GetRPar() != null)
        {
            node.GetRPar().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetCstBlock() != null)
        {
            node.GetCstBlock().Apply(this);
        }
        OutACstWhileStatement(node);
    }
    public virtual void InACstGcodeLiteral(ACstGcodeLiteral node)
    {
        DefaultIn(node);
    }

    public virtual void OutACstGcodeLiteral(ACstGcodeLiteral node)
    {
        DefaultOut(node);
    }

    public override void CaseACstGcodeLiteral(ACstGcodeLiteral node)
    {
        InACstGcodeLiteral(node);
        if(node.GetGcode() != null)
        {
            node.GetGcode().Apply(this);
        }
        if(node.GetLCur() != null)
        {
            node.GetLCur().Apply(this);
        }
        if(node.GetAllCharsExceptCurly() != null)
        {
            node.GetAllCharsExceptCurly().Apply(this);
        }
        if(node.GetRCur() != null)
        {
            node.GetRCur().Apply(this);
        }
        OutACstGcodeLiteral(node);
    }
    public virtual void InACstAssignment(ACstAssignment node)
    {
        DefaultIn(node);
    }

    public virtual void OutACstAssignment(ACstAssignment node)
    {
        DefaultOut(node);
    }

    public override void CaseACstAssignment(ACstAssignment node)
    {
        InACstAssignment(node);
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        if(node.GetAssignmentOp() != null)
        {
            node.GetAssignmentOp().Apply(this);
        }
        if(node.GetCstExpression() != null)
        {
            node.GetCstExpression().Apply(this);
        }
        OutACstAssignment(node);
    }
    public virtual void InACstFunctionCall(ACstFunctionCall node)
    {
        DefaultIn(node);
    }

    public virtual void OutACstFunctionCall(ACstFunctionCall node)
    {
        DefaultOut(node);
    }

    public override void CaseACstFunctionCall(ACstFunctionCall node)
    {
        InACstFunctionCall(node);
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        if(node.GetLPar() != null)
        {
            node.GetLPar().Apply(this);
        }
        if(node.GetCstActualParamList() != null)
        {
            node.GetCstActualParamList().Apply(this);
        }
        if(node.GetRPar() != null)
        {
            node.GetRPar().Apply(this);
        }
        OutACstFunctionCall(node);
    }
    public virtual void InACstReturn(ACstReturn node)
    {
        DefaultIn(node);
    }

    public virtual void OutACstReturn(ACstReturn node)
    {
        DefaultOut(node);
    }

    public override void CaseACstReturn(ACstReturn node)
    {
        InACstReturn(node);
        if(node.GetReturn() != null)
        {
            node.GetReturn().Apply(this);
        }
        if(node.GetCstExpression() != null)
        {
            node.GetCstExpression().Apply(this);
        }
        OutACstReturn(node);
    }
    public virtual void InARecursiveCstActualParamList(ARecursiveCstActualParamList node)
    {
        DefaultIn(node);
    }

    public virtual void OutARecursiveCstActualParamList(ARecursiveCstActualParamList node)
    {
        DefaultOut(node);
    }

    public override void CaseARecursiveCstActualParamList(ARecursiveCstActualParamList node)
    {
        InARecursiveCstActualParamList(node);
        if(node.GetCstExpression() != null)
        {
            node.GetCstExpression().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetCstActualParamList() != null)
        {
            node.GetCstActualParamList().Apply(this);
        }
        OutARecursiveCstActualParamList(node);
    }
    public virtual void InACstActualParamList(ACstActualParamList node)
    {
        DefaultIn(node);
    }

    public virtual void OutACstActualParamList(ACstActualParamList node)
    {
        DefaultOut(node);
    }

    public override void CaseACstActualParamList(ACstActualParamList node)
    {
        InACstActualParamList(node);
        if(node.GetCstExpression() != null)
        {
            node.GetCstExpression().Apply(this);
        }
        OutACstActualParamList(node);
    }
    public virtual void InANotCstExpression(ANotCstExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotCstExpression(ANotCstExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseANotCstExpression(ANotCstExpression node)
    {
        InANotCstExpression(node);
        if(node.GetNot() != null)
        {
            node.GetNot().Apply(this);
        }
        if(node.GetCstExpression() != null)
        {
            node.GetCstExpression().Apply(this);
        }
        OutANotCstExpression(node);
    }
    public virtual void InAEqualCstExpression(AEqualCstExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEqualCstExpression(AEqualCstExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAEqualCstExpression(AEqualCstExpression node)
    {
        InAEqualCstExpression(node);
        if(node.GetCstLowExp() != null)
        {
            node.GetCstLowExp().Apply(this);
        }
        if(node.GetC() != null)
        {
            node.GetC().Apply(this);
        }
        if(node.GetD() != null)
        {
            node.GetD().Apply(this);
        }
        if(node.GetCstExpression() != null)
        {
            node.GetCstExpression().Apply(this);
        }
        OutAEqualCstExpression(node);
    }
    public virtual void InALeCstExpression(ALeCstExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutALeCstExpression(ALeCstExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseALeCstExpression(ALeCstExpression node)
    {
        InALeCstExpression(node);
        if(node.GetCstLowExp() != null)
        {
            node.GetCstLowExp().Apply(this);
        }
        if(node.GetLessThan() != null)
        {
            node.GetLessThan().Apply(this);
        }
        if(node.GetCstExpression() != null)
        {
            node.GetCstExpression().Apply(this);
        }
        OutALeCstExpression(node);
    }
    public virtual void InALeqCstExpression(ALeqCstExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutALeqCstExpression(ALeqCstExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseALeqCstExpression(ALeqCstExpression node)
    {
        InALeqCstExpression(node);
        if(node.GetCstLowExp() != null)
        {
            node.GetCstLowExp().Apply(this);
        }
        if(node.GetLessThanOrEqual() != null)
        {
            node.GetLessThanOrEqual().Apply(this);
        }
        if(node.GetCstExpression() != null)
        {
            node.GetCstExpression().Apply(this);
        }
        OutALeqCstExpression(node);
    }
    public virtual void InAGeCstExpression(AGeCstExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGeCstExpression(AGeCstExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAGeCstExpression(AGeCstExpression node)
    {
        InAGeCstExpression(node);
        if(node.GetCstLowExp() != null)
        {
            node.GetCstLowExp().Apply(this);
        }
        if(node.GetGreaterThan() != null)
        {
            node.GetGreaterThan().Apply(this);
        }
        if(node.GetCstExpression() != null)
        {
            node.GetCstExpression().Apply(this);
        }
        OutAGeCstExpression(node);
    }
    public virtual void InAGeqCstExpression(AGeqCstExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGeqCstExpression(AGeqCstExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAGeqCstExpression(AGeqCstExpression node)
    {
        InAGeqCstExpression(node);
        if(node.GetCstLowExp() != null)
        {
            node.GetCstLowExp().Apply(this);
        }
        if(node.GetGreaterThanOrEqual() != null)
        {
            node.GetGreaterThanOrEqual().Apply(this);
        }
        if(node.GetCstExpression() != null)
        {
            node.GetCstExpression().Apply(this);
        }
        OutAGeqCstExpression(node);
    }
    public virtual void InANeqCstExpression(ANeqCstExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutANeqCstExpression(ANeqCstExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseANeqCstExpression(ANeqCstExpression node)
    {
        InANeqCstExpression(node);
        if(node.GetCstLowExp() != null)
        {
            node.GetCstLowExp().Apply(this);
        }
        if(node.GetNot() != null)
        {
            node.GetNot().Apply(this);
        }
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        if(node.GetCstExpression() != null)
        {
            node.GetCstExpression().Apply(this);
        }
        OutANeqCstExpression(node);
    }
    public virtual void InACstExpression(ACstExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutACstExpression(ACstExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseACstExpression(ACstExpression node)
    {
        InACstExpression(node);
        if(node.GetCstLowExp() != null)
        {
            node.GetCstLowExp().Apply(this);
        }
        OutACstExpression(node);
    }
    public virtual void InAPlusCstLowExp(APlusCstLowExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPlusCstLowExp(APlusCstLowExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAPlusCstLowExp(APlusCstLowExp node)
    {
        InAPlusCstLowExp(node);
        if(node.GetCstMediumExp() != null)
        {
            node.GetCstMediumExp().Apply(this);
        }
        if(node.GetPlusOp() != null)
        {
            node.GetPlusOp().Apply(this);
        }
        if(node.GetCstLowExp() != null)
        {
            node.GetCstLowExp().Apply(this);
        }
        OutAPlusCstLowExp(node);
    }
    public virtual void InAMinusCstLowExp(AMinusCstLowExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMinusCstLowExp(AMinusCstLowExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAMinusCstLowExp(AMinusCstLowExp node)
    {
        InAMinusCstLowExp(node);
        if(node.GetCstMediumExp() != null)
        {
            node.GetCstMediumExp().Apply(this);
        }
        if(node.GetMinusOp() != null)
        {
            node.GetMinusOp().Apply(this);
        }
        if(node.GetCstLowExp() != null)
        {
            node.GetCstLowExp().Apply(this);
        }
        OutAMinusCstLowExp(node);
    }
    public virtual void InACstLowExp(ACstLowExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutACstLowExp(ACstLowExp node)
    {
        DefaultOut(node);
    }

    public override void CaseACstLowExp(ACstLowExp node)
    {
        InACstLowExp(node);
        if(node.GetCstMediumExp() != null)
        {
            node.GetCstMediumExp().Apply(this);
        }
        OutACstLowExp(node);
    }
    public virtual void InAMultCstMediumExp(AMultCstMediumExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultCstMediumExp(AMultCstMediumExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultCstMediumExp(AMultCstMediumExp node)
    {
        InAMultCstMediumExp(node);
        if(node.GetCstMediumExp() != null)
        {
            node.GetCstMediumExp().Apply(this);
        }
        if(node.GetMultiplicationOp() != null)
        {
            node.GetMultiplicationOp().Apply(this);
        }
        if(node.GetCstHighExp() != null)
        {
            node.GetCstHighExp().Apply(this);
        }
        OutAMultCstMediumExp(node);
    }
    public virtual void InADivisionCstMediumExp(ADivisionCstMediumExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutADivisionCstMediumExp(ADivisionCstMediumExp node)
    {
        DefaultOut(node);
    }

    public override void CaseADivisionCstMediumExp(ADivisionCstMediumExp node)
    {
        InADivisionCstMediumExp(node);
        if(node.GetCstMediumExp() != null)
        {
            node.GetCstMediumExp().Apply(this);
        }
        if(node.GetDivisionOp() != null)
        {
            node.GetDivisionOp().Apply(this);
        }
        if(node.GetCstHighExp() != null)
        {
            node.GetCstHighExp().Apply(this);
        }
        OutADivisionCstMediumExp(node);
    }
    public virtual void InAModuloCstMediumExp(AModuloCstMediumExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAModuloCstMediumExp(AModuloCstMediumExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAModuloCstMediumExp(AModuloCstMediumExp node)
    {
        InAModuloCstMediumExp(node);
        if(node.GetCstMediumExp() != null)
        {
            node.GetCstMediumExp().Apply(this);
        }
        if(node.GetModuloOp() != null)
        {
            node.GetModuloOp().Apply(this);
        }
        if(node.GetCstHighExp() != null)
        {
            node.GetCstHighExp().Apply(this);
        }
        OutAModuloCstMediumExp(node);
    }
    public virtual void InACstMediumExp(ACstMediumExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutACstMediumExp(ACstMediumExp node)
    {
        DefaultOut(node);
    }

    public override void CaseACstMediumExp(ACstMediumExp node)
    {
        InACstMediumExp(node);
        if(node.GetCstHighExp() != null)
        {
            node.GetCstHighExp().Apply(this);
        }
        OutACstMediumExp(node);
    }
    public virtual void InANumberCstHighExp(ANumberCstHighExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutANumberCstHighExp(ANumberCstHighExp node)
    {
        DefaultOut(node);
    }

    public override void CaseANumberCstHighExp(ANumberCstHighExp node)
    {
        InANumberCstHighExp(node);
        if(node.GetNumber() != null)
        {
            node.GetNumber().Apply(this);
        }
        OutANumberCstHighExp(node);
    }
    public virtual void InABoolCstHighExp(ABoolCstHighExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutABoolCstHighExp(ABoolCstHighExp node)
    {
        DefaultOut(node);
    }

    public override void CaseABoolCstHighExp(ABoolCstHighExp node)
    {
        InABoolCstHighExp(node);
        if(node.GetBoolValue() != null)
        {
            node.GetBoolValue().Apply(this);
        }
        OutABoolCstHighExp(node);
    }
    public virtual void InAIdCstHighExp(AIdCstHighExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIdCstHighExp(AIdCstHighExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAIdCstHighExp(AIdCstHighExp node)
    {
        InAIdCstHighExp(node);
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        OutAIdCstHighExp(node);
    }
    public virtual void InAFuncCallCstHighExp(AFuncCallCstHighExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFuncCallCstHighExp(AFuncCallCstHighExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAFuncCallCstHighExp(AFuncCallCstHighExp node)
    {
        InAFuncCallCstHighExp(node);
        if(node.GetCstFunctionCall() != null)
        {
            node.GetCstFunctionCall().Apply(this);
        }
        OutAFuncCallCstHighExp(node);
    }
    public virtual void InAVectorCstHighExp(AVectorCstHighExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVectorCstHighExp(AVectorCstHighExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAVectorCstHighExp(AVectorCstHighExp node)
    {
        InAVectorCstHighExp(node);
        if(node.GetCstVectorValues() != null)
        {
            node.GetCstVectorValues().Apply(this);
        }
        OutAVectorCstHighExp(node);
    }
    public virtual void InAParenCstHighExp(AParenCstHighExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParenCstHighExp(AParenCstHighExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAParenCstHighExp(AParenCstHighExp node)
    {
        InAParenCstHighExp(node);
        if(node.GetLPar() != null)
        {
            node.GetLPar().Apply(this);
        }
        if(node.GetCstExpression() != null)
        {
            node.GetCstExpression().Apply(this);
        }
        if(node.GetRPar() != null)
        {
            node.GetRPar().Apply(this);
        }
        OutAParenCstHighExp(node);
    }
}


public class ReversedDepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetEOF().Apply(this);
        node.GetPCstProgram().Apply(this);
        OutStart(node);
    }

    public virtual void InACstProgram(ACstProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutACstProgram(ACstProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseACstProgram(ACstProgram node)
    {
        InACstProgram(node);
        if(node.GetA() != null)
        {
            node.GetA().Apply(this);
        }
        OutACstProgram(node);
    }
    public virtual void InACstMainFunctionDeclaration(ACstMainFunctionDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutACstMainFunctionDeclaration(ACstMainFunctionDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseACstMainFunctionDeclaration(ACstMainFunctionDeclaration node)
    {
        InACstMainFunctionDeclaration(node);
        if(node.GetCstFunctionBody() != null)
        {
            node.GetCstFunctionBody().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetRPar() != null)
        {
            node.GetRPar().Apply(this);
        }
        if(node.GetLPar() != null)
        {
            node.GetLPar().Apply(this);
        }
        if(node.GetMain() != null)
        {
            node.GetMain().Apply(this);
        }
        OutACstMainFunctionDeclaration(node);
    }
    public virtual void InARecursiveCstDeclarationList(ARecursiveCstDeclarationList node)
    {
        DefaultIn(node);
    }

    public virtual void OutARecursiveCstDeclarationList(ARecursiveCstDeclarationList node)
    {
        DefaultOut(node);
    }

    public override void CaseARecursiveCstDeclarationList(ARecursiveCstDeclarationList node)
    {
        InARecursiveCstDeclarationList(node);
        if(node.GetCstDeclarationList() != null)
        {
            node.GetCstDeclarationList().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetEol().Count];
            node.GetEol().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((TEol) temp[i]).Apply(this);
            }
        }
        if(node.GetCstDeclaration() != null)
        {
            node.GetCstDeclaration().Apply(this);
        }
        OutARecursiveCstDeclarationList(node);
    }
    public virtual void InACstDeclarationList(ACstDeclarationList node)
    {
        DefaultIn(node);
    }

    public virtual void OutACstDeclarationList(ACstDeclarationList node)
    {
        DefaultOut(node);
    }

    public override void CaseACstDeclarationList(ACstDeclarationList node)
    {
        InACstDeclarationList(node);
        if(node.GetCstDeclaration() != null)
        {
            node.GetCstDeclaration().Apply(this);
        }
        OutACstDeclarationList(node);
    }
    public virtual void InAVariableCstDeclaration(AVariableCstDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableCstDeclaration(AVariableCstDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableCstDeclaration(AVariableCstDeclaration node)
    {
        InAVariableCstDeclaration(node);
        if(node.GetCstVariableDeclaration() != null)
        {
            node.GetCstVariableDeclaration().Apply(this);
        }
        OutAVariableCstDeclaration(node);
    }
    public virtual void InAFunctionCstDeclaration(AFunctionCstDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionCstDeclaration(AFunctionCstDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionCstDeclaration(AFunctionCstDeclaration node)
    {
        InAFunctionCstDeclaration(node);
        if(node.GetCstFunctionDeclaration() != null)
        {
            node.GetCstFunctionDeclaration().Apply(this);
        }
        OutAFunctionCstDeclaration(node);
    }
    public virtual void InAMainCstDeclaration(AMainCstDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainCstDeclaration(AMainCstDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainCstDeclaration(AMainCstDeclaration node)
    {
        InAMainCstDeclaration(node);
        if(node.GetCstMainFunctionDeclaration() != null)
        {
            node.GetCstMainFunctionDeclaration().Apply(this);
        }
        OutAMainCstDeclaration(node);
    }
    public virtual void InASimpleInitialCstVariableDeclaration(ASimpleInitialCstVariableDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutASimpleInitialCstVariableDeclaration(ASimpleInitialCstVariableDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseASimpleInitialCstVariableDeclaration(ASimpleInitialCstVariableDeclaration node)
    {
        InASimpleInitialCstVariableDeclaration(node);
        if(node.GetCstExpression() != null)
        {
            node.GetCstExpression().Apply(this);
        }
        if(node.GetAssignmentOp() != null)
        {
            node.GetAssignmentOp().Apply(this);
        }
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        if(node.GetCstSimpleTypes() != null)
        {
            node.GetCstSimpleTypes().Apply(this);
        }
        if(node.GetConst() != null)
        {
            node.GetConst().Apply(this);
        }
        OutASimpleInitialCstVariableDeclaration(node);
    }
    public virtual void InASimpleUninitialCstVariableDeclaration(ASimpleUninitialCstVariableDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutASimpleUninitialCstVariableDeclaration(ASimpleUninitialCstVariableDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseASimpleUninitialCstVariableDeclaration(ASimpleUninitialCstVariableDeclaration node)
    {
        InASimpleUninitialCstVariableDeclaration(node);
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        if(node.GetCstSimpleTypes() != null)
        {
            node.GetCstSimpleTypes().Apply(this);
        }
        if(node.GetConst() != null)
        {
            node.GetConst().Apply(this);
        }
        OutASimpleUninitialCstVariableDeclaration(node);
    }
    public virtual void InAVectorCstVariableDeclaration(AVectorCstVariableDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVectorCstVariableDeclaration(AVectorCstVariableDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseAVectorCstVariableDeclaration(AVectorCstVariableDeclaration node)
    {
        InAVectorCstVariableDeclaration(node);
        if(node.GetCstVectorDeclaration() != null)
        {
            node.GetCstVectorDeclaration().Apply(this);
        }
        OutAVectorCstVariableDeclaration(node);
    }
    public virtual void InAInitialCstVectorDeclaration(AInitialCstVectorDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutAInitialCstVectorDeclaration(AInitialCstVectorDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseAInitialCstVectorDeclaration(AInitialCstVectorDeclaration node)
    {
        InAInitialCstVectorDeclaration(node);
        if(node.GetCstVectorValues() != null)
        {
            node.GetCstVectorValues().Apply(this);
        }
        if(node.GetAssignmentOp() != null)
        {
            node.GetAssignmentOp().Apply(this);
        }
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        if(node.GetVector() != null)
        {
            node.GetVector().Apply(this);
        }
        if(node.GetConst() != null)
        {
            node.GetConst().Apply(this);
        }
        OutAInitialCstVectorDeclaration(node);
    }
    public virtual void InACstVectorDeclaration(ACstVectorDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutACstVectorDeclaration(ACstVectorDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseACstVectorDeclaration(ACstVectorDeclaration node)
    {
        InACstVectorDeclaration(node);
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        if(node.GetCstVectorValues() != null)
        {
            node.GetCstVectorValues().Apply(this);
        }
        if(node.GetConst() != null)
        {
            node.GetConst().Apply(this);
        }
        OutACstVectorDeclaration(node);
    }
    public virtual void InASimpleCstAllTypes(ASimpleCstAllTypes node)
    {
        DefaultIn(node);
    }

    public virtual void OutASimpleCstAllTypes(ASimpleCstAllTypes node)
    {
        DefaultOut(node);
    }

    public override void CaseASimpleCstAllTypes(ASimpleCstAllTypes node)
    {
        InASimpleCstAllTypes(node);
        if(node.GetCstSimpleTypes() != null)
        {
            node.GetCstSimpleTypes().Apply(this);
        }
        OutASimpleCstAllTypes(node);
    }
    public virtual void InACstAllTypes(ACstAllTypes node)
    {
        DefaultIn(node);
    }

    public virtual void OutACstAllTypes(ACstAllTypes node)
    {
        DefaultOut(node);
    }

    public override void CaseACstAllTypes(ACstAllTypes node)
    {
        InACstAllTypes(node);
        if(node.GetVector() != null)
        {
            node.GetVector().Apply(this);
        }
        OutACstAllTypes(node);
    }
    public virtual void InAIntegerCstSimpleTypes(AIntegerCstSimpleTypes node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntegerCstSimpleTypes(AIntegerCstSimpleTypes node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntegerCstSimpleTypes(AIntegerCstSimpleTypes node)
    {
        InAIntegerCstSimpleTypes(node);
        if(node.GetInt() != null)
        {
            node.GetInt().Apply(this);
        }
        OutAIntegerCstSimpleTypes(node);
    }
    public virtual void InAFloatingpointCstSimpleTypes(AFloatingpointCstSimpleTypes node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatingpointCstSimpleTypes(AFloatingpointCstSimpleTypes node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatingpointCstSimpleTypes(AFloatingpointCstSimpleTypes node)
    {
        InAFloatingpointCstSimpleTypes(node);
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        OutAFloatingpointCstSimpleTypes(node);
    }
    public virtual void InABoolCstSimpleTypes(ABoolCstSimpleTypes node)
    {
        DefaultIn(node);
    }

    public virtual void OutABoolCstSimpleTypes(ABoolCstSimpleTypes node)
    {
        DefaultOut(node);
    }

    public override void CaseABoolCstSimpleTypes(ABoolCstSimpleTypes node)
    {
        InABoolCstSimpleTypes(node);
        if(node.GetBool() != null)
        {
            node.GetBool().Apply(this);
        }
        OutABoolCstSimpleTypes(node);
    }
    public virtual void InACstVectorValues(ACstVectorValues node)
    {
        DefaultIn(node);
    }

    public virtual void OutACstVectorValues(ACstVectorValues node)
    {
        DefaultOut(node);
    }

    public override void CaseACstVectorValues(ACstVectorValues node)
    {
        InACstVectorValues(node);
        if(node.GetRPar() != null)
        {
            node.GetRPar().Apply(this);
        }
        if(node.GetC() != null)
        {
            node.GetC().Apply(this);
        }
        if(node.GetW() != null)
        {
            node.GetW().Apply(this);
        }
        if(node.GetB() != null)
        {
            node.GetB().Apply(this);
        }
        if(node.GetQ() != null)
        {
            node.GetQ().Apply(this);
        }
        if(node.GetA() != null)
        {
            node.GetA().Apply(this);
        }
        if(node.GetLPar() != null)
        {
            node.GetLPar().Apply(this);
        }
        OutACstVectorValues(node);
    }
    public virtual void InANotvoidCstFunctionDeclaration(ANotvoidCstFunctionDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotvoidCstFunctionDeclaration(ANotvoidCstFunctionDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseANotvoidCstFunctionDeclaration(ANotvoidCstFunctionDeclaration node)
    {
        InANotvoidCstFunctionDeclaration(node);
        if(node.GetCstFunctionBody() != null)
        {
            node.GetCstFunctionBody().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetRPar() != null)
        {
            node.GetRPar().Apply(this);
        }
        if(node.GetCstFormalParamList() != null)
        {
            node.GetCstFormalParamList().Apply(this);
        }
        if(node.GetLPar() != null)
        {
            node.GetLPar().Apply(this);
        }
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        if(node.GetCstAllTypes() != null)
        {
            node.GetCstAllTypes().Apply(this);
        }
        OutANotvoidCstFunctionDeclaration(node);
    }
    public virtual void InACstFunctionDeclaration(ACstFunctionDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutACstFunctionDeclaration(ACstFunctionDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseACstFunctionDeclaration(ACstFunctionDeclaration node)
    {
        InACstFunctionDeclaration(node);
        if(node.GetCstFunctionBody() != null)
        {
            node.GetCstFunctionBody().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetRPar() != null)
        {
            node.GetRPar().Apply(this);
        }
        if(node.GetCstFormalParamList() != null)
        {
            node.GetCstFormalParamList().Apply(this);
        }
        if(node.GetLPar() != null)
        {
            node.GetLPar().Apply(this);
        }
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        if(node.GetVoid() != null)
        {
            node.GetVoid().Apply(this);
        }
        OutACstFunctionDeclaration(node);
    }
    public virtual void InARecursiveCstFormalParamList(ARecursiveCstFormalParamList node)
    {
        DefaultIn(node);
    }

    public virtual void OutARecursiveCstFormalParamList(ARecursiveCstFormalParamList node)
    {
        DefaultOut(node);
    }

    public override void CaseARecursiveCstFormalParamList(ARecursiveCstFormalParamList node)
    {
        InARecursiveCstFormalParamList(node);
        if(node.GetCstFormalParamList() != null)
        {
            node.GetCstFormalParamList().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetCstFormalParam() != null)
        {
            node.GetCstFormalParam().Apply(this);
        }
        OutARecursiveCstFormalParamList(node);
    }
    public virtual void InACstFormalParamList(ACstFormalParamList node)
    {
        DefaultIn(node);
    }

    public virtual void OutACstFormalParamList(ACstFormalParamList node)
    {
        DefaultOut(node);
    }

    public override void CaseACstFormalParamList(ACstFormalParamList node)
    {
        InACstFormalParamList(node);
        if(node.GetCstFormalParam() != null)
        {
            node.GetCstFormalParam().Apply(this);
        }
        OutACstFormalParamList(node);
    }
    public virtual void InACstFormalParam(ACstFormalParam node)
    {
        DefaultIn(node);
    }

    public virtual void OutACstFormalParam(ACstFormalParam node)
    {
        DefaultOut(node);
    }

    public override void CaseACstFormalParam(ACstFormalParam node)
    {
        InACstFormalParam(node);
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        if(node.GetCstAllTypes() != null)
        {
            node.GetCstAllTypes().Apply(this);
        }
        OutACstFormalParam(node);
    }
    public virtual void InACstFunctionBody(ACstFunctionBody node)
    {
        DefaultIn(node);
    }

    public virtual void OutACstFunctionBody(ACstFunctionBody node)
    {
        DefaultOut(node);
    }

    public override void CaseACstFunctionBody(ACstFunctionBody node)
    {
        InACstFunctionBody(node);
        if(node.GetCstBlock() != null)
        {
            node.GetCstBlock().Apply(this);
        }
        OutACstFunctionBody(node);
    }
    public virtual void InACstBlock(ACstBlock node)
    {
        DefaultIn(node);
    }

    public virtual void OutACstBlock(ACstBlock node)
    {
        DefaultOut(node);
    }

    public override void CaseACstBlock(ACstBlock node)
    {
        InACstBlock(node);
        if(node.GetRCur() != null)
        {
            node.GetRCur().Apply(this);
        }
        if(node.GetCstStatementList() != null)
        {
            node.GetCstStatementList().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetLCur() != null)
        {
            node.GetLCur().Apply(this);
        }
        OutACstBlock(node);
    }
    public virtual void InARecursiveCstStatementList(ARecursiveCstStatementList node)
    {
        DefaultIn(node);
    }

    public virtual void OutARecursiveCstStatementList(ARecursiveCstStatementList node)
    {
        DefaultOut(node);
    }

    public override void CaseARecursiveCstStatementList(ARecursiveCstStatementList node)
    {
        InARecursiveCstStatementList(node);
        if(node.GetCstStatementList() != null)
        {
            node.GetCstStatementList().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetCstStatement() != null)
        {
            node.GetCstStatement().Apply(this);
        }
        OutARecursiveCstStatementList(node);
    }
    public virtual void InACstStatementList(ACstStatementList node)
    {
        DefaultIn(node);
    }

    public virtual void OutACstStatementList(ACstStatementList node)
    {
        DefaultOut(node);
    }

    public override void CaseACstStatementList(ACstStatementList node)
    {
        InACstStatementList(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetCstStatement() != null)
        {
            node.GetCstStatement().Apply(this);
        }
        OutACstStatementList(node);
    }
    public virtual void InADeclCstStatement(ADeclCstStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclCstStatement(ADeclCstStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclCstStatement(ADeclCstStatement node)
    {
        InADeclCstStatement(node);
        if(node.GetCstVariableDeclaration() != null)
        {
            node.GetCstVariableDeclaration().Apply(this);
        }
        OutADeclCstStatement(node);
    }
    public virtual void InAIfCstStatement(AIfCstStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfCstStatement(AIfCstStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfCstStatement(AIfCstStatement node)
    {
        InAIfCstStatement(node);
        if(node.GetCstIfStatement() != null)
        {
            node.GetCstIfStatement().Apply(this);
        }
        OutAIfCstStatement(node);
    }
    public virtual void InARepeatCstStatement(ARepeatCstStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutARepeatCstStatement(ARepeatCstStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseARepeatCstStatement(ARepeatCstStatement node)
    {
        InARepeatCstStatement(node);
        if(node.GetCstRepeatStatement() != null)
        {
            node.GetCstRepeatStatement().Apply(this);
        }
        OutARepeatCstStatement(node);
    }
    public virtual void InAWhileCstStatement(AWhileCstStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileCstStatement(AWhileCstStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileCstStatement(AWhileCstStatement node)
    {
        InAWhileCstStatement(node);
        if(node.GetCstWhileStatement() != null)
        {
            node.GetCstWhileStatement().Apply(this);
        }
        OutAWhileCstStatement(node);
    }
    public virtual void InAGcodeCstStatement(AGcodeCstStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGcodeCstStatement(AGcodeCstStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAGcodeCstStatement(AGcodeCstStatement node)
    {
        InAGcodeCstStatement(node);
        if(node.GetCstGcodeLiteral() != null)
        {
            node.GetCstGcodeLiteral().Apply(this);
        }
        OutAGcodeCstStatement(node);
    }
    public virtual void InAAssignmentCstStatement(AAssignmentCstStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignmentCstStatement(AAssignmentCstStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignmentCstStatement(AAssignmentCstStatement node)
    {
        InAAssignmentCstStatement(node);
        if(node.GetCstAssignment() != null)
        {
            node.GetCstAssignment().Apply(this);
        }
        OutAAssignmentCstStatement(node);
    }
    public virtual void InAFunctionCstStatement(AFunctionCstStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionCstStatement(AFunctionCstStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionCstStatement(AFunctionCstStatement node)
    {
        InAFunctionCstStatement(node);
        if(node.GetCstFunctionCall() != null)
        {
            node.GetCstFunctionCall().Apply(this);
        }
        OutAFunctionCstStatement(node);
    }
    public virtual void InAReturnCstStatement(AReturnCstStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAReturnCstStatement(AReturnCstStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAReturnCstStatement(AReturnCstStatement node)
    {
        InAReturnCstStatement(node);
        if(node.GetCstReturn() != null)
        {
            node.GetCstReturn().Apply(this);
        }
        OutAReturnCstStatement(node);
    }
    public virtual void InANoelseCstIfStatement(ANoelseCstIfStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoelseCstIfStatement(ANoelseCstIfStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseANoelseCstIfStatement(ANoelseCstIfStatement node)
    {
        InANoelseCstIfStatement(node);
        if(node.GetCstBlock() != null)
        {
            node.GetCstBlock().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetRPar() != null)
        {
            node.GetRPar().Apply(this);
        }
        if(node.GetCstExpression() != null)
        {
            node.GetCstExpression().Apply(this);
        }
        if(node.GetLPar() != null)
        {
            node.GetLPar().Apply(this);
        }
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        OutANoelseCstIfStatement(node);
    }
    public virtual void InAWithelseCstIfStatement(AWithelseCstIfStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWithelseCstIfStatement(AWithelseCstIfStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAWithelseCstIfStatement(AWithelseCstIfStatement node)
    {
        InAWithelseCstIfStatement(node);
        if(node.GetB() != null)
        {
            node.GetB().Apply(this);
        }
        if(node.GetElse() != null)
        {
            node.GetElse().Apply(this);
        }
        if(node.GetA() != null)
        {
            node.GetA().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetRPar() != null)
        {
            node.GetRPar().Apply(this);
        }
        if(node.GetCstExpression() != null)
        {
            node.GetCstExpression().Apply(this);
        }
        if(node.GetLPar() != null)
        {
            node.GetLPar().Apply(this);
        }
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        OutAWithelseCstIfStatement(node);
    }
    public virtual void InACstRepeatStatement(ACstRepeatStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutACstRepeatStatement(ACstRepeatStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseACstRepeatStatement(ACstRepeatStatement node)
    {
        InACstRepeatStatement(node);
        if(node.GetCstBlock() != null)
        {
            node.GetCstBlock().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetRPar() != null)
        {
            node.GetRPar().Apply(this);
        }
        if(node.GetCstExpression() != null)
        {
            node.GetCstExpression().Apply(this);
        }
        if(node.GetLPar() != null)
        {
            node.GetLPar().Apply(this);
        }
        if(node.GetRepeat() != null)
        {
            node.GetRepeat().Apply(this);
        }
        OutACstRepeatStatement(node);
    }
    public virtual void InACstWhileStatement(ACstWhileStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutACstWhileStatement(ACstWhileStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseACstWhileStatement(ACstWhileStatement node)
    {
        InACstWhileStatement(node);
        if(node.GetCstBlock() != null)
        {
            node.GetCstBlock().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetRPar() != null)
        {
            node.GetRPar().Apply(this);
        }
        if(node.GetCstExpression() != null)
        {
            node.GetCstExpression().Apply(this);
        }
        if(node.GetLPar() != null)
        {
            node.GetLPar().Apply(this);
        }
        if(node.GetWhile() != null)
        {
            node.GetWhile().Apply(this);
        }
        OutACstWhileStatement(node);
    }
    public virtual void InACstGcodeLiteral(ACstGcodeLiteral node)
    {
        DefaultIn(node);
    }

    public virtual void OutACstGcodeLiteral(ACstGcodeLiteral node)
    {
        DefaultOut(node);
    }

    public override void CaseACstGcodeLiteral(ACstGcodeLiteral node)
    {
        InACstGcodeLiteral(node);
        if(node.GetRCur() != null)
        {
            node.GetRCur().Apply(this);
        }
        if(node.GetAllCharsExceptCurly() != null)
        {
            node.GetAllCharsExceptCurly().Apply(this);
        }
        if(node.GetLCur() != null)
        {
            node.GetLCur().Apply(this);
        }
        if(node.GetGcode() != null)
        {
            node.GetGcode().Apply(this);
        }
        OutACstGcodeLiteral(node);
    }
    public virtual void InACstAssignment(ACstAssignment node)
    {
        DefaultIn(node);
    }

    public virtual void OutACstAssignment(ACstAssignment node)
    {
        DefaultOut(node);
    }

    public override void CaseACstAssignment(ACstAssignment node)
    {
        InACstAssignment(node);
        if(node.GetCstExpression() != null)
        {
            node.GetCstExpression().Apply(this);
        }
        if(node.GetAssignmentOp() != null)
        {
            node.GetAssignmentOp().Apply(this);
        }
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        OutACstAssignment(node);
    }
    public virtual void InACstFunctionCall(ACstFunctionCall node)
    {
        DefaultIn(node);
    }

    public virtual void OutACstFunctionCall(ACstFunctionCall node)
    {
        DefaultOut(node);
    }

    public override void CaseACstFunctionCall(ACstFunctionCall node)
    {
        InACstFunctionCall(node);
        if(node.GetRPar() != null)
        {
            node.GetRPar().Apply(this);
        }
        if(node.GetCstActualParamList() != null)
        {
            node.GetCstActualParamList().Apply(this);
        }
        if(node.GetLPar() != null)
        {
            node.GetLPar().Apply(this);
        }
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        OutACstFunctionCall(node);
    }
    public virtual void InACstReturn(ACstReturn node)
    {
        DefaultIn(node);
    }

    public virtual void OutACstReturn(ACstReturn node)
    {
        DefaultOut(node);
    }

    public override void CaseACstReturn(ACstReturn node)
    {
        InACstReturn(node);
        if(node.GetCstExpression() != null)
        {
            node.GetCstExpression().Apply(this);
        }
        if(node.GetReturn() != null)
        {
            node.GetReturn().Apply(this);
        }
        OutACstReturn(node);
    }
    public virtual void InARecursiveCstActualParamList(ARecursiveCstActualParamList node)
    {
        DefaultIn(node);
    }

    public virtual void OutARecursiveCstActualParamList(ARecursiveCstActualParamList node)
    {
        DefaultOut(node);
    }

    public override void CaseARecursiveCstActualParamList(ARecursiveCstActualParamList node)
    {
        InARecursiveCstActualParamList(node);
        if(node.GetCstActualParamList() != null)
        {
            node.GetCstActualParamList().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetCstExpression() != null)
        {
            node.GetCstExpression().Apply(this);
        }
        OutARecursiveCstActualParamList(node);
    }
    public virtual void InACstActualParamList(ACstActualParamList node)
    {
        DefaultIn(node);
    }

    public virtual void OutACstActualParamList(ACstActualParamList node)
    {
        DefaultOut(node);
    }

    public override void CaseACstActualParamList(ACstActualParamList node)
    {
        InACstActualParamList(node);
        if(node.GetCstExpression() != null)
        {
            node.GetCstExpression().Apply(this);
        }
        OutACstActualParamList(node);
    }
    public virtual void InANotCstExpression(ANotCstExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotCstExpression(ANotCstExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseANotCstExpression(ANotCstExpression node)
    {
        InANotCstExpression(node);
        if(node.GetCstExpression() != null)
        {
            node.GetCstExpression().Apply(this);
        }
        if(node.GetNot() != null)
        {
            node.GetNot().Apply(this);
        }
        OutANotCstExpression(node);
    }
    public virtual void InAEqualCstExpression(AEqualCstExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEqualCstExpression(AEqualCstExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAEqualCstExpression(AEqualCstExpression node)
    {
        InAEqualCstExpression(node);
        if(node.GetCstExpression() != null)
        {
            node.GetCstExpression().Apply(this);
        }
        if(node.GetD() != null)
        {
            node.GetD().Apply(this);
        }
        if(node.GetC() != null)
        {
            node.GetC().Apply(this);
        }
        if(node.GetCstLowExp() != null)
        {
            node.GetCstLowExp().Apply(this);
        }
        OutAEqualCstExpression(node);
    }
    public virtual void InALeCstExpression(ALeCstExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutALeCstExpression(ALeCstExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseALeCstExpression(ALeCstExpression node)
    {
        InALeCstExpression(node);
        if(node.GetCstExpression() != null)
        {
            node.GetCstExpression().Apply(this);
        }
        if(node.GetLessThan() != null)
        {
            node.GetLessThan().Apply(this);
        }
        if(node.GetCstLowExp() != null)
        {
            node.GetCstLowExp().Apply(this);
        }
        OutALeCstExpression(node);
    }
    public virtual void InALeqCstExpression(ALeqCstExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutALeqCstExpression(ALeqCstExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseALeqCstExpression(ALeqCstExpression node)
    {
        InALeqCstExpression(node);
        if(node.GetCstExpression() != null)
        {
            node.GetCstExpression().Apply(this);
        }
        if(node.GetLessThanOrEqual() != null)
        {
            node.GetLessThanOrEqual().Apply(this);
        }
        if(node.GetCstLowExp() != null)
        {
            node.GetCstLowExp().Apply(this);
        }
        OutALeqCstExpression(node);
    }
    public virtual void InAGeCstExpression(AGeCstExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGeCstExpression(AGeCstExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAGeCstExpression(AGeCstExpression node)
    {
        InAGeCstExpression(node);
        if(node.GetCstExpression() != null)
        {
            node.GetCstExpression().Apply(this);
        }
        if(node.GetGreaterThan() != null)
        {
            node.GetGreaterThan().Apply(this);
        }
        if(node.GetCstLowExp() != null)
        {
            node.GetCstLowExp().Apply(this);
        }
        OutAGeCstExpression(node);
    }
    public virtual void InAGeqCstExpression(AGeqCstExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGeqCstExpression(AGeqCstExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAGeqCstExpression(AGeqCstExpression node)
    {
        InAGeqCstExpression(node);
        if(node.GetCstExpression() != null)
        {
            node.GetCstExpression().Apply(this);
        }
        if(node.GetGreaterThanOrEqual() != null)
        {
            node.GetGreaterThanOrEqual().Apply(this);
        }
        if(node.GetCstLowExp() != null)
        {
            node.GetCstLowExp().Apply(this);
        }
        OutAGeqCstExpression(node);
    }
    public virtual void InANeqCstExpression(ANeqCstExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutANeqCstExpression(ANeqCstExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseANeqCstExpression(ANeqCstExpression node)
    {
        InANeqCstExpression(node);
        if(node.GetCstExpression() != null)
        {
            node.GetCstExpression().Apply(this);
        }
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        if(node.GetNot() != null)
        {
            node.GetNot().Apply(this);
        }
        if(node.GetCstLowExp() != null)
        {
            node.GetCstLowExp().Apply(this);
        }
        OutANeqCstExpression(node);
    }
    public virtual void InACstExpression(ACstExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutACstExpression(ACstExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseACstExpression(ACstExpression node)
    {
        InACstExpression(node);
        if(node.GetCstLowExp() != null)
        {
            node.GetCstLowExp().Apply(this);
        }
        OutACstExpression(node);
    }
    public virtual void InAPlusCstLowExp(APlusCstLowExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPlusCstLowExp(APlusCstLowExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAPlusCstLowExp(APlusCstLowExp node)
    {
        InAPlusCstLowExp(node);
        if(node.GetCstLowExp() != null)
        {
            node.GetCstLowExp().Apply(this);
        }
        if(node.GetPlusOp() != null)
        {
            node.GetPlusOp().Apply(this);
        }
        if(node.GetCstMediumExp() != null)
        {
            node.GetCstMediumExp().Apply(this);
        }
        OutAPlusCstLowExp(node);
    }
    public virtual void InAMinusCstLowExp(AMinusCstLowExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMinusCstLowExp(AMinusCstLowExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAMinusCstLowExp(AMinusCstLowExp node)
    {
        InAMinusCstLowExp(node);
        if(node.GetCstLowExp() != null)
        {
            node.GetCstLowExp().Apply(this);
        }
        if(node.GetMinusOp() != null)
        {
            node.GetMinusOp().Apply(this);
        }
        if(node.GetCstMediumExp() != null)
        {
            node.GetCstMediumExp().Apply(this);
        }
        OutAMinusCstLowExp(node);
    }
    public virtual void InACstLowExp(ACstLowExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutACstLowExp(ACstLowExp node)
    {
        DefaultOut(node);
    }

    public override void CaseACstLowExp(ACstLowExp node)
    {
        InACstLowExp(node);
        if(node.GetCstMediumExp() != null)
        {
            node.GetCstMediumExp().Apply(this);
        }
        OutACstLowExp(node);
    }
    public virtual void InAMultCstMediumExp(AMultCstMediumExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultCstMediumExp(AMultCstMediumExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultCstMediumExp(AMultCstMediumExp node)
    {
        InAMultCstMediumExp(node);
        if(node.GetCstHighExp() != null)
        {
            node.GetCstHighExp().Apply(this);
        }
        if(node.GetMultiplicationOp() != null)
        {
            node.GetMultiplicationOp().Apply(this);
        }
        if(node.GetCstMediumExp() != null)
        {
            node.GetCstMediumExp().Apply(this);
        }
        OutAMultCstMediumExp(node);
    }
    public virtual void InADivisionCstMediumExp(ADivisionCstMediumExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutADivisionCstMediumExp(ADivisionCstMediumExp node)
    {
        DefaultOut(node);
    }

    public override void CaseADivisionCstMediumExp(ADivisionCstMediumExp node)
    {
        InADivisionCstMediumExp(node);
        if(node.GetCstHighExp() != null)
        {
            node.GetCstHighExp().Apply(this);
        }
        if(node.GetDivisionOp() != null)
        {
            node.GetDivisionOp().Apply(this);
        }
        if(node.GetCstMediumExp() != null)
        {
            node.GetCstMediumExp().Apply(this);
        }
        OutADivisionCstMediumExp(node);
    }
    public virtual void InAModuloCstMediumExp(AModuloCstMediumExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAModuloCstMediumExp(AModuloCstMediumExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAModuloCstMediumExp(AModuloCstMediumExp node)
    {
        InAModuloCstMediumExp(node);
        if(node.GetCstHighExp() != null)
        {
            node.GetCstHighExp().Apply(this);
        }
        if(node.GetModuloOp() != null)
        {
            node.GetModuloOp().Apply(this);
        }
        if(node.GetCstMediumExp() != null)
        {
            node.GetCstMediumExp().Apply(this);
        }
        OutAModuloCstMediumExp(node);
    }
    public virtual void InACstMediumExp(ACstMediumExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutACstMediumExp(ACstMediumExp node)
    {
        DefaultOut(node);
    }

    public override void CaseACstMediumExp(ACstMediumExp node)
    {
        InACstMediumExp(node);
        if(node.GetCstHighExp() != null)
        {
            node.GetCstHighExp().Apply(this);
        }
        OutACstMediumExp(node);
    }
    public virtual void InANumberCstHighExp(ANumberCstHighExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutANumberCstHighExp(ANumberCstHighExp node)
    {
        DefaultOut(node);
    }

    public override void CaseANumberCstHighExp(ANumberCstHighExp node)
    {
        InANumberCstHighExp(node);
        if(node.GetNumber() != null)
        {
            node.GetNumber().Apply(this);
        }
        OutANumberCstHighExp(node);
    }
    public virtual void InABoolCstHighExp(ABoolCstHighExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutABoolCstHighExp(ABoolCstHighExp node)
    {
        DefaultOut(node);
    }

    public override void CaseABoolCstHighExp(ABoolCstHighExp node)
    {
        InABoolCstHighExp(node);
        if(node.GetBoolValue() != null)
        {
            node.GetBoolValue().Apply(this);
        }
        OutABoolCstHighExp(node);
    }
    public virtual void InAIdCstHighExp(AIdCstHighExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIdCstHighExp(AIdCstHighExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAIdCstHighExp(AIdCstHighExp node)
    {
        InAIdCstHighExp(node);
        if(node.GetIdentifier() != null)
        {
            node.GetIdentifier().Apply(this);
        }
        OutAIdCstHighExp(node);
    }
    public virtual void InAFuncCallCstHighExp(AFuncCallCstHighExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFuncCallCstHighExp(AFuncCallCstHighExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAFuncCallCstHighExp(AFuncCallCstHighExp node)
    {
        InAFuncCallCstHighExp(node);
        if(node.GetCstFunctionCall() != null)
        {
            node.GetCstFunctionCall().Apply(this);
        }
        OutAFuncCallCstHighExp(node);
    }
    public virtual void InAVectorCstHighExp(AVectorCstHighExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVectorCstHighExp(AVectorCstHighExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAVectorCstHighExp(AVectorCstHighExp node)
    {
        InAVectorCstHighExp(node);
        if(node.GetCstVectorValues() != null)
        {
            node.GetCstVectorValues().Apply(this);
        }
        OutAVectorCstHighExp(node);
    }
    public virtual void InAParenCstHighExp(AParenCstHighExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParenCstHighExp(AParenCstHighExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAParenCstHighExp(AParenCstHighExp node)
    {
        InAParenCstHighExp(node);
        if(node.GetRPar() != null)
        {
            node.GetRPar().Apply(this);
        }
        if(node.GetCstExpression() != null)
        {
            node.GetCstExpression().Apply(this);
        }
        if(node.GetLPar() != null)
        {
            node.GetLPar().Apply(this);
        }
        OutAParenCstHighExp(node);
    }
}
} // namespace GGCodeParser.analysis
