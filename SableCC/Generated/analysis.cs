/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using GOATCode.node;

namespace GOATCode.analysis {


public interface Analysis : Switch
{
    Object GetIn(Node node);
    void SetIn(Node node, Object inobj);
    Object GetOut(Node node);
    void SetOut(Node node, Object outobj);

    void CaseStart(Start node);
    void CaseADeclProgram(ADeclProgram node);
    void CaseAVarDecl(AVarDecl node);
    void CaseAParamDecl(AParamDecl node);
    void CaseAFuncDecl(AFuncDecl node);
    void CaseAProcDecl(AProcDecl node);
    void CaseAIntTypes(AIntTypes node);
    void CaseAFloatTypes(AFloatTypes node);
    void CaseABoolTypes(ABoolTypes node);
    void CaseAVectorTypes(AVectorTypes node);
    void CaseAStmtlistBlock(AStmtlistBlock node);
    void CaseABuildBlock(ABuildBlock node);
    void CaseAWalkBlock(AWalkBlock node);
    void CaseADeclStmt(ADeclStmt node);
    void CaseAIfStmt(AIfStmt node);
    void CaseARepeatStmt(ARepeatStmt node);
    void CaseAWhileStmt(AWhileStmt node);
    void CaseAGcodeStmt(AGcodeStmt node);
    void CaseAAssignStmt(AAssignStmt node);
    void CaseAAssignPlusStmt(AAssignPlusStmt node);
    void CaseAAssignMinusStmt(AAssignMinusStmt node);
    void CaseAAssignMultStmt(AAssignMultStmt node);
    void CaseAAssignDivisionStmt(AAssignDivisionStmt node);
    void CaseAAssignModStmt(AAssignModStmt node);
    void CaseAFunctionStmt(AFunctionStmt node);
    void CaseAReturnStmt(AReturnStmt node);
    void CaseABuildStmt(ABuildStmt node);
    void CaseAWalkStmt(AWalkStmt node);
    void CaseAVectorExp(AVectorExp node);
    void CaseAPlusExp(APlusExp node);
    void CaseAMinusExp(AMinusExp node);
    void CaseAMultExp(AMultExp node);
    void CaseADivdExp(ADivdExp node);
    void CaseAModuloExp(AModuloExp node);
    void CaseAAndExp(AAndExp node);
    void CaseAOrExp(AOrExp node);
    void CaseAEqExp(AEqExp node);
    void CaseALtExp(ALtExp node);
    void CaseALeqExp(ALeqExp node);
    void CaseAGtExp(AGtExp node);
    void CaseAGeqExp(AGeqExp node);
    void CaseANeqExp(ANeqExp node);
    void CaseANotExp(ANotExp node);
    void CaseABoolvalExp(ABoolvalExp node);
    void CaseANumberExp(ANumberExp node);
    void CaseAFunctionExp(AFunctionExp node);
    void CaseAIdExp(AIdExp node);
    void CaseABuildExp(ABuildExp node);
    void CaseAWalkExp(AWalkExp node);

    void CaseTGcode(TGcode node);
    void CaseTGcodeLiteral(TGcodeLiteral node);
    void CaseTEol(TEol node);
    void CaseTBlank(TBlank node);
    void CaseTAssignmentOp(TAssignmentOp node);
    void CaseTMultiplicationOp(TMultiplicationOp node);
    void CaseTModuloOp(TModuloOp node);
    void CaseTDivisionOp(TDivisionOp node);
    void CaseTPlusOp(TPlusOp node);
    void CaseTMinusOp(TMinusOp node);
    void CaseTEqual(TEqual node);
    void CaseTLessThan(TLessThan node);
    void CaseTLessThanOrEqual(TLessThanOrEqual node);
    void CaseTGreaterThan(TGreaterThan node);
    void CaseTGreaterThanOrEqual(TGreaterThanOrEqual node);
    void CaseTNot(TNot node);
    void CaseTNotEqual(TNotEqual node);
    void CaseTLPar(TLPar node);
    void CaseTRPar(TRPar node);
    void CaseTLCur(TLCur node);
    void CaseTRCur(TRCur node);
    void CaseTComma(TComma node);
    void CaseTVector(TVector node);
    void CaseTInt(TInt node);
    void CaseTConst(TConst node);
    void CaseTFloat(TFloat node);
    void CaseTBool(TBool node);
    void CaseTVoid(TVoid node);
    void CaseTBoolValue(TBoolValue node);
    void CaseTIf(TIf node);
    void CaseTElse(TElse node);
    void CaseTRepeat(TRepeat node);
    void CaseTWhile(TWhile node);
    void CaseTReturn(TReturn node);
    void CaseTBuild(TBuild node);
    void CaseTWalk(TWalk node);
    void CaseTAnd(TAnd node);
    void CaseTOr(TOr node);
    void CaseTNumber(TNumber node);
    void CaseTId(TId node);
    void CaseTMultilineComment(TMultilineComment node);
    void CaseTSinglelineComment(TSinglelineComment node);
    void CaseEOF(EOF node);
}


public class AnalysisAdapter : Analysis
{
    private Hashtable inhash;
    private Hashtable outhash;

    public virtual Object GetIn(Node node)
    {
        if(inhash == null)
        {
            return null;
        }

        return inhash[node];
    }

    public virtual void SetIn(Node node, Object inobj)
    {
        if(this.inhash == null)
        {
            this.inhash = new Hashtable(1);
        }

        if(inobj != null)
        {
            this.inhash[node] = inobj;
        }
        else
        {
            this.inhash.Remove(node);
        }
    }
    public virtual Object GetOut(Node node)
    {
        if(outhash == null)
        {
            return null;
        }

        return outhash[node];
    }

    public virtual void SetOut(Node node, Object outobj)
    {
        if(this.outhash == null)
        {
            this.outhash = new Hashtable(1);
        }

        if(outobj != null)
        {
            this.outhash[node] = outobj;
        }
        else
        {
            this.outhash.Remove(node);
        }
    }
    public virtual void CaseStart(Start node)
    {
        DefaultCase(node);
    }

    public virtual void CaseADeclProgram(ADeclProgram node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAVarDecl(AVarDecl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAParamDecl(AParamDecl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFuncDecl(AFuncDecl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAProcDecl(AProcDecl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntTypes(AIntTypes node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFloatTypes(AFloatTypes node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABoolTypes(ABoolTypes node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAVectorTypes(AVectorTypes node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStmtlistBlock(AStmtlistBlock node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABuildBlock(ABuildBlock node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAWalkBlock(AWalkBlock node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeclStmt(ADeclStmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIfStmt(AIfStmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseARepeatStmt(ARepeatStmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAWhileStmt(AWhileStmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGcodeStmt(AGcodeStmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssignStmt(AAssignStmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssignPlusStmt(AAssignPlusStmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssignMinusStmt(AAssignMinusStmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssignMultStmt(AAssignMultStmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssignDivisionStmt(AAssignDivisionStmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssignModStmt(AAssignModStmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFunctionStmt(AFunctionStmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAReturnStmt(AReturnStmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABuildStmt(ABuildStmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAWalkStmt(AWalkStmt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAVectorExp(AVectorExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPlusExp(APlusExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMinusExp(AMinusExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultExp(AMultExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADivdExp(ADivdExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAModuloExp(AModuloExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAndExp(AAndExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOrExp(AOrExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAEqExp(AEqExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALtExp(ALtExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALeqExp(ALeqExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGtExp(AGtExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGeqExp(AGeqExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANeqExp(ANeqExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANotExp(ANotExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABoolvalExp(ABoolvalExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANumberExp(ANumberExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFunctionExp(AFunctionExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIdExp(AIdExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABuildExp(ABuildExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAWalkExp(AWalkExp node)
    {
        DefaultCase(node);
    }

    public virtual void CaseTGcode(TGcode node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGcodeLiteral(TGcodeLiteral node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEol(TEol node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTBlank(TBlank node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAssignmentOp(TAssignmentOp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMultiplicationOp(TMultiplicationOp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTModuloOp(TModuloOp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDivisionOp(TDivisionOp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPlusOp(TPlusOp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMinusOp(TMinusOp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEqual(TEqual node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLessThan(TLessThan node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLessThanOrEqual(TLessThanOrEqual node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGreaterThan(TGreaterThan node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGreaterThanOrEqual(TGreaterThanOrEqual node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNot(TNot node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNotEqual(TNotEqual node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLPar(TLPar node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRPar(TRPar node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLCur(TLCur node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRCur(TRCur node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComma(TComma node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTVector(TVector node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTInt(TInt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTConst(TConst node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTFloat(TFloat node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTBool(TBool node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTVoid(TVoid node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTBoolValue(TBoolValue node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTIf(TIf node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTElse(TElse node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRepeat(TRepeat node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTWhile(TWhile node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTReturn(TReturn node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTBuild(TBuild node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTWalk(TWalk node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAnd(TAnd node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOr(TOr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNumber(TNumber node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTId(TId node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMultilineComment(TMultilineComment node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTSinglelineComment(TSinglelineComment node)
    {
        DefaultCase(node);
    }

    public virtual void CaseEOF(EOF node)
    {
        DefaultCase(node);
    }

    public virtual void DefaultCase(Node node)
    {
    }
}


public class DepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetPProgram().Apply(this);
        node.GetEOF().Apply(this);
        OutStart(node);
    }

    public virtual void InADeclProgram(ADeclProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclProgram(ADeclProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclProgram(ADeclProgram node)
    {
        InADeclProgram(node);
        {
            Object[] temp = new Object[node.GetDecl().Count];
            node.GetDecl().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PDecl) temp[i]).Apply(this);
            }
        }
        OutADeclProgram(node);
    }
    public virtual void InAVarDecl(AVarDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVarDecl(AVarDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseAVarDecl(AVarDecl node)
    {
        InAVarDecl(node);
        if(node.GetConst() != null)
        {
            node.GetConst().Apply(this);
        }
        if(node.GetTypes() != null)
        {
            node.GetTypes().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutAVarDecl(node);
    }
    public virtual void InAParamDecl(AParamDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParamDecl(AParamDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseAParamDecl(AParamDecl node)
    {
        InAParamDecl(node);
        if(node.GetTypes() != null)
        {
            node.GetTypes().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAParamDecl(node);
    }
    public virtual void InAFuncDecl(AFuncDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFuncDecl(AFuncDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseAFuncDecl(AFuncDecl node)
    {
        InAFuncDecl(node);
        if(node.GetTypes() != null)
        {
            node.GetTypes().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetDecl().Count];
            node.GetDecl().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PDecl) temp[i]).Apply(this);
            }
        }
        if(node.GetBlock() != null)
        {
            node.GetBlock().Apply(this);
        }
        OutAFuncDecl(node);
    }
    public virtual void InAProcDecl(AProcDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProcDecl(AProcDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseAProcDecl(AProcDecl node)
    {
        InAProcDecl(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetDecl().Count];
            node.GetDecl().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PDecl) temp[i]).Apply(this);
            }
        }
        if(node.GetBlock() != null)
        {
            node.GetBlock().Apply(this);
        }
        OutAProcDecl(node);
    }
    public virtual void InAIntTypes(AIntTypes node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntTypes(AIntTypes node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntTypes(AIntTypes node)
    {
        InAIntTypes(node);
        OutAIntTypes(node);
    }
    public virtual void InAFloatTypes(AFloatTypes node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatTypes(AFloatTypes node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatTypes(AFloatTypes node)
    {
        InAFloatTypes(node);
        OutAFloatTypes(node);
    }
    public virtual void InABoolTypes(ABoolTypes node)
    {
        DefaultIn(node);
    }

    public virtual void OutABoolTypes(ABoolTypes node)
    {
        DefaultOut(node);
    }

    public override void CaseABoolTypes(ABoolTypes node)
    {
        InABoolTypes(node);
        OutABoolTypes(node);
    }
    public virtual void InAVectorTypes(AVectorTypes node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVectorTypes(AVectorTypes node)
    {
        DefaultOut(node);
    }

    public override void CaseAVectorTypes(AVectorTypes node)
    {
        InAVectorTypes(node);
        OutAVectorTypes(node);
    }
    public virtual void InAStmtlistBlock(AStmtlistBlock node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStmtlistBlock(AStmtlistBlock node)
    {
        DefaultOut(node);
    }

    public override void CaseAStmtlistBlock(AStmtlistBlock node)
    {
        InAStmtlistBlock(node);
        {
            Object[] temp = new Object[node.GetStmt().Count];
            node.GetStmt().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PStmt) temp[i]).Apply(this);
            }
        }
        OutAStmtlistBlock(node);
    }
    public virtual void InABuildBlock(ABuildBlock node)
    {
        DefaultIn(node);
    }

    public virtual void OutABuildBlock(ABuildBlock node)
    {
        DefaultOut(node);
    }

    public override void CaseABuildBlock(ABuildBlock node)
    {
        InABuildBlock(node);
        if(node.GetBlock() != null)
        {
            node.GetBlock().Apply(this);
        }
        OutABuildBlock(node);
    }
    public virtual void InAWalkBlock(AWalkBlock node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWalkBlock(AWalkBlock node)
    {
        DefaultOut(node);
    }

    public override void CaseAWalkBlock(AWalkBlock node)
    {
        InAWalkBlock(node);
        if(node.GetBlock() != null)
        {
            node.GetBlock().Apply(this);
        }
        OutAWalkBlock(node);
    }
    public virtual void InADeclStmt(ADeclStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclStmt(ADeclStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclStmt(ADeclStmt node)
    {
        InADeclStmt(node);
        if(node.GetDecl() != null)
        {
            node.GetDecl().Apply(this);
        }
        OutADeclStmt(node);
    }
    public virtual void InAIfStmt(AIfStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfStmt(AIfStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfStmt(AIfStmt node)
    {
        InAIfStmt(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        if(node.GetThen() != null)
        {
            node.GetThen().Apply(this);
        }
        if(node.GetElse() != null)
        {
            node.GetElse().Apply(this);
        }
        OutAIfStmt(node);
    }
    public virtual void InARepeatStmt(ARepeatStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutARepeatStmt(ARepeatStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseARepeatStmt(ARepeatStmt node)
    {
        InARepeatStmt(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        if(node.GetBlock() != null)
        {
            node.GetBlock().Apply(this);
        }
        OutARepeatStmt(node);
    }
    public virtual void InAWhileStmt(AWhileStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileStmt(AWhileStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileStmt(AWhileStmt node)
    {
        InAWhileStmt(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        if(node.GetBlock() != null)
        {
            node.GetBlock().Apply(this);
        }
        OutAWhileStmt(node);
    }
    public virtual void InAGcodeStmt(AGcodeStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGcodeStmt(AGcodeStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAGcodeStmt(AGcodeStmt node)
    {
        InAGcodeStmt(node);
        if(node.GetGcodeLiteral() != null)
        {
            node.GetGcodeLiteral().Apply(this);
        }
        OutAGcodeStmt(node);
    }
    public virtual void InAAssignStmt(AAssignStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignStmt(AAssignStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignStmt(AAssignStmt node)
    {
        InAAssignStmt(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutAAssignStmt(node);
    }
    public virtual void InAAssignPlusStmt(AAssignPlusStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignPlusStmt(AAssignPlusStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignPlusStmt(AAssignPlusStmt node)
    {
        InAAssignPlusStmt(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutAAssignPlusStmt(node);
    }
    public virtual void InAAssignMinusStmt(AAssignMinusStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignMinusStmt(AAssignMinusStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignMinusStmt(AAssignMinusStmt node)
    {
        InAAssignMinusStmt(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutAAssignMinusStmt(node);
    }
    public virtual void InAAssignMultStmt(AAssignMultStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignMultStmt(AAssignMultStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignMultStmt(AAssignMultStmt node)
    {
        InAAssignMultStmt(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutAAssignMultStmt(node);
    }
    public virtual void InAAssignDivisionStmt(AAssignDivisionStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignDivisionStmt(AAssignDivisionStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignDivisionStmt(AAssignDivisionStmt node)
    {
        InAAssignDivisionStmt(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutAAssignDivisionStmt(node);
    }
    public virtual void InAAssignModStmt(AAssignModStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignModStmt(AAssignModStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignModStmt(AAssignModStmt node)
    {
        InAAssignModStmt(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutAAssignModStmt(node);
    }
    public virtual void InAFunctionStmt(AFunctionStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionStmt(AFunctionStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionStmt(AFunctionStmt node)
    {
        InAFunctionStmt(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutAFunctionStmt(node);
    }
    public virtual void InAReturnStmt(AReturnStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAReturnStmt(AReturnStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAReturnStmt(AReturnStmt node)
    {
        InAReturnStmt(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutAReturnStmt(node);
    }
    public virtual void InABuildStmt(ABuildStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutABuildStmt(ABuildStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseABuildStmt(ABuildStmt node)
    {
        InABuildStmt(node);
        if(node.GetBlock() != null)
        {
            node.GetBlock().Apply(this);
        }
        OutABuildStmt(node);
    }
    public virtual void InAWalkStmt(AWalkStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWalkStmt(AWalkStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAWalkStmt(AWalkStmt node)
    {
        InAWalkStmt(node);
        if(node.GetBlock() != null)
        {
            node.GetBlock().Apply(this);
        }
        OutAWalkStmt(node);
    }
    public virtual void InAVectorExp(AVectorExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVectorExp(AVectorExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAVectorExp(AVectorExp node)
    {
        InAVectorExp(node);
        if(node.GetX() != null)
        {
            node.GetX().Apply(this);
        }
        if(node.GetY() != null)
        {
            node.GetY().Apply(this);
        }
        if(node.GetZ() != null)
        {
            node.GetZ().Apply(this);
        }
        OutAVectorExp(node);
    }
    public virtual void InAPlusExp(APlusExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPlusExp(APlusExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAPlusExp(APlusExp node)
    {
        InAPlusExp(node);
        if(node.GetL() != null)
        {
            node.GetL().Apply(this);
        }
        if(node.GetR() != null)
        {
            node.GetR().Apply(this);
        }
        OutAPlusExp(node);
    }
    public virtual void InAMinusExp(AMinusExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMinusExp(AMinusExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAMinusExp(AMinusExp node)
    {
        InAMinusExp(node);
        if(node.GetL() != null)
        {
            node.GetL().Apply(this);
        }
        if(node.GetR() != null)
        {
            node.GetR().Apply(this);
        }
        OutAMinusExp(node);
    }
    public virtual void InAMultExp(AMultExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultExp(AMultExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultExp(AMultExp node)
    {
        InAMultExp(node);
        if(node.GetL() != null)
        {
            node.GetL().Apply(this);
        }
        if(node.GetR() != null)
        {
            node.GetR().Apply(this);
        }
        OutAMultExp(node);
    }
    public virtual void InADivdExp(ADivdExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutADivdExp(ADivdExp node)
    {
        DefaultOut(node);
    }

    public override void CaseADivdExp(ADivdExp node)
    {
        InADivdExp(node);
        if(node.GetL() != null)
        {
            node.GetL().Apply(this);
        }
        if(node.GetR() != null)
        {
            node.GetR().Apply(this);
        }
        OutADivdExp(node);
    }
    public virtual void InAModuloExp(AModuloExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAModuloExp(AModuloExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAModuloExp(AModuloExp node)
    {
        InAModuloExp(node);
        if(node.GetL() != null)
        {
            node.GetL().Apply(this);
        }
        if(node.GetR() != null)
        {
            node.GetR().Apply(this);
        }
        OutAModuloExp(node);
    }
    public virtual void InAAndExp(AAndExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAndExp(AAndExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAAndExp(AAndExp node)
    {
        InAAndExp(node);
        if(node.GetL() != null)
        {
            node.GetL().Apply(this);
        }
        if(node.GetR() != null)
        {
            node.GetR().Apply(this);
        }
        OutAAndExp(node);
    }
    public virtual void InAOrExp(AOrExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOrExp(AOrExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAOrExp(AOrExp node)
    {
        InAOrExp(node);
        if(node.GetL() != null)
        {
            node.GetL().Apply(this);
        }
        if(node.GetR() != null)
        {
            node.GetR().Apply(this);
        }
        OutAOrExp(node);
    }
    public virtual void InAEqExp(AEqExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEqExp(AEqExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAEqExp(AEqExp node)
    {
        InAEqExp(node);
        if(node.GetL() != null)
        {
            node.GetL().Apply(this);
        }
        if(node.GetR() != null)
        {
            node.GetR().Apply(this);
        }
        OutAEqExp(node);
    }
    public virtual void InALtExp(ALtExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutALtExp(ALtExp node)
    {
        DefaultOut(node);
    }

    public override void CaseALtExp(ALtExp node)
    {
        InALtExp(node);
        if(node.GetL() != null)
        {
            node.GetL().Apply(this);
        }
        if(node.GetR() != null)
        {
            node.GetR().Apply(this);
        }
        OutALtExp(node);
    }
    public virtual void InALeqExp(ALeqExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutALeqExp(ALeqExp node)
    {
        DefaultOut(node);
    }

    public override void CaseALeqExp(ALeqExp node)
    {
        InALeqExp(node);
        if(node.GetL() != null)
        {
            node.GetL().Apply(this);
        }
        if(node.GetR() != null)
        {
            node.GetR().Apply(this);
        }
        OutALeqExp(node);
    }
    public virtual void InAGtExp(AGtExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGtExp(AGtExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAGtExp(AGtExp node)
    {
        InAGtExp(node);
        if(node.GetL() != null)
        {
            node.GetL().Apply(this);
        }
        if(node.GetR() != null)
        {
            node.GetR().Apply(this);
        }
        OutAGtExp(node);
    }
    public virtual void InAGeqExp(AGeqExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGeqExp(AGeqExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAGeqExp(AGeqExp node)
    {
        InAGeqExp(node);
        if(node.GetL() != null)
        {
            node.GetL().Apply(this);
        }
        if(node.GetR() != null)
        {
            node.GetR().Apply(this);
        }
        OutAGeqExp(node);
    }
    public virtual void InANeqExp(ANeqExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutANeqExp(ANeqExp node)
    {
        DefaultOut(node);
    }

    public override void CaseANeqExp(ANeqExp node)
    {
        InANeqExp(node);
        if(node.GetL() != null)
        {
            node.GetL().Apply(this);
        }
        if(node.GetR() != null)
        {
            node.GetR().Apply(this);
        }
        OutANeqExp(node);
    }
    public virtual void InANotExp(ANotExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotExp(ANotExp node)
    {
        DefaultOut(node);
    }

    public override void CaseANotExp(ANotExp node)
    {
        InANotExp(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutANotExp(node);
    }
    public virtual void InABoolvalExp(ABoolvalExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutABoolvalExp(ABoolvalExp node)
    {
        DefaultOut(node);
    }

    public override void CaseABoolvalExp(ABoolvalExp node)
    {
        InABoolvalExp(node);
        if(node.GetBoolValue() != null)
        {
            node.GetBoolValue().Apply(this);
        }
        OutABoolvalExp(node);
    }
    public virtual void InANumberExp(ANumberExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutANumberExp(ANumberExp node)
    {
        DefaultOut(node);
    }

    public override void CaseANumberExp(ANumberExp node)
    {
        InANumberExp(node);
        if(node.GetNumber() != null)
        {
            node.GetNumber().Apply(this);
        }
        OutANumberExp(node);
    }
    public virtual void InAFunctionExp(AFunctionExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionExp(AFunctionExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionExp(AFunctionExp node)
    {
        InAFunctionExp(node);
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetArgs().Count];
            node.GetArgs().CopyTo(temp, 0);
            for(int i = 0; i < temp.Length; i++)
            {
                ((PExp) temp[i]).Apply(this);
            }
        }
        OutAFunctionExp(node);
    }
    public virtual void InAIdExp(AIdExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIdExp(AIdExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAIdExp(AIdExp node)
    {
        InAIdExp(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAIdExp(node);
    }
    public virtual void InABuildExp(ABuildExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutABuildExp(ABuildExp node)
    {
        DefaultOut(node);
    }

    public override void CaseABuildExp(ABuildExp node)
    {
        InABuildExp(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutABuildExp(node);
    }
    public virtual void InAWalkExp(AWalkExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWalkExp(AWalkExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAWalkExp(AWalkExp node)
    {
        InAWalkExp(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutAWalkExp(node);
    }
}


public class ReversedDepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetEOF().Apply(this);
        node.GetPProgram().Apply(this);
        OutStart(node);
    }

    public virtual void InADeclProgram(ADeclProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclProgram(ADeclProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclProgram(ADeclProgram node)
    {
        InADeclProgram(node);
        {
            Object[] temp = new Object[node.GetDecl().Count];
            node.GetDecl().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PDecl) temp[i]).Apply(this);
            }
        }
        OutADeclProgram(node);
    }
    public virtual void InAVarDecl(AVarDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVarDecl(AVarDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseAVarDecl(AVarDecl node)
    {
        InAVarDecl(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetTypes() != null)
        {
            node.GetTypes().Apply(this);
        }
        if(node.GetConst() != null)
        {
            node.GetConst().Apply(this);
        }
        OutAVarDecl(node);
    }
    public virtual void InAParamDecl(AParamDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParamDecl(AParamDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseAParamDecl(AParamDecl node)
    {
        InAParamDecl(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetTypes() != null)
        {
            node.GetTypes().Apply(this);
        }
        OutAParamDecl(node);
    }
    public virtual void InAFuncDecl(AFuncDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFuncDecl(AFuncDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseAFuncDecl(AFuncDecl node)
    {
        InAFuncDecl(node);
        if(node.GetBlock() != null)
        {
            node.GetBlock().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetDecl().Count];
            node.GetDecl().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PDecl) temp[i]).Apply(this);
            }
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetTypes() != null)
        {
            node.GetTypes().Apply(this);
        }
        OutAFuncDecl(node);
    }
    public virtual void InAProcDecl(AProcDecl node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProcDecl(AProcDecl node)
    {
        DefaultOut(node);
    }

    public override void CaseAProcDecl(AProcDecl node)
    {
        InAProcDecl(node);
        if(node.GetBlock() != null)
        {
            node.GetBlock().Apply(this);
        }
        {
            Object[] temp = new Object[node.GetDecl().Count];
            node.GetDecl().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PDecl) temp[i]).Apply(this);
            }
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAProcDecl(node);
    }
    public virtual void InAIntTypes(AIntTypes node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntTypes(AIntTypes node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntTypes(AIntTypes node)
    {
        InAIntTypes(node);
        OutAIntTypes(node);
    }
    public virtual void InAFloatTypes(AFloatTypes node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatTypes(AFloatTypes node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatTypes(AFloatTypes node)
    {
        InAFloatTypes(node);
        OutAFloatTypes(node);
    }
    public virtual void InABoolTypes(ABoolTypes node)
    {
        DefaultIn(node);
    }

    public virtual void OutABoolTypes(ABoolTypes node)
    {
        DefaultOut(node);
    }

    public override void CaseABoolTypes(ABoolTypes node)
    {
        InABoolTypes(node);
        OutABoolTypes(node);
    }
    public virtual void InAVectorTypes(AVectorTypes node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVectorTypes(AVectorTypes node)
    {
        DefaultOut(node);
    }

    public override void CaseAVectorTypes(AVectorTypes node)
    {
        InAVectorTypes(node);
        OutAVectorTypes(node);
    }
    public virtual void InAStmtlistBlock(AStmtlistBlock node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStmtlistBlock(AStmtlistBlock node)
    {
        DefaultOut(node);
    }

    public override void CaseAStmtlistBlock(AStmtlistBlock node)
    {
        InAStmtlistBlock(node);
        {
            Object[] temp = new Object[node.GetStmt().Count];
            node.GetStmt().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PStmt) temp[i]).Apply(this);
            }
        }
        OutAStmtlistBlock(node);
    }
    public virtual void InABuildBlock(ABuildBlock node)
    {
        DefaultIn(node);
    }

    public virtual void OutABuildBlock(ABuildBlock node)
    {
        DefaultOut(node);
    }

    public override void CaseABuildBlock(ABuildBlock node)
    {
        InABuildBlock(node);
        if(node.GetBlock() != null)
        {
            node.GetBlock().Apply(this);
        }
        OutABuildBlock(node);
    }
    public virtual void InAWalkBlock(AWalkBlock node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWalkBlock(AWalkBlock node)
    {
        DefaultOut(node);
    }

    public override void CaseAWalkBlock(AWalkBlock node)
    {
        InAWalkBlock(node);
        if(node.GetBlock() != null)
        {
            node.GetBlock().Apply(this);
        }
        OutAWalkBlock(node);
    }
    public virtual void InADeclStmt(ADeclStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclStmt(ADeclStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclStmt(ADeclStmt node)
    {
        InADeclStmt(node);
        if(node.GetDecl() != null)
        {
            node.GetDecl().Apply(this);
        }
        OutADeclStmt(node);
    }
    public virtual void InAIfStmt(AIfStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfStmt(AIfStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfStmt(AIfStmt node)
    {
        InAIfStmt(node);
        if(node.GetElse() != null)
        {
            node.GetElse().Apply(this);
        }
        if(node.GetThen() != null)
        {
            node.GetThen().Apply(this);
        }
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutAIfStmt(node);
    }
    public virtual void InARepeatStmt(ARepeatStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutARepeatStmt(ARepeatStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseARepeatStmt(ARepeatStmt node)
    {
        InARepeatStmt(node);
        if(node.GetBlock() != null)
        {
            node.GetBlock().Apply(this);
        }
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutARepeatStmt(node);
    }
    public virtual void InAWhileStmt(AWhileStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileStmt(AWhileStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileStmt(AWhileStmt node)
    {
        InAWhileStmt(node);
        if(node.GetBlock() != null)
        {
            node.GetBlock().Apply(this);
        }
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutAWhileStmt(node);
    }
    public virtual void InAGcodeStmt(AGcodeStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGcodeStmt(AGcodeStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAGcodeStmt(AGcodeStmt node)
    {
        InAGcodeStmt(node);
        if(node.GetGcodeLiteral() != null)
        {
            node.GetGcodeLiteral().Apply(this);
        }
        OutAGcodeStmt(node);
    }
    public virtual void InAAssignStmt(AAssignStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignStmt(AAssignStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignStmt(AAssignStmt node)
    {
        InAAssignStmt(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAAssignStmt(node);
    }
    public virtual void InAAssignPlusStmt(AAssignPlusStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignPlusStmt(AAssignPlusStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignPlusStmt(AAssignPlusStmt node)
    {
        InAAssignPlusStmt(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAAssignPlusStmt(node);
    }
    public virtual void InAAssignMinusStmt(AAssignMinusStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignMinusStmt(AAssignMinusStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignMinusStmt(AAssignMinusStmt node)
    {
        InAAssignMinusStmt(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAAssignMinusStmt(node);
    }
    public virtual void InAAssignMultStmt(AAssignMultStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignMultStmt(AAssignMultStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignMultStmt(AAssignMultStmt node)
    {
        InAAssignMultStmt(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAAssignMultStmt(node);
    }
    public virtual void InAAssignDivisionStmt(AAssignDivisionStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignDivisionStmt(AAssignDivisionStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignDivisionStmt(AAssignDivisionStmt node)
    {
        InAAssignDivisionStmt(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAAssignDivisionStmt(node);
    }
    public virtual void InAAssignModStmt(AAssignModStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignModStmt(AAssignModStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignModStmt(AAssignModStmt node)
    {
        InAAssignModStmt(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAAssignModStmt(node);
    }
    public virtual void InAFunctionStmt(AFunctionStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionStmt(AFunctionStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionStmt(AFunctionStmt node)
    {
        InAFunctionStmt(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutAFunctionStmt(node);
    }
    public virtual void InAReturnStmt(AReturnStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAReturnStmt(AReturnStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAReturnStmt(AReturnStmt node)
    {
        InAReturnStmt(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutAReturnStmt(node);
    }
    public virtual void InABuildStmt(ABuildStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutABuildStmt(ABuildStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseABuildStmt(ABuildStmt node)
    {
        InABuildStmt(node);
        if(node.GetBlock() != null)
        {
            node.GetBlock().Apply(this);
        }
        OutABuildStmt(node);
    }
    public virtual void InAWalkStmt(AWalkStmt node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWalkStmt(AWalkStmt node)
    {
        DefaultOut(node);
    }

    public override void CaseAWalkStmt(AWalkStmt node)
    {
        InAWalkStmt(node);
        if(node.GetBlock() != null)
        {
            node.GetBlock().Apply(this);
        }
        OutAWalkStmt(node);
    }
    public virtual void InAVectorExp(AVectorExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVectorExp(AVectorExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAVectorExp(AVectorExp node)
    {
        InAVectorExp(node);
        if(node.GetZ() != null)
        {
            node.GetZ().Apply(this);
        }
        if(node.GetY() != null)
        {
            node.GetY().Apply(this);
        }
        if(node.GetX() != null)
        {
            node.GetX().Apply(this);
        }
        OutAVectorExp(node);
    }
    public virtual void InAPlusExp(APlusExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPlusExp(APlusExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAPlusExp(APlusExp node)
    {
        InAPlusExp(node);
        if(node.GetR() != null)
        {
            node.GetR().Apply(this);
        }
        if(node.GetL() != null)
        {
            node.GetL().Apply(this);
        }
        OutAPlusExp(node);
    }
    public virtual void InAMinusExp(AMinusExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMinusExp(AMinusExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAMinusExp(AMinusExp node)
    {
        InAMinusExp(node);
        if(node.GetR() != null)
        {
            node.GetR().Apply(this);
        }
        if(node.GetL() != null)
        {
            node.GetL().Apply(this);
        }
        OutAMinusExp(node);
    }
    public virtual void InAMultExp(AMultExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultExp(AMultExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultExp(AMultExp node)
    {
        InAMultExp(node);
        if(node.GetR() != null)
        {
            node.GetR().Apply(this);
        }
        if(node.GetL() != null)
        {
            node.GetL().Apply(this);
        }
        OutAMultExp(node);
    }
    public virtual void InADivdExp(ADivdExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutADivdExp(ADivdExp node)
    {
        DefaultOut(node);
    }

    public override void CaseADivdExp(ADivdExp node)
    {
        InADivdExp(node);
        if(node.GetR() != null)
        {
            node.GetR().Apply(this);
        }
        if(node.GetL() != null)
        {
            node.GetL().Apply(this);
        }
        OutADivdExp(node);
    }
    public virtual void InAModuloExp(AModuloExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAModuloExp(AModuloExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAModuloExp(AModuloExp node)
    {
        InAModuloExp(node);
        if(node.GetR() != null)
        {
            node.GetR().Apply(this);
        }
        if(node.GetL() != null)
        {
            node.GetL().Apply(this);
        }
        OutAModuloExp(node);
    }
    public virtual void InAAndExp(AAndExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAndExp(AAndExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAAndExp(AAndExp node)
    {
        InAAndExp(node);
        if(node.GetR() != null)
        {
            node.GetR().Apply(this);
        }
        if(node.GetL() != null)
        {
            node.GetL().Apply(this);
        }
        OutAAndExp(node);
    }
    public virtual void InAOrExp(AOrExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOrExp(AOrExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAOrExp(AOrExp node)
    {
        InAOrExp(node);
        if(node.GetR() != null)
        {
            node.GetR().Apply(this);
        }
        if(node.GetL() != null)
        {
            node.GetL().Apply(this);
        }
        OutAOrExp(node);
    }
    public virtual void InAEqExp(AEqExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEqExp(AEqExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAEqExp(AEqExp node)
    {
        InAEqExp(node);
        if(node.GetR() != null)
        {
            node.GetR().Apply(this);
        }
        if(node.GetL() != null)
        {
            node.GetL().Apply(this);
        }
        OutAEqExp(node);
    }
    public virtual void InALtExp(ALtExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutALtExp(ALtExp node)
    {
        DefaultOut(node);
    }

    public override void CaseALtExp(ALtExp node)
    {
        InALtExp(node);
        if(node.GetR() != null)
        {
            node.GetR().Apply(this);
        }
        if(node.GetL() != null)
        {
            node.GetL().Apply(this);
        }
        OutALtExp(node);
    }
    public virtual void InALeqExp(ALeqExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutALeqExp(ALeqExp node)
    {
        DefaultOut(node);
    }

    public override void CaseALeqExp(ALeqExp node)
    {
        InALeqExp(node);
        if(node.GetR() != null)
        {
            node.GetR().Apply(this);
        }
        if(node.GetL() != null)
        {
            node.GetL().Apply(this);
        }
        OutALeqExp(node);
    }
    public virtual void InAGtExp(AGtExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGtExp(AGtExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAGtExp(AGtExp node)
    {
        InAGtExp(node);
        if(node.GetR() != null)
        {
            node.GetR().Apply(this);
        }
        if(node.GetL() != null)
        {
            node.GetL().Apply(this);
        }
        OutAGtExp(node);
    }
    public virtual void InAGeqExp(AGeqExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGeqExp(AGeqExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAGeqExp(AGeqExp node)
    {
        InAGeqExp(node);
        if(node.GetR() != null)
        {
            node.GetR().Apply(this);
        }
        if(node.GetL() != null)
        {
            node.GetL().Apply(this);
        }
        OutAGeqExp(node);
    }
    public virtual void InANeqExp(ANeqExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutANeqExp(ANeqExp node)
    {
        DefaultOut(node);
    }

    public override void CaseANeqExp(ANeqExp node)
    {
        InANeqExp(node);
        if(node.GetR() != null)
        {
            node.GetR().Apply(this);
        }
        if(node.GetL() != null)
        {
            node.GetL().Apply(this);
        }
        OutANeqExp(node);
    }
    public virtual void InANotExp(ANotExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotExp(ANotExp node)
    {
        DefaultOut(node);
    }

    public override void CaseANotExp(ANotExp node)
    {
        InANotExp(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutANotExp(node);
    }
    public virtual void InABoolvalExp(ABoolvalExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutABoolvalExp(ABoolvalExp node)
    {
        DefaultOut(node);
    }

    public override void CaseABoolvalExp(ABoolvalExp node)
    {
        InABoolvalExp(node);
        if(node.GetBoolValue() != null)
        {
            node.GetBoolValue().Apply(this);
        }
        OutABoolvalExp(node);
    }
    public virtual void InANumberExp(ANumberExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutANumberExp(ANumberExp node)
    {
        DefaultOut(node);
    }

    public override void CaseANumberExp(ANumberExp node)
    {
        InANumberExp(node);
        if(node.GetNumber() != null)
        {
            node.GetNumber().Apply(this);
        }
        OutANumberExp(node);
    }
    public virtual void InAFunctionExp(AFunctionExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionExp(AFunctionExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionExp(AFunctionExp node)
    {
        InAFunctionExp(node);
        {
            Object[] temp = new Object[node.GetArgs().Count];
            node.GetArgs().CopyTo(temp, 0);
            for(int i = temp.Length - 1; i >= 0; i--)
            {
                ((PExp) temp[i]).Apply(this);
            }
        }
        if(node.GetName() != null)
        {
            node.GetName().Apply(this);
        }
        OutAFunctionExp(node);
    }
    public virtual void InAIdExp(AIdExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIdExp(AIdExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAIdExp(AIdExp node)
    {
        InAIdExp(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAIdExp(node);
    }
    public virtual void InABuildExp(ABuildExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutABuildExp(ABuildExp node)
    {
        DefaultOut(node);
    }

    public override void CaseABuildExp(ABuildExp node)
    {
        InABuildExp(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutABuildExp(node);
    }
    public virtual void InAWalkExp(AWalkExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWalkExp(AWalkExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAWalkExp(AWalkExp node)
    {
        InAWalkExp(node);
        if(node.GetExp() != null)
        {
            node.GetExp().Apply(this);
        }
        OutAWalkExp(node);
    }
}
} // namespace GOATCode.analysis
