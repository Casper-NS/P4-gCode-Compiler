/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using GGCodeParser.node;

namespace GGCodeParser.analysis {


public interface Analysis : Switch
{
    Object GetIn(Node node);
    void SetIn(Node node, Object inobj);
    Object GetOut(Node node);
    void SetOut(Node node, Object outobj);

    void CaseStart(Start node);
    void CaseAPlusExp(APlusExp node);
    void CaseAMinusExp(AMinusExp node);
    void CaseAMultExp(AMultExp node);
    void CaseADivdExp(ADivdExp node);
    void CaseAIdExp(AIdExp node);
    void CaseANumberExp(ANumberExp node);

    void CaseTEol(TEol node);
    void CaseTBlank(TBlank node);
    void CaseTStar(TStar node);
    void CaseTSlash(TSlash node);
    void CaseTPlus(TPlus node);
    void CaseTMinus(TMinus node);
    void CaseTLPar(TLPar node);
    void CaseTRPar(TRPar node);
    void CaseTNumber(TNumber node);
    void CaseTId(TId node);
    void CaseEOF(EOF node);
}


public class AnalysisAdapter : Analysis
{
    private Hashtable inhash;
    private Hashtable outhash;

    public virtual Object GetIn(Node node)
    {
        if(inhash == null)
        {
            return null;
        }

        return inhash[node];
    }

    public virtual void SetIn(Node node, Object inobj)
    {
        if(this.inhash == null)
        {
            this.inhash = new Hashtable(1);
        }

        if(inobj != null)
        {
            this.inhash[node] = inobj;
        }
        else
        {
            this.inhash.Remove(node);
        }
    }
    public virtual Object GetOut(Node node)
    {
        if(outhash == null)
        {
            return null;
        }

        return outhash[node];
    }

    public virtual void SetOut(Node node, Object outobj)
    {
        if(this.outhash == null)
        {
            this.outhash = new Hashtable(1);
        }

        if(outobj != null)
        {
            this.outhash[node] = outobj;
        }
        else
        {
            this.outhash.Remove(node);
        }
    }
    public virtual void CaseStart(Start node)
    {
        DefaultCase(node);
    }

    public virtual void CaseAPlusExp(APlusExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMinusExp(AMinusExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultExp(AMultExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADivdExp(ADivdExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIdExp(AIdExp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANumberExp(ANumberExp node)
    {
        DefaultCase(node);
    }

    public virtual void CaseTEol(TEol node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTBlank(TBlank node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTStar(TStar node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTSlash(TSlash node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPlus(TPlus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMinus(TMinus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLPar(TLPar node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRPar(TRPar node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNumber(TNumber node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTId(TId node)
    {
        DefaultCase(node);
    }

    public virtual void CaseEOF(EOF node)
    {
        DefaultCase(node);
    }

    public virtual void DefaultCase(Node node)
    {
    }
}


public class DepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetPExp().Apply(this);
        node.GetEOF().Apply(this);
        OutStart(node);
    }

    public virtual void InAPlusExp(APlusExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPlusExp(APlusExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAPlusExp(APlusExp node)
    {
        InAPlusExp(node);
        if(node.GetL() != null)
        {
            node.GetL().Apply(this);
        }
        if(node.GetR() != null)
        {
            node.GetR().Apply(this);
        }
        OutAPlusExp(node);
    }
    public virtual void InAMinusExp(AMinusExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMinusExp(AMinusExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAMinusExp(AMinusExp node)
    {
        InAMinusExp(node);
        if(node.GetL() != null)
        {
            node.GetL().Apply(this);
        }
        if(node.GetR() != null)
        {
            node.GetR().Apply(this);
        }
        OutAMinusExp(node);
    }
    public virtual void InAMultExp(AMultExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultExp(AMultExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultExp(AMultExp node)
    {
        InAMultExp(node);
        if(node.GetL() != null)
        {
            node.GetL().Apply(this);
        }
        if(node.GetR() != null)
        {
            node.GetR().Apply(this);
        }
        OutAMultExp(node);
    }
    public virtual void InADivdExp(ADivdExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutADivdExp(ADivdExp node)
    {
        DefaultOut(node);
    }

    public override void CaseADivdExp(ADivdExp node)
    {
        InADivdExp(node);
        if(node.GetL() != null)
        {
            node.GetL().Apply(this);
        }
        if(node.GetR() != null)
        {
            node.GetR().Apply(this);
        }
        OutADivdExp(node);
    }
    public virtual void InAIdExp(AIdExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIdExp(AIdExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAIdExp(AIdExp node)
    {
        InAIdExp(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAIdExp(node);
    }
    public virtual void InANumberExp(ANumberExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutANumberExp(ANumberExp node)
    {
        DefaultOut(node);
    }

    public override void CaseANumberExp(ANumberExp node)
    {
        InANumberExp(node);
        if(node.GetNumber() != null)
        {
            node.GetNumber().Apply(this);
        }
        OutANumberExp(node);
    }
}


public class ReversedDepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetEOF().Apply(this);
        node.GetPExp().Apply(this);
        OutStart(node);
    }

    public virtual void InAPlusExp(APlusExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPlusExp(APlusExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAPlusExp(APlusExp node)
    {
        InAPlusExp(node);
        if(node.GetR() != null)
        {
            node.GetR().Apply(this);
        }
        if(node.GetL() != null)
        {
            node.GetL().Apply(this);
        }
        OutAPlusExp(node);
    }
    public virtual void InAMinusExp(AMinusExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMinusExp(AMinusExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAMinusExp(AMinusExp node)
    {
        InAMinusExp(node);
        if(node.GetR() != null)
        {
            node.GetR().Apply(this);
        }
        if(node.GetL() != null)
        {
            node.GetL().Apply(this);
        }
        OutAMinusExp(node);
    }
    public virtual void InAMultExp(AMultExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultExp(AMultExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultExp(AMultExp node)
    {
        InAMultExp(node);
        if(node.GetR() != null)
        {
            node.GetR().Apply(this);
        }
        if(node.GetL() != null)
        {
            node.GetL().Apply(this);
        }
        OutAMultExp(node);
    }
    public virtual void InADivdExp(ADivdExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutADivdExp(ADivdExp node)
    {
        DefaultOut(node);
    }

    public override void CaseADivdExp(ADivdExp node)
    {
        InADivdExp(node);
        if(node.GetR() != null)
        {
            node.GetR().Apply(this);
        }
        if(node.GetL() != null)
        {
            node.GetL().Apply(this);
        }
        OutADivdExp(node);
    }
    public virtual void InAIdExp(AIdExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIdExp(AIdExp node)
    {
        DefaultOut(node);
    }

    public override void CaseAIdExp(AIdExp node)
    {
        InAIdExp(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAIdExp(node);
    }
    public virtual void InANumberExp(ANumberExp node)
    {
        DefaultIn(node);
    }

    public virtual void OutANumberExp(ANumberExp node)
    {
        DefaultOut(node);
    }

    public override void CaseANumberExp(ANumberExp node)
    {
        InANumberExp(node);
        if(node.GetNumber() != null)
        {
            node.GetNumber().Apply(this);
        }
        OutANumberExp(node);
    }
}
} // namespace GGCodeParser.analysis
