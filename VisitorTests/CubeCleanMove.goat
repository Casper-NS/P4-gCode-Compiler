// print settings
const float layerHeight = 0.2
const float lineWidth = 0.4

// model settings
const int wallLayers = 46
const float size = 10
const int floorLineCount = 25

// corner of the print
const vector cornerPoint = (100, 100, 0) 

// the current layer
int curLayer = 0

void main()
{
    hatchedFloor(0)
    repeat(wallLayers) {
        wall(layerHeight * curLayer, -lineWidth)
        wall(layerHeight * curLayer, 0)
        curLayer += 1
    }
    hatchedFloor(curLayer * layerHeight)
}

build void hatchedFloor(float z)
{
    floor((size, 0, z) + cornerPoint, (0, -1, 0))
    floor((0, 0, z + layerHeight) + cornerPoint, (-1, 0, 0))
}

build void wall(float z, float offset)
{
    walk AbsMove((-offset, -offset, z) + cornerPoint) // go to the corner
    
    // draw the 4 walls, using offset to offset from size
    AbsMove((-offset, size+offset, z) + cornerPoint)
    AbsMove((size+offset, size+offset, z) + cornerPoint)
    AbsMove((size+offset, -offset, z) + cornerPoint)
    AbsMove((-offset, -offset, z) + cornerPoint)
}

build void floor(vector startPoint, vector direction)
{
    int i = 0
    vector normal = (direction.y, -direction.x, direction.z) // figure out the direction sideways is
    walk AbsMove(startPoint)
    repeat(floorLineCount){
        if(i%2 == 1){
            RelMove(direction * size)
        } else
        {
            RelMove(-(direction * size))
        }
        RelMove(normal * lineWidth)
        i += 1
    }
    RelMove((direction * size))
    curLayer += 1
}